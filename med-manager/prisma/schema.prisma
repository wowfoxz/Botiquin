// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String?
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  medications         Medication[]
  notificationSettings NotificationSettings?
  treatments          Treatment[]          // Relación con tratamientos
  notificationPreferences NotificationPreferences? // Relación con preferencias de notificaciones
  shoppingLists       ShoppingList[]       // Relación con listas de compras
}

model Medication {
  id                  String      @id @default(cuid())
  commercialName      String
  activeIngredient    String?
  description         String?
  intakeRecommendations String?
  imageUrl            String?
  initialQuantity     Float
  currentQuantity     Float
  unit                String // e.g., "pills", "ml"
  expirationDate      DateTime
  archived            Boolean     @default(false)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  user                User        @relation(fields: [userId], references: [id])
  userId              String
  treatments          Treatment[] // Relación con tratamientos que usan esta medicina
}

model NotificationSettings {
  id                  String   @id @default(cuid())
  daysBeforeExpiration Int      @default(30)
  lowStockThreshold    Float    @default(10)
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @unique
}

// Modelo para tratamientos médicos
model Treatment {
  id             String     @id @default(cuid())
  name           String
  medication     Medication @relation(fields: [medicationId], references: [id])
  medicationId   String
  frequencyHours Int       // Frecuencia en horas (ej: cada 8 horas)
  durationDays   Int       // Duración en días
  patient        String    // Nombre del paciente
  startDate      DateTime  @default(now())
  endDate        DateTime  // Fecha de finalización calculada
  isActive       Boolean   @default(true)
  dosage         String    // Descripción de la dosis (ej: "1 tableta")
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  notifications  Notification[] // Notificaciones asociadas al tratamiento
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // Nuevos campos para manejar el inicio específico del tratamiento
  startAtSpecificTime Boolean? @default(false) // Si el tratamiento comienza en una hora específica
  specificStartTime   DateTime? // Hora específica de inicio del tratamiento
}

// Modelo para notificaciones de tratamientos
model Notification {
  id              String    @id @default(cuid())
  treatment       Treatment @relation(fields: [treatmentId], references: [id])
  treatmentId     String
  scheduledDate   DateTime  // Fecha programada para la notificación
  sent            Boolean   @default(false)
  type            String    // Tipo de notificación: push, sound, email, browser
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Modelo para preferencias de notificaciones del usuario
model NotificationPreferences {
  id          String   @id @default(cuid())
  push        Boolean  @default(false)
  sound       Boolean  @default(false)
  email       Boolean  @default(false)
  browser     Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Modelo para items de la lista de compras
model ShoppingItem {
  id             String       @id @default(cuid())
  name           String
  presentation   String?
  laboratory     String?
  price          Float
  quantity       Int          @default(1)
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  shoppingListId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Modelo para listas de compras
model ShoppingList {
  id           String         @id @default(cuid())
  name         String
  items        ShoppingItem[]
  total        Float
  isArchived   Boolean        @default(false)
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}