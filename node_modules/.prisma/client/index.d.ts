
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Medication
 * 
 */
export type Medication = $Result.DefaultSelection<Prisma.$MedicationPayload>
/**
 * Model NotificationSettings
 * 
 */
export type NotificationSettings = $Result.DefaultSelection<Prisma.$NotificationSettingsPayload>
/**
 * Model Treatment
 * 
 */
export type Treatment = $Result.DefaultSelection<Prisma.$TreatmentPayload>
/**
 * Model TreatmentMedication
 * 
 */
export type TreatmentMedication = $Result.DefaultSelection<Prisma.$TreatmentMedicationPayload>
/**
 * Model TreatmentImage
 * 
 */
export type TreatmentImage = $Result.DefaultSelection<Prisma.$TreatmentImagePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model NotificationPreferences
 * 
 */
export type NotificationPreferences = $Result.DefaultSelection<Prisma.$NotificationPreferencesPayload>
/**
 * Model PushSubscription
 * 
 */
export type PushSubscription = $Result.DefaultSelection<Prisma.$PushSubscriptionPayload>
/**
 * Model ShoppingItem
 * 
 */
export type ShoppingItem = $Result.DefaultSelection<Prisma.$ShoppingItemPayload>
/**
 * Model ShoppingList
 * 
 */
export type ShoppingList = $Result.DefaultSelection<Prisma.$ShoppingListPayload>
/**
 * Model GrupoFamiliar
 * 
 */
export type GrupoFamiliar = $Result.DefaultSelection<Prisma.$GrupoFamiliarPayload>
/**
 * Model PerfilMenor
 * 
 */
export type PerfilMenor = $Result.DefaultSelection<Prisma.$PerfilMenorPayload>
/**
 * Model Toma
 * 
 */
export type Toma = $Result.DefaultSelection<Prisma.$TomaPayload>
/**
 * Model Historial
 * 
 */
export type Historial = $Result.DefaultSelection<Prisma.$HistorialPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADULTO: 'ADULTO',
  MENOR: 'MENOR'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medication`: Exposes CRUD operations for the **Medication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medications
    * const medications = await prisma.medication.findMany()
    * ```
    */
  get medication(): Prisma.MedicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationSettings`: Exposes CRUD operations for the **NotificationSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationSettings
    * const notificationSettings = await prisma.notificationSettings.findMany()
    * ```
    */
  get notificationSettings(): Prisma.NotificationSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.treatment`: Exposes CRUD operations for the **Treatment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Treatments
    * const treatments = await prisma.treatment.findMany()
    * ```
    */
  get treatment(): Prisma.TreatmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.treatmentMedication`: Exposes CRUD operations for the **TreatmentMedication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TreatmentMedications
    * const treatmentMedications = await prisma.treatmentMedication.findMany()
    * ```
    */
  get treatmentMedication(): Prisma.TreatmentMedicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.treatmentImage`: Exposes CRUD operations for the **TreatmentImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TreatmentImages
    * const treatmentImages = await prisma.treatmentImage.findMany()
    * ```
    */
  get treatmentImage(): Prisma.TreatmentImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationPreferences`: Exposes CRUD operations for the **NotificationPreferences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationPreferences
    * const notificationPreferences = await prisma.notificationPreferences.findMany()
    * ```
    */
  get notificationPreferences(): Prisma.NotificationPreferencesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pushSubscription`: Exposes CRUD operations for the **PushSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PushSubscriptions
    * const pushSubscriptions = await prisma.pushSubscription.findMany()
    * ```
    */
  get pushSubscription(): Prisma.PushSubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shoppingItem`: Exposes CRUD operations for the **ShoppingItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShoppingItems
    * const shoppingItems = await prisma.shoppingItem.findMany()
    * ```
    */
  get shoppingItem(): Prisma.ShoppingItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shoppingList`: Exposes CRUD operations for the **ShoppingList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShoppingLists
    * const shoppingLists = await prisma.shoppingList.findMany()
    * ```
    */
  get shoppingList(): Prisma.ShoppingListDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.grupoFamiliar`: Exposes CRUD operations for the **GrupoFamiliar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GrupoFamiliars
    * const grupoFamiliars = await prisma.grupoFamiliar.findMany()
    * ```
    */
  get grupoFamiliar(): Prisma.GrupoFamiliarDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.perfilMenor`: Exposes CRUD operations for the **PerfilMenor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PerfilMenors
    * const perfilMenors = await prisma.perfilMenor.findMany()
    * ```
    */
  get perfilMenor(): Prisma.PerfilMenorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.toma`: Exposes CRUD operations for the **Toma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tomas
    * const tomas = await prisma.toma.findMany()
    * ```
    */
  get toma(): Prisma.TomaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.historial`: Exposes CRUD operations for the **Historial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Historials
    * const historials = await prisma.historial.findMany()
    * ```
    */
  get historial(): Prisma.HistorialDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.1
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Medication: 'Medication',
    NotificationSettings: 'NotificationSettings',
    Treatment: 'Treatment',
    TreatmentMedication: 'TreatmentMedication',
    TreatmentImage: 'TreatmentImage',
    Notification: 'Notification',
    NotificationPreferences: 'NotificationPreferences',
    PushSubscription: 'PushSubscription',
    ShoppingItem: 'ShoppingItem',
    ShoppingList: 'ShoppingList',
    GrupoFamiliar: 'GrupoFamiliar',
    PerfilMenor: 'PerfilMenor',
    Toma: 'Toma',
    Historial: 'Historial'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "medication" | "notificationSettings" | "treatment" | "treatmentMedication" | "treatmentImage" | "notification" | "notificationPreferences" | "pushSubscription" | "shoppingItem" | "shoppingList" | "grupoFamiliar" | "perfilMenor" | "toma" | "historial"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Medication: {
        payload: Prisma.$MedicationPayload<ExtArgs>
        fields: Prisma.MedicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          findFirst: {
            args: Prisma.MedicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          findMany: {
            args: Prisma.MedicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>[]
          }
          create: {
            args: Prisma.MedicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          createMany: {
            args: Prisma.MedicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>[]
          }
          delete: {
            args: Prisma.MedicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          update: {
            args: Prisma.MedicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          deleteMany: {
            args: Prisma.MedicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>[]
          }
          upsert: {
            args: Prisma.MedicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          aggregate: {
            args: Prisma.MedicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedication>
          }
          groupBy: {
            args: Prisma.MedicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicationCountArgs<ExtArgs>
            result: $Utils.Optional<MedicationCountAggregateOutputType> | number
          }
        }
      }
      NotificationSettings: {
        payload: Prisma.$NotificationSettingsPayload<ExtArgs>
        fields: Prisma.NotificationSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          findFirst: {
            args: Prisma.NotificationSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          findMany: {
            args: Prisma.NotificationSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>[]
          }
          create: {
            args: Prisma.NotificationSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          createMany: {
            args: Prisma.NotificationSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>[]
          }
          delete: {
            args: Prisma.NotificationSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          update: {
            args: Prisma.NotificationSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          deleteMany: {
            args: Prisma.NotificationSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>[]
          }
          upsert: {
            args: Prisma.NotificationSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          aggregate: {
            args: Prisma.NotificationSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationSettings>
          }
          groupBy: {
            args: Prisma.NotificationSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationSettingsCountAggregateOutputType> | number
          }
        }
      }
      Treatment: {
        payload: Prisma.$TreatmentPayload<ExtArgs>
        fields: Prisma.TreatmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreatmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreatmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          findFirst: {
            args: Prisma.TreatmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreatmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          findMany: {
            args: Prisma.TreatmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>[]
          }
          create: {
            args: Prisma.TreatmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          createMany: {
            args: Prisma.TreatmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TreatmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>[]
          }
          delete: {
            args: Prisma.TreatmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          update: {
            args: Prisma.TreatmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          deleteMany: {
            args: Prisma.TreatmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TreatmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TreatmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>[]
          }
          upsert: {
            args: Prisma.TreatmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          aggregate: {
            args: Prisma.TreatmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTreatment>
          }
          groupBy: {
            args: Prisma.TreatmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TreatmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreatmentCountArgs<ExtArgs>
            result: $Utils.Optional<TreatmentCountAggregateOutputType> | number
          }
        }
      }
      TreatmentMedication: {
        payload: Prisma.$TreatmentMedicationPayload<ExtArgs>
        fields: Prisma.TreatmentMedicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreatmentMedicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreatmentMedicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload>
          }
          findFirst: {
            args: Prisma.TreatmentMedicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreatmentMedicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload>
          }
          findMany: {
            args: Prisma.TreatmentMedicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload>[]
          }
          create: {
            args: Prisma.TreatmentMedicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload>
          }
          createMany: {
            args: Prisma.TreatmentMedicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TreatmentMedicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload>[]
          }
          delete: {
            args: Prisma.TreatmentMedicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload>
          }
          update: {
            args: Prisma.TreatmentMedicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload>
          }
          deleteMany: {
            args: Prisma.TreatmentMedicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TreatmentMedicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TreatmentMedicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload>[]
          }
          upsert: {
            args: Prisma.TreatmentMedicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentMedicationPayload>
          }
          aggregate: {
            args: Prisma.TreatmentMedicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTreatmentMedication>
          }
          groupBy: {
            args: Prisma.TreatmentMedicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<TreatmentMedicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreatmentMedicationCountArgs<ExtArgs>
            result: $Utils.Optional<TreatmentMedicationCountAggregateOutputType> | number
          }
        }
      }
      TreatmentImage: {
        payload: Prisma.$TreatmentImagePayload<ExtArgs>
        fields: Prisma.TreatmentImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreatmentImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreatmentImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload>
          }
          findFirst: {
            args: Prisma.TreatmentImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreatmentImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload>
          }
          findMany: {
            args: Prisma.TreatmentImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload>[]
          }
          create: {
            args: Prisma.TreatmentImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload>
          }
          createMany: {
            args: Prisma.TreatmentImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TreatmentImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload>[]
          }
          delete: {
            args: Prisma.TreatmentImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload>
          }
          update: {
            args: Prisma.TreatmentImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload>
          }
          deleteMany: {
            args: Prisma.TreatmentImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TreatmentImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TreatmentImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload>[]
          }
          upsert: {
            args: Prisma.TreatmentImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentImagePayload>
          }
          aggregate: {
            args: Prisma.TreatmentImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTreatmentImage>
          }
          groupBy: {
            args: Prisma.TreatmentImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<TreatmentImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreatmentImageCountArgs<ExtArgs>
            result: $Utils.Optional<TreatmentImageCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      NotificationPreferences: {
        payload: Prisma.$NotificationPreferencesPayload<ExtArgs>
        fields: Prisma.NotificationPreferencesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationPreferencesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationPreferencesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload>
          }
          findFirst: {
            args: Prisma.NotificationPreferencesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationPreferencesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload>
          }
          findMany: {
            args: Prisma.NotificationPreferencesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload>[]
          }
          create: {
            args: Prisma.NotificationPreferencesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload>
          }
          createMany: {
            args: Prisma.NotificationPreferencesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationPreferencesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload>[]
          }
          delete: {
            args: Prisma.NotificationPreferencesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload>
          }
          update: {
            args: Prisma.NotificationPreferencesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload>
          }
          deleteMany: {
            args: Prisma.NotificationPreferencesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationPreferencesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationPreferencesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload>[]
          }
          upsert: {
            args: Prisma.NotificationPreferencesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencesPayload>
          }
          aggregate: {
            args: Prisma.NotificationPreferencesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationPreferences>
          }
          groupBy: {
            args: Prisma.NotificationPreferencesGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationPreferencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationPreferencesCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationPreferencesCountAggregateOutputType> | number
          }
        }
      }
      PushSubscription: {
        payload: Prisma.$PushSubscriptionPayload<ExtArgs>
        fields: Prisma.PushSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PushSubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PushSubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.PushSubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PushSubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          findMany: {
            args: Prisma.PushSubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>[]
          }
          create: {
            args: Prisma.PushSubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          createMany: {
            args: Prisma.PushSubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PushSubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>[]
          }
          delete: {
            args: Prisma.PushSubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          update: {
            args: Prisma.PushSubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.PushSubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PushSubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PushSubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.PushSubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.PushSubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePushSubscription>
          }
          groupBy: {
            args: Prisma.PushSubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PushSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PushSubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<PushSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      ShoppingItem: {
        payload: Prisma.$ShoppingItemPayload<ExtArgs>
        fields: Prisma.ShoppingItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShoppingItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShoppingItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          findFirst: {
            args: Prisma.ShoppingItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShoppingItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          findMany: {
            args: Prisma.ShoppingItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>[]
          }
          create: {
            args: Prisma.ShoppingItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          createMany: {
            args: Prisma.ShoppingItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShoppingItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>[]
          }
          delete: {
            args: Prisma.ShoppingItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          update: {
            args: Prisma.ShoppingItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          deleteMany: {
            args: Prisma.ShoppingItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShoppingItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShoppingItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>[]
          }
          upsert: {
            args: Prisma.ShoppingItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          aggregate: {
            args: Prisma.ShoppingItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShoppingItem>
          }
          groupBy: {
            args: Prisma.ShoppingItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShoppingItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShoppingItemCountArgs<ExtArgs>
            result: $Utils.Optional<ShoppingItemCountAggregateOutputType> | number
          }
        }
      }
      ShoppingList: {
        payload: Prisma.$ShoppingListPayload<ExtArgs>
        fields: Prisma.ShoppingListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShoppingListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShoppingListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          findFirst: {
            args: Prisma.ShoppingListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShoppingListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          findMany: {
            args: Prisma.ShoppingListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>[]
          }
          create: {
            args: Prisma.ShoppingListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          createMany: {
            args: Prisma.ShoppingListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShoppingListCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>[]
          }
          delete: {
            args: Prisma.ShoppingListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          update: {
            args: Prisma.ShoppingListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          deleteMany: {
            args: Prisma.ShoppingListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShoppingListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShoppingListUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>[]
          }
          upsert: {
            args: Prisma.ShoppingListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          aggregate: {
            args: Prisma.ShoppingListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShoppingList>
          }
          groupBy: {
            args: Prisma.ShoppingListGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShoppingListGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShoppingListCountArgs<ExtArgs>
            result: $Utils.Optional<ShoppingListCountAggregateOutputType> | number
          }
        }
      }
      GrupoFamiliar: {
        payload: Prisma.$GrupoFamiliarPayload<ExtArgs>
        fields: Prisma.GrupoFamiliarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrupoFamiliarFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrupoFamiliarFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload>
          }
          findFirst: {
            args: Prisma.GrupoFamiliarFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrupoFamiliarFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload>
          }
          findMany: {
            args: Prisma.GrupoFamiliarFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload>[]
          }
          create: {
            args: Prisma.GrupoFamiliarCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload>
          }
          createMany: {
            args: Prisma.GrupoFamiliarCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GrupoFamiliarCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload>[]
          }
          delete: {
            args: Prisma.GrupoFamiliarDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload>
          }
          update: {
            args: Prisma.GrupoFamiliarUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload>
          }
          deleteMany: {
            args: Prisma.GrupoFamiliarDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GrupoFamiliarUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GrupoFamiliarUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload>[]
          }
          upsert: {
            args: Prisma.GrupoFamiliarUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrupoFamiliarPayload>
          }
          aggregate: {
            args: Prisma.GrupoFamiliarAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrupoFamiliar>
          }
          groupBy: {
            args: Prisma.GrupoFamiliarGroupByArgs<ExtArgs>
            result: $Utils.Optional<GrupoFamiliarGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrupoFamiliarCountArgs<ExtArgs>
            result: $Utils.Optional<GrupoFamiliarCountAggregateOutputType> | number
          }
        }
      }
      PerfilMenor: {
        payload: Prisma.$PerfilMenorPayload<ExtArgs>
        fields: Prisma.PerfilMenorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerfilMenorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerfilMenorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload>
          }
          findFirst: {
            args: Prisma.PerfilMenorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerfilMenorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload>
          }
          findMany: {
            args: Prisma.PerfilMenorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload>[]
          }
          create: {
            args: Prisma.PerfilMenorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload>
          }
          createMany: {
            args: Prisma.PerfilMenorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PerfilMenorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload>[]
          }
          delete: {
            args: Prisma.PerfilMenorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload>
          }
          update: {
            args: Prisma.PerfilMenorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload>
          }
          deleteMany: {
            args: Prisma.PerfilMenorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerfilMenorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PerfilMenorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload>[]
          }
          upsert: {
            args: Prisma.PerfilMenorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerfilMenorPayload>
          }
          aggregate: {
            args: Prisma.PerfilMenorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerfilMenor>
          }
          groupBy: {
            args: Prisma.PerfilMenorGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerfilMenorGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerfilMenorCountArgs<ExtArgs>
            result: $Utils.Optional<PerfilMenorCountAggregateOutputType> | number
          }
        }
      }
      Toma: {
        payload: Prisma.$TomaPayload<ExtArgs>
        fields: Prisma.TomaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TomaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TomaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload>
          }
          findFirst: {
            args: Prisma.TomaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TomaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload>
          }
          findMany: {
            args: Prisma.TomaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload>[]
          }
          create: {
            args: Prisma.TomaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload>
          }
          createMany: {
            args: Prisma.TomaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TomaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload>[]
          }
          delete: {
            args: Prisma.TomaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload>
          }
          update: {
            args: Prisma.TomaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload>
          }
          deleteMany: {
            args: Prisma.TomaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TomaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TomaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload>[]
          }
          upsert: {
            args: Prisma.TomaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TomaPayload>
          }
          aggregate: {
            args: Prisma.TomaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToma>
          }
          groupBy: {
            args: Prisma.TomaGroupByArgs<ExtArgs>
            result: $Utils.Optional<TomaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TomaCountArgs<ExtArgs>
            result: $Utils.Optional<TomaCountAggregateOutputType> | number
          }
        }
      }
      Historial: {
        payload: Prisma.$HistorialPayload<ExtArgs>
        fields: Prisma.HistorialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistorialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistorialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload>
          }
          findFirst: {
            args: Prisma.HistorialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistorialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload>
          }
          findMany: {
            args: Prisma.HistorialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload>[]
          }
          create: {
            args: Prisma.HistorialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload>
          }
          createMany: {
            args: Prisma.HistorialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HistorialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload>[]
          }
          delete: {
            args: Prisma.HistorialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload>
          }
          update: {
            args: Prisma.HistorialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload>
          }
          deleteMany: {
            args: Prisma.HistorialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HistorialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HistorialUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload>[]
          }
          upsert: {
            args: Prisma.HistorialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialPayload>
          }
          aggregate: {
            args: Prisma.HistorialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistorial>
          }
          groupBy: {
            args: Prisma.HistorialGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistorialGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistorialCountArgs<ExtArgs>
            result: $Utils.Optional<HistorialCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    medication?: MedicationOmit
    notificationSettings?: NotificationSettingsOmit
    treatment?: TreatmentOmit
    treatmentMedication?: TreatmentMedicationOmit
    treatmentImage?: TreatmentImageOmit
    notification?: NotificationOmit
    notificationPreferences?: NotificationPreferencesOmit
    pushSubscription?: PushSubscriptionOmit
    shoppingItem?: ShoppingItemOmit
    shoppingList?: ShoppingListOmit
    grupoFamiliar?: GrupoFamiliarOmit
    perfilMenor?: PerfilMenorOmit
    toma?: TomaOmit
    historial?: HistorialOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    medications: number
    treatments: number
    pushSubscriptions: number
    shoppingLists: number
    tomasRegistradas: number
    tomasConsumidas: number
    grupoCreado: number
    historial: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medications?: boolean | UserCountOutputTypeCountMedicationsArgs
    treatments?: boolean | UserCountOutputTypeCountTreatmentsArgs
    pushSubscriptions?: boolean | UserCountOutputTypeCountPushSubscriptionsArgs
    shoppingLists?: boolean | UserCountOutputTypeCountShoppingListsArgs
    tomasRegistradas?: boolean | UserCountOutputTypeCountTomasRegistradasArgs
    tomasConsumidas?: boolean | UserCountOutputTypeCountTomasConsumidasArgs
    grupoCreado?: boolean | UserCountOutputTypeCountGrupoCreadoArgs
    historial?: boolean | UserCountOutputTypeCountHistorialArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPushSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PushSubscriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShoppingListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingListWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTomasRegistradasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TomaWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTomasConsumidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TomaWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGrupoCreadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrupoFamiliarWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHistorialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistorialWhereInput
  }


  /**
   * Count Type MedicationCountOutputType
   */

  export type MedicationCountOutputType = {
    treatmentMedications: number
    tomas: number
  }

  export type MedicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatmentMedications?: boolean | MedicationCountOutputTypeCountTreatmentMedicationsArgs
    tomas?: boolean | MedicationCountOutputTypeCountTomasArgs
  }

  // Custom InputTypes
  /**
   * MedicationCountOutputType without action
   */
  export type MedicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCountOutputType
     */
    select?: MedicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicationCountOutputType without action
   */
  export type MedicationCountOutputTypeCountTreatmentMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentMedicationWhereInput
  }

  /**
   * MedicationCountOutputType without action
   */
  export type MedicationCountOutputTypeCountTomasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TomaWhereInput
  }


  /**
   * Count Type TreatmentCountOutputType
   */

  export type TreatmentCountOutputType = {
    notifications: number
    medications: number
    images: number
  }

  export type TreatmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | TreatmentCountOutputTypeCountNotificationsArgs
    medications?: boolean | TreatmentCountOutputTypeCountMedicationsArgs
    images?: boolean | TreatmentCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentCountOutputType
     */
    select?: TreatmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeCountMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentMedicationWhereInput
  }

  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentImageWhereInput
  }


  /**
   * Count Type ShoppingListCountOutputType
   */

  export type ShoppingListCountOutputType = {
    items: number
  }

  export type ShoppingListCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ShoppingListCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ShoppingListCountOutputType without action
   */
  export type ShoppingListCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingListCountOutputType
     */
    select?: ShoppingListCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShoppingListCountOutputType without action
   */
  export type ShoppingListCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingItemWhereInput
  }


  /**
   * Count Type GrupoFamiliarCountOutputType
   */

  export type GrupoFamiliarCountOutputType = {
    integrantes: number
    perfilesMenores: number
    tomas: number
  }

  export type GrupoFamiliarCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integrantes?: boolean | GrupoFamiliarCountOutputTypeCountIntegrantesArgs
    perfilesMenores?: boolean | GrupoFamiliarCountOutputTypeCountPerfilesMenoresArgs
    tomas?: boolean | GrupoFamiliarCountOutputTypeCountTomasArgs
  }

  // Custom InputTypes
  /**
   * GrupoFamiliarCountOutputType without action
   */
  export type GrupoFamiliarCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliarCountOutputType
     */
    select?: GrupoFamiliarCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GrupoFamiliarCountOutputType without action
   */
  export type GrupoFamiliarCountOutputTypeCountIntegrantesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * GrupoFamiliarCountOutputType without action
   */
  export type GrupoFamiliarCountOutputTypeCountPerfilesMenoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerfilMenorWhereInput
  }

  /**
   * GrupoFamiliarCountOutputType without action
   */
  export type GrupoFamiliarCountOutputTypeCountTomasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TomaWhereInput
  }


  /**
   * Count Type PerfilMenorCountOutputType
   */

  export type PerfilMenorCountOutputType = {
    tomas: number
  }

  export type PerfilMenorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tomas?: boolean | PerfilMenorCountOutputTypeCountTomasArgs
  }

  // Custom InputTypes
  /**
   * PerfilMenorCountOutputType without action
   */
  export type PerfilMenorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenorCountOutputType
     */
    select?: PerfilMenorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PerfilMenorCountOutputType without action
   */
  export type PerfilMenorCountOutputTypeCountTomasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TomaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    dni: string | null
    fechaNacimiento: Date | null
    foto: string | null
    password: string | null
    rol: $Enums.UserRole | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    dni: string | null
    fechaNacimiento: Date | null
    foto: string | null
    password: string | null
    rol: $Enums.UserRole | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    dni: number
    fechaNacimiento: number
    foto: number
    password: number
    rol: number
    grupoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    dni?: true
    fechaNacimiento?: true
    foto?: true
    password?: true
    rol?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    dni?: true
    fechaNacimiento?: true
    foto?: true
    password?: true
    rol?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    dni?: true
    fechaNacimiento?: true
    foto?: true
    password?: true
    rol?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    dni: string
    fechaNacimiento: Date
    foto: string | null
    password: string
    rol: $Enums.UserRole
    grupoId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    dni?: boolean
    fechaNacimiento?: boolean
    foto?: boolean
    password?: boolean
    rol?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | User$grupoArgs<ExtArgs>
    medications?: boolean | User$medicationsArgs<ExtArgs>
    notificationSettings?: boolean | User$notificationSettingsArgs<ExtArgs>
    treatments?: boolean | User$treatmentsArgs<ExtArgs>
    notificationPreferences?: boolean | User$notificationPreferencesArgs<ExtArgs>
    pushSubscriptions?: boolean | User$pushSubscriptionsArgs<ExtArgs>
    shoppingLists?: boolean | User$shoppingListsArgs<ExtArgs>
    tomasRegistradas?: boolean | User$tomasRegistradasArgs<ExtArgs>
    tomasConsumidas?: boolean | User$tomasConsumidasArgs<ExtArgs>
    grupoCreado?: boolean | User$grupoCreadoArgs<ExtArgs>
    historial?: boolean | User$historialArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    dni?: boolean
    fechaNacimiento?: boolean
    foto?: boolean
    password?: boolean
    rol?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | User$grupoArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    dni?: boolean
    fechaNacimiento?: boolean
    foto?: boolean
    password?: boolean
    rol?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | User$grupoArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    dni?: boolean
    fechaNacimiento?: boolean
    foto?: boolean
    password?: boolean
    rol?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "dni" | "fechaNacimiento" | "foto" | "password" | "rol" | "grupoId" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | User$grupoArgs<ExtArgs>
    medications?: boolean | User$medicationsArgs<ExtArgs>
    notificationSettings?: boolean | User$notificationSettingsArgs<ExtArgs>
    treatments?: boolean | User$treatmentsArgs<ExtArgs>
    notificationPreferences?: boolean | User$notificationPreferencesArgs<ExtArgs>
    pushSubscriptions?: boolean | User$pushSubscriptionsArgs<ExtArgs>
    shoppingLists?: boolean | User$shoppingListsArgs<ExtArgs>
    tomasRegistradas?: boolean | User$tomasRegistradasArgs<ExtArgs>
    tomasConsumidas?: boolean | User$tomasConsumidasArgs<ExtArgs>
    grupoCreado?: boolean | User$grupoCreadoArgs<ExtArgs>
    historial?: boolean | User$historialArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | User$grupoArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | User$grupoArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      grupo: Prisma.$GrupoFamiliarPayload<ExtArgs> | null
      medications: Prisma.$MedicationPayload<ExtArgs>[]
      notificationSettings: Prisma.$NotificationSettingsPayload<ExtArgs> | null
      treatments: Prisma.$TreatmentPayload<ExtArgs>[]
      notificationPreferences: Prisma.$NotificationPreferencesPayload<ExtArgs> | null
      pushSubscriptions: Prisma.$PushSubscriptionPayload<ExtArgs>[]
      shoppingLists: Prisma.$ShoppingListPayload<ExtArgs>[]
      tomasRegistradas: Prisma.$TomaPayload<ExtArgs>[]
      tomasConsumidas: Prisma.$TomaPayload<ExtArgs>[]
      grupoCreado: Prisma.$GrupoFamiliarPayload<ExtArgs>[]
      historial: Prisma.$HistorialPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      dni: string
      fechaNacimiento: Date
      foto: string | null
      password: string
      rol: $Enums.UserRole
      grupoId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupo<T extends User$grupoArgs<ExtArgs> = {}>(args?: Subset<T, User$grupoArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    medications<T extends User$medicationsArgs<ExtArgs> = {}>(args?: Subset<T, User$medicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationSettings<T extends User$notificationSettingsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationSettingsArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    treatments<T extends User$treatmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$treatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationPreferences<T extends User$notificationPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationPreferencesArgs<ExtArgs>>): Prisma__NotificationPreferencesClient<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    pushSubscriptions<T extends User$pushSubscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$pushSubscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shoppingLists<T extends User$shoppingListsArgs<ExtArgs> = {}>(args?: Subset<T, User$shoppingListsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tomasRegistradas<T extends User$tomasRegistradasArgs<ExtArgs> = {}>(args?: Subset<T, User$tomasRegistradasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tomasConsumidas<T extends User$tomasConsumidasArgs<ExtArgs> = {}>(args?: Subset<T, User$tomasConsumidasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    grupoCreado<T extends User$grupoCreadoArgs<ExtArgs> = {}>(args?: Subset<T, User$grupoCreadoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    historial<T extends User$historialArgs<ExtArgs> = {}>(args?: Subset<T, User$historialArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly dni: FieldRef<"User", 'String'>
    readonly fechaNacimiento: FieldRef<"User", 'DateTime'>
    readonly foto: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly rol: FieldRef<"User", 'UserRole'>
    readonly grupoId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.grupo
   */
  export type User$grupoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    where?: GrupoFamiliarWhereInput
  }

  /**
   * User.medications
   */
  export type User$medicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    where?: MedicationWhereInput
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    cursor?: MedicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * User.notificationSettings
   */
  export type User$notificationSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    where?: NotificationSettingsWhereInput
  }

  /**
   * User.treatments
   */
  export type User$treatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    cursor?: TreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * User.notificationPreferences
   */
  export type User$notificationPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
    where?: NotificationPreferencesWhereInput
  }

  /**
   * User.pushSubscriptions
   */
  export type User$pushSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
    where?: PushSubscriptionWhereInput
    orderBy?: PushSubscriptionOrderByWithRelationInput | PushSubscriptionOrderByWithRelationInput[]
    cursor?: PushSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PushSubscriptionScalarFieldEnum | PushSubscriptionScalarFieldEnum[]
  }

  /**
   * User.shoppingLists
   */
  export type User$shoppingListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    where?: ShoppingListWhereInput
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    cursor?: ShoppingListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * User.tomasRegistradas
   */
  export type User$tomasRegistradasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    where?: TomaWhereInput
    orderBy?: TomaOrderByWithRelationInput | TomaOrderByWithRelationInput[]
    cursor?: TomaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TomaScalarFieldEnum | TomaScalarFieldEnum[]
  }

  /**
   * User.tomasConsumidas
   */
  export type User$tomasConsumidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    where?: TomaWhereInput
    orderBy?: TomaOrderByWithRelationInput | TomaOrderByWithRelationInput[]
    cursor?: TomaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TomaScalarFieldEnum | TomaScalarFieldEnum[]
  }

  /**
   * User.grupoCreado
   */
  export type User$grupoCreadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    where?: GrupoFamiliarWhereInput
    orderBy?: GrupoFamiliarOrderByWithRelationInput | GrupoFamiliarOrderByWithRelationInput[]
    cursor?: GrupoFamiliarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrupoFamiliarScalarFieldEnum | GrupoFamiliarScalarFieldEnum[]
  }

  /**
   * User.historial
   */
  export type User$historialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
    where?: HistorialWhereInput
    orderBy?: HistorialOrderByWithRelationInput | HistorialOrderByWithRelationInput[]
    cursor?: HistorialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistorialScalarFieldEnum | HistorialScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Medication
   */

  export type AggregateMedication = {
    _count: MedicationCountAggregateOutputType | null
    _avg: MedicationAvgAggregateOutputType | null
    _sum: MedicationSumAggregateOutputType | null
    _min: MedicationMinAggregateOutputType | null
    _max: MedicationMaxAggregateOutputType | null
  }

  export type MedicationAvgAggregateOutputType = {
    initialQuantity: number | null
    currentQuantity: number | null
  }

  export type MedicationSumAggregateOutputType = {
    initialQuantity: number | null
    currentQuantity: number | null
  }

  export type MedicationMinAggregateOutputType = {
    id: string | null
    commercialName: string | null
    activeIngredient: string | null
    description: string | null
    intakeRecommendations: string | null
    imageUrl: string | null
    initialQuantity: number | null
    currentQuantity: number | null
    unit: string | null
    expirationDate: Date | null
    archived: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type MedicationMaxAggregateOutputType = {
    id: string | null
    commercialName: string | null
    activeIngredient: string | null
    description: string | null
    intakeRecommendations: string | null
    imageUrl: string | null
    initialQuantity: number | null
    currentQuantity: number | null
    unit: string | null
    expirationDate: Date | null
    archived: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type MedicationCountAggregateOutputType = {
    id: number
    commercialName: number
    activeIngredient: number
    description: number
    intakeRecommendations: number
    imageUrl: number
    initialQuantity: number
    currentQuantity: number
    unit: number
    expirationDate: number
    archived: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type MedicationAvgAggregateInputType = {
    initialQuantity?: true
    currentQuantity?: true
  }

  export type MedicationSumAggregateInputType = {
    initialQuantity?: true
    currentQuantity?: true
  }

  export type MedicationMinAggregateInputType = {
    id?: true
    commercialName?: true
    activeIngredient?: true
    description?: true
    intakeRecommendations?: true
    imageUrl?: true
    initialQuantity?: true
    currentQuantity?: true
    unit?: true
    expirationDate?: true
    archived?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type MedicationMaxAggregateInputType = {
    id?: true
    commercialName?: true
    activeIngredient?: true
    description?: true
    intakeRecommendations?: true
    imageUrl?: true
    initialQuantity?: true
    currentQuantity?: true
    unit?: true
    expirationDate?: true
    archived?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type MedicationCountAggregateInputType = {
    id?: true
    commercialName?: true
    activeIngredient?: true
    description?: true
    intakeRecommendations?: true
    imageUrl?: true
    initialQuantity?: true
    currentQuantity?: true
    unit?: true
    expirationDate?: true
    archived?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type MedicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medication to aggregate.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Medications
    **/
    _count?: true | MedicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicationMaxAggregateInputType
  }

  export type GetMedicationAggregateType<T extends MedicationAggregateArgs> = {
        [P in keyof T & keyof AggregateMedication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedication[P]>
      : GetScalarType<T[P], AggregateMedication[P]>
  }




  export type MedicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicationWhereInput
    orderBy?: MedicationOrderByWithAggregationInput | MedicationOrderByWithAggregationInput[]
    by: MedicationScalarFieldEnum[] | MedicationScalarFieldEnum
    having?: MedicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicationCountAggregateInputType | true
    _avg?: MedicationAvgAggregateInputType
    _sum?: MedicationSumAggregateInputType
    _min?: MedicationMinAggregateInputType
    _max?: MedicationMaxAggregateInputType
  }

  export type MedicationGroupByOutputType = {
    id: string
    commercialName: string
    activeIngredient: string | null
    description: string | null
    intakeRecommendations: string | null
    imageUrl: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date
    archived: boolean
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: MedicationCountAggregateOutputType | null
    _avg: MedicationAvgAggregateOutputType | null
    _sum: MedicationSumAggregateOutputType | null
    _min: MedicationMinAggregateOutputType | null
    _max: MedicationMaxAggregateOutputType | null
  }

  type GetMedicationGroupByPayload<T extends MedicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicationGroupByOutputType[P]>
            : GetScalarType<T[P], MedicationGroupByOutputType[P]>
        }
      >
    >


  export type MedicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    commercialName?: boolean
    activeIngredient?: boolean
    description?: boolean
    intakeRecommendations?: boolean
    imageUrl?: boolean
    initialQuantity?: boolean
    currentQuantity?: boolean
    unit?: boolean
    expirationDate?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    treatmentMedications?: boolean | Medication$treatmentMedicationsArgs<ExtArgs>
    tomas?: boolean | Medication$tomasArgs<ExtArgs>
    _count?: boolean | MedicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medication"]>

  export type MedicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    commercialName?: boolean
    activeIngredient?: boolean
    description?: boolean
    intakeRecommendations?: boolean
    imageUrl?: boolean
    initialQuantity?: boolean
    currentQuantity?: boolean
    unit?: boolean
    expirationDate?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medication"]>

  export type MedicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    commercialName?: boolean
    activeIngredient?: boolean
    description?: boolean
    intakeRecommendations?: boolean
    imageUrl?: boolean
    initialQuantity?: boolean
    currentQuantity?: boolean
    unit?: boolean
    expirationDate?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medication"]>

  export type MedicationSelectScalar = {
    id?: boolean
    commercialName?: boolean
    activeIngredient?: boolean
    description?: boolean
    intakeRecommendations?: boolean
    imageUrl?: boolean
    initialQuantity?: boolean
    currentQuantity?: boolean
    unit?: boolean
    expirationDate?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type MedicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "commercialName" | "activeIngredient" | "description" | "intakeRecommendations" | "imageUrl" | "initialQuantity" | "currentQuantity" | "unit" | "expirationDate" | "archived" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["medication"]>
  export type MedicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    treatmentMedications?: boolean | Medication$treatmentMedicationsArgs<ExtArgs>
    tomas?: boolean | Medication$tomasArgs<ExtArgs>
    _count?: boolean | MedicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MedicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MedicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Medication"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      treatmentMedications: Prisma.$TreatmentMedicationPayload<ExtArgs>[]
      tomas: Prisma.$TomaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      commercialName: string
      activeIngredient: string | null
      description: string | null
      intakeRecommendations: string | null
      imageUrl: string | null
      initialQuantity: number
      currentQuantity: number
      unit: string
      expirationDate: Date
      archived: boolean
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["medication"]>
    composites: {}
  }

  type MedicationGetPayload<S extends boolean | null | undefined | MedicationDefaultArgs> = $Result.GetResult<Prisma.$MedicationPayload, S>

  type MedicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicationCountAggregateInputType | true
    }

  export interface MedicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Medication'], meta: { name: 'Medication' } }
    /**
     * Find zero or one Medication that matches the filter.
     * @param {MedicationFindUniqueArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicationFindUniqueArgs>(args: SelectSubset<T, MedicationFindUniqueArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Medication that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicationFindUniqueOrThrowArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicationFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Medication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationFindFirstArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicationFindFirstArgs>(args?: SelectSubset<T, MedicationFindFirstArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Medication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationFindFirstOrThrowArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicationFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Medications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medications
     * const medications = await prisma.medication.findMany()
     * 
     * // Get first 10 Medications
     * const medications = await prisma.medication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicationWithIdOnly = await prisma.medication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicationFindManyArgs>(args?: SelectSubset<T, MedicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Medication.
     * @param {MedicationCreateArgs} args - Arguments to create a Medication.
     * @example
     * // Create one Medication
     * const Medication = await prisma.medication.create({
     *   data: {
     *     // ... data to create a Medication
     *   }
     * })
     * 
     */
    create<T extends MedicationCreateArgs>(args: SelectSubset<T, MedicationCreateArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Medications.
     * @param {MedicationCreateManyArgs} args - Arguments to create many Medications.
     * @example
     * // Create many Medications
     * const medication = await prisma.medication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicationCreateManyArgs>(args?: SelectSubset<T, MedicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Medications and returns the data saved in the database.
     * @param {MedicationCreateManyAndReturnArgs} args - Arguments to create many Medications.
     * @example
     * // Create many Medications
     * const medication = await prisma.medication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Medications and only return the `id`
     * const medicationWithIdOnly = await prisma.medication.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicationCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Medication.
     * @param {MedicationDeleteArgs} args - Arguments to delete one Medication.
     * @example
     * // Delete one Medication
     * const Medication = await prisma.medication.delete({
     *   where: {
     *     // ... filter to delete one Medication
     *   }
     * })
     * 
     */
    delete<T extends MedicationDeleteArgs>(args: SelectSubset<T, MedicationDeleteArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Medication.
     * @param {MedicationUpdateArgs} args - Arguments to update one Medication.
     * @example
     * // Update one Medication
     * const medication = await prisma.medication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicationUpdateArgs>(args: SelectSubset<T, MedicationUpdateArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Medications.
     * @param {MedicationDeleteManyArgs} args - Arguments to filter Medications to delete.
     * @example
     * // Delete a few Medications
     * const { count } = await prisma.medication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicationDeleteManyArgs>(args?: SelectSubset<T, MedicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medications
     * const medication = await prisma.medication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicationUpdateManyArgs>(args: SelectSubset<T, MedicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medications and returns the data updated in the database.
     * @param {MedicationUpdateManyAndReturnArgs} args - Arguments to update many Medications.
     * @example
     * // Update many Medications
     * const medication = await prisma.medication.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Medications and only return the `id`
     * const medicationWithIdOnly = await prisma.medication.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicationUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Medication.
     * @param {MedicationUpsertArgs} args - Arguments to update or create a Medication.
     * @example
     * // Update or create a Medication
     * const medication = await prisma.medication.upsert({
     *   create: {
     *     // ... data to create a Medication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medication we want to update
     *   }
     * })
     */
    upsert<T extends MedicationUpsertArgs>(args: SelectSubset<T, MedicationUpsertArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Medications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationCountArgs} args - Arguments to filter Medications to count.
     * @example
     * // Count the number of Medications
     * const count = await prisma.medication.count({
     *   where: {
     *     // ... the filter for the Medications we want to count
     *   }
     * })
    **/
    count<T extends MedicationCountArgs>(
      args?: Subset<T, MedicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicationAggregateArgs>(args: Subset<T, MedicationAggregateArgs>): Prisma.PrismaPromise<GetMedicationAggregateType<T>>

    /**
     * Group by Medication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicationGroupByArgs['orderBy'] }
        : { orderBy?: MedicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Medication model
   */
  readonly fields: MedicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Medication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    treatmentMedications<T extends Medication$treatmentMedicationsArgs<ExtArgs> = {}>(args?: Subset<T, Medication$treatmentMedicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tomas<T extends Medication$tomasArgs<ExtArgs> = {}>(args?: Subset<T, Medication$tomasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Medication model
   */
  interface MedicationFieldRefs {
    readonly id: FieldRef<"Medication", 'String'>
    readonly commercialName: FieldRef<"Medication", 'String'>
    readonly activeIngredient: FieldRef<"Medication", 'String'>
    readonly description: FieldRef<"Medication", 'String'>
    readonly intakeRecommendations: FieldRef<"Medication", 'String'>
    readonly imageUrl: FieldRef<"Medication", 'String'>
    readonly initialQuantity: FieldRef<"Medication", 'Float'>
    readonly currentQuantity: FieldRef<"Medication", 'Float'>
    readonly unit: FieldRef<"Medication", 'String'>
    readonly expirationDate: FieldRef<"Medication", 'DateTime'>
    readonly archived: FieldRef<"Medication", 'Boolean'>
    readonly createdAt: FieldRef<"Medication", 'DateTime'>
    readonly updatedAt: FieldRef<"Medication", 'DateTime'>
    readonly userId: FieldRef<"Medication", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Medication findUnique
   */
  export type MedicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication findUniqueOrThrow
   */
  export type MedicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication findFirst
   */
  export type MedicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medications.
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medications.
     */
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * Medication findFirstOrThrow
   */
  export type MedicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medications.
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medications.
     */
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * Medication findMany
   */
  export type MedicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medications to fetch.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Medications.
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * Medication create
   */
  export type MedicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Medication.
     */
    data: XOR<MedicationCreateInput, MedicationUncheckedCreateInput>
  }

  /**
   * Medication createMany
   */
  export type MedicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Medications.
     */
    data: MedicationCreateManyInput | MedicationCreateManyInput[]
  }

  /**
   * Medication createManyAndReturn
   */
  export type MedicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * The data used to create many Medications.
     */
    data: MedicationCreateManyInput | MedicationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medication update
   */
  export type MedicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Medication.
     */
    data: XOR<MedicationUpdateInput, MedicationUncheckedUpdateInput>
    /**
     * Choose, which Medication to update.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication updateMany
   */
  export type MedicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Medications.
     */
    data: XOR<MedicationUpdateManyMutationInput, MedicationUncheckedUpdateManyInput>
    /**
     * Filter which Medications to update
     */
    where?: MedicationWhereInput
    /**
     * Limit how many Medications to update.
     */
    limit?: number
  }

  /**
   * Medication updateManyAndReturn
   */
  export type MedicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * The data used to update Medications.
     */
    data: XOR<MedicationUpdateManyMutationInput, MedicationUncheckedUpdateManyInput>
    /**
     * Filter which Medications to update
     */
    where?: MedicationWhereInput
    /**
     * Limit how many Medications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medication upsert
   */
  export type MedicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Medication to update in case it exists.
     */
    where: MedicationWhereUniqueInput
    /**
     * In case the Medication found by the `where` argument doesn't exist, create a new Medication with this data.
     */
    create: XOR<MedicationCreateInput, MedicationUncheckedCreateInput>
    /**
     * In case the Medication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicationUpdateInput, MedicationUncheckedUpdateInput>
  }

  /**
   * Medication delete
   */
  export type MedicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter which Medication to delete.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication deleteMany
   */
  export type MedicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medications to delete
     */
    where?: MedicationWhereInput
    /**
     * Limit how many Medications to delete.
     */
    limit?: number
  }

  /**
   * Medication.treatmentMedications
   */
  export type Medication$treatmentMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    where?: TreatmentMedicationWhereInput
    orderBy?: TreatmentMedicationOrderByWithRelationInput | TreatmentMedicationOrderByWithRelationInput[]
    cursor?: TreatmentMedicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentMedicationScalarFieldEnum | TreatmentMedicationScalarFieldEnum[]
  }

  /**
   * Medication.tomas
   */
  export type Medication$tomasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    where?: TomaWhereInput
    orderBy?: TomaOrderByWithRelationInput | TomaOrderByWithRelationInput[]
    cursor?: TomaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TomaScalarFieldEnum | TomaScalarFieldEnum[]
  }

  /**
   * Medication without action
   */
  export type MedicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
  }


  /**
   * Model NotificationSettings
   */

  export type AggregateNotificationSettings = {
    _count: NotificationSettingsCountAggregateOutputType | null
    _avg: NotificationSettingsAvgAggregateOutputType | null
    _sum: NotificationSettingsSumAggregateOutputType | null
    _min: NotificationSettingsMinAggregateOutputType | null
    _max: NotificationSettingsMaxAggregateOutputType | null
  }

  export type NotificationSettingsAvgAggregateOutputType = {
    daysBeforeExpiration: number | null
    lowStockThreshold: number | null
  }

  export type NotificationSettingsSumAggregateOutputType = {
    daysBeforeExpiration: number | null
    lowStockThreshold: number | null
  }

  export type NotificationSettingsMinAggregateOutputType = {
    id: string | null
    daysBeforeExpiration: number | null
    lowStockThreshold: number | null
    userId: string | null
  }

  export type NotificationSettingsMaxAggregateOutputType = {
    id: string | null
    daysBeforeExpiration: number | null
    lowStockThreshold: number | null
    userId: string | null
  }

  export type NotificationSettingsCountAggregateOutputType = {
    id: number
    daysBeforeExpiration: number
    lowStockThreshold: number
    userId: number
    _all: number
  }


  export type NotificationSettingsAvgAggregateInputType = {
    daysBeforeExpiration?: true
    lowStockThreshold?: true
  }

  export type NotificationSettingsSumAggregateInputType = {
    daysBeforeExpiration?: true
    lowStockThreshold?: true
  }

  export type NotificationSettingsMinAggregateInputType = {
    id?: true
    daysBeforeExpiration?: true
    lowStockThreshold?: true
    userId?: true
  }

  export type NotificationSettingsMaxAggregateInputType = {
    id?: true
    daysBeforeExpiration?: true
    lowStockThreshold?: true
    userId?: true
  }

  export type NotificationSettingsCountAggregateInputType = {
    id?: true
    daysBeforeExpiration?: true
    lowStockThreshold?: true
    userId?: true
    _all?: true
  }

  export type NotificationSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSettings to aggregate.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationSettings
    **/
    _count?: true | NotificationSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationSettingsMaxAggregateInputType
  }

  export type GetNotificationSettingsAggregateType<T extends NotificationSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationSettings[P]>
      : GetScalarType<T[P], AggregateNotificationSettings[P]>
  }




  export type NotificationSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationSettingsWhereInput
    orderBy?: NotificationSettingsOrderByWithAggregationInput | NotificationSettingsOrderByWithAggregationInput[]
    by: NotificationSettingsScalarFieldEnum[] | NotificationSettingsScalarFieldEnum
    having?: NotificationSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationSettingsCountAggregateInputType | true
    _avg?: NotificationSettingsAvgAggregateInputType
    _sum?: NotificationSettingsSumAggregateInputType
    _min?: NotificationSettingsMinAggregateInputType
    _max?: NotificationSettingsMaxAggregateInputType
  }

  export type NotificationSettingsGroupByOutputType = {
    id: string
    daysBeforeExpiration: number
    lowStockThreshold: number
    userId: string
    _count: NotificationSettingsCountAggregateOutputType | null
    _avg: NotificationSettingsAvgAggregateOutputType | null
    _sum: NotificationSettingsSumAggregateOutputType | null
    _min: NotificationSettingsMinAggregateOutputType | null
    _max: NotificationSettingsMaxAggregateOutputType | null
  }

  type GetNotificationSettingsGroupByPayload<T extends NotificationSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationSettingsGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    daysBeforeExpiration?: boolean
    lowStockThreshold?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSettings"]>

  export type NotificationSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    daysBeforeExpiration?: boolean
    lowStockThreshold?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSettings"]>

  export type NotificationSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    daysBeforeExpiration?: boolean
    lowStockThreshold?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSettings"]>

  export type NotificationSettingsSelectScalar = {
    id?: boolean
    daysBeforeExpiration?: boolean
    lowStockThreshold?: boolean
    userId?: boolean
  }

  export type NotificationSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "daysBeforeExpiration" | "lowStockThreshold" | "userId", ExtArgs["result"]["notificationSettings"]>
  export type NotificationSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationSettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationSettings"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      daysBeforeExpiration: number
      lowStockThreshold: number
      userId: string
    }, ExtArgs["result"]["notificationSettings"]>
    composites: {}
  }

  type NotificationSettingsGetPayload<S extends boolean | null | undefined | NotificationSettingsDefaultArgs> = $Result.GetResult<Prisma.$NotificationSettingsPayload, S>

  type NotificationSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationSettingsCountAggregateInputType | true
    }

  export interface NotificationSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationSettings'], meta: { name: 'NotificationSettings' } }
    /**
     * Find zero or one NotificationSettings that matches the filter.
     * @param {NotificationSettingsFindUniqueArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationSettingsFindUniqueArgs>(args: SelectSubset<T, NotificationSettingsFindUniqueArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationSettingsFindUniqueOrThrowArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindFirstArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationSettingsFindFirstArgs>(args?: SelectSubset<T, NotificationSettingsFindFirstArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindFirstOrThrowArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findMany()
     * 
     * // Get first 10 NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationSettingsWithIdOnly = await prisma.notificationSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationSettingsFindManyArgs>(args?: SelectSubset<T, NotificationSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationSettings.
     * @param {NotificationSettingsCreateArgs} args - Arguments to create a NotificationSettings.
     * @example
     * // Create one NotificationSettings
     * const NotificationSettings = await prisma.notificationSettings.create({
     *   data: {
     *     // ... data to create a NotificationSettings
     *   }
     * })
     * 
     */
    create<T extends NotificationSettingsCreateArgs>(args: SelectSubset<T, NotificationSettingsCreateArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationSettings.
     * @param {NotificationSettingsCreateManyArgs} args - Arguments to create many NotificationSettings.
     * @example
     * // Create many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationSettingsCreateManyArgs>(args?: SelectSubset<T, NotificationSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationSettings and returns the data saved in the database.
     * @param {NotificationSettingsCreateManyAndReturnArgs} args - Arguments to create many NotificationSettings.
     * @example
     * // Create many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationSettings and only return the `id`
     * const notificationSettingsWithIdOnly = await prisma.notificationSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationSettings.
     * @param {NotificationSettingsDeleteArgs} args - Arguments to delete one NotificationSettings.
     * @example
     * // Delete one NotificationSettings
     * const NotificationSettings = await prisma.notificationSettings.delete({
     *   where: {
     *     // ... filter to delete one NotificationSettings
     *   }
     * })
     * 
     */
    delete<T extends NotificationSettingsDeleteArgs>(args: SelectSubset<T, NotificationSettingsDeleteArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationSettings.
     * @param {NotificationSettingsUpdateArgs} args - Arguments to update one NotificationSettings.
     * @example
     * // Update one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationSettingsUpdateArgs>(args: SelectSubset<T, NotificationSettingsUpdateArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationSettings.
     * @param {NotificationSettingsDeleteManyArgs} args - Arguments to filter NotificationSettings to delete.
     * @example
     * // Delete a few NotificationSettings
     * const { count } = await prisma.notificationSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationSettingsDeleteManyArgs>(args?: SelectSubset<T, NotificationSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationSettingsUpdateManyArgs>(args: SelectSubset<T, NotificationSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationSettings and returns the data updated in the database.
     * @param {NotificationSettingsUpdateManyAndReturnArgs} args - Arguments to update many NotificationSettings.
     * @example
     * // Update many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationSettings and only return the `id`
     * const notificationSettingsWithIdOnly = await prisma.notificationSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationSettings.
     * @param {NotificationSettingsUpsertArgs} args - Arguments to update or create a NotificationSettings.
     * @example
     * // Update or create a NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.upsert({
     *   create: {
     *     // ... data to create a NotificationSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationSettings we want to update
     *   }
     * })
     */
    upsert<T extends NotificationSettingsUpsertArgs>(args: SelectSubset<T, NotificationSettingsUpsertArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsCountArgs} args - Arguments to filter NotificationSettings to count.
     * @example
     * // Count the number of NotificationSettings
     * const count = await prisma.notificationSettings.count({
     *   where: {
     *     // ... the filter for the NotificationSettings we want to count
     *   }
     * })
    **/
    count<T extends NotificationSettingsCountArgs>(
      args?: Subset<T, NotificationSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationSettingsAggregateArgs>(args: Subset<T, NotificationSettingsAggregateArgs>): Prisma.PrismaPromise<GetNotificationSettingsAggregateType<T>>

    /**
     * Group by NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationSettingsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationSettings model
   */
  readonly fields: NotificationSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationSettings model
   */
  interface NotificationSettingsFieldRefs {
    readonly id: FieldRef<"NotificationSettings", 'String'>
    readonly daysBeforeExpiration: FieldRef<"NotificationSettings", 'Int'>
    readonly lowStockThreshold: FieldRef<"NotificationSettings", 'Float'>
    readonly userId: FieldRef<"NotificationSettings", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NotificationSettings findUnique
   */
  export type NotificationSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings findUniqueOrThrow
   */
  export type NotificationSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings findFirst
   */
  export type NotificationSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSettings.
     */
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings findFirstOrThrow
   */
  export type NotificationSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSettings.
     */
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings findMany
   */
  export type NotificationSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings create
   */
  export type NotificationSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationSettings.
     */
    data: XOR<NotificationSettingsCreateInput, NotificationSettingsUncheckedCreateInput>
  }

  /**
   * NotificationSettings createMany
   */
  export type NotificationSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationSettings.
     */
    data: NotificationSettingsCreateManyInput | NotificationSettingsCreateManyInput[]
  }

  /**
   * NotificationSettings createManyAndReturn
   */
  export type NotificationSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationSettings.
     */
    data: NotificationSettingsCreateManyInput | NotificationSettingsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationSettings update
   */
  export type NotificationSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationSettings.
     */
    data: XOR<NotificationSettingsUpdateInput, NotificationSettingsUncheckedUpdateInput>
    /**
     * Choose, which NotificationSettings to update.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings updateMany
   */
  export type NotificationSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationSettings.
     */
    data: XOR<NotificationSettingsUpdateManyMutationInput, NotificationSettingsUncheckedUpdateManyInput>
    /**
     * Filter which NotificationSettings to update
     */
    where?: NotificationSettingsWhereInput
    /**
     * Limit how many NotificationSettings to update.
     */
    limit?: number
  }

  /**
   * NotificationSettings updateManyAndReturn
   */
  export type NotificationSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * The data used to update NotificationSettings.
     */
    data: XOR<NotificationSettingsUpdateManyMutationInput, NotificationSettingsUncheckedUpdateManyInput>
    /**
     * Filter which NotificationSettings to update
     */
    where?: NotificationSettingsWhereInput
    /**
     * Limit how many NotificationSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationSettings upsert
   */
  export type NotificationSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationSettings to update in case it exists.
     */
    where: NotificationSettingsWhereUniqueInput
    /**
     * In case the NotificationSettings found by the `where` argument doesn't exist, create a new NotificationSettings with this data.
     */
    create: XOR<NotificationSettingsCreateInput, NotificationSettingsUncheckedCreateInput>
    /**
     * In case the NotificationSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationSettingsUpdateInput, NotificationSettingsUncheckedUpdateInput>
  }

  /**
   * NotificationSettings delete
   */
  export type NotificationSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter which NotificationSettings to delete.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings deleteMany
   */
  export type NotificationSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSettings to delete
     */
    where?: NotificationSettingsWhereInput
    /**
     * Limit how many NotificationSettings to delete.
     */
    limit?: number
  }

  /**
   * NotificationSettings without action
   */
  export type NotificationSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
  }


  /**
   * Model Treatment
   */

  export type AggregateTreatment = {
    _count: TreatmentCountAggregateOutputType | null
    _min: TreatmentMinAggregateOutputType | null
    _max: TreatmentMaxAggregateOutputType | null
  }

  export type TreatmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    patient: string | null
    patientId: string | null
    patientType: string | null
    symptoms: string | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    patient: string | null
    patientId: string | null
    patientType: string | null
    symptoms: string | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentCountAggregateOutputType = {
    id: number
    name: number
    patient: number
    patientId: number
    patientType: number
    symptoms: number
    startDate: number
    endDate: number
    isActive: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TreatmentMinAggregateInputType = {
    id?: true
    name?: true
    patient?: true
    patientId?: true
    patientType?: true
    symptoms?: true
    startDate?: true
    endDate?: true
    isActive?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentMaxAggregateInputType = {
    id?: true
    name?: true
    patient?: true
    patientId?: true
    patientType?: true
    symptoms?: true
    startDate?: true
    endDate?: true
    isActive?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentCountAggregateInputType = {
    id?: true
    name?: true
    patient?: true
    patientId?: true
    patientType?: true
    symptoms?: true
    startDate?: true
    endDate?: true
    isActive?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TreatmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Treatment to aggregate.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Treatments
    **/
    _count?: true | TreatmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreatmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreatmentMaxAggregateInputType
  }

  export type GetTreatmentAggregateType<T extends TreatmentAggregateArgs> = {
        [P in keyof T & keyof AggregateTreatment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreatment[P]>
      : GetScalarType<T[P], AggregateTreatment[P]>
  }




  export type TreatmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithAggregationInput | TreatmentOrderByWithAggregationInput[]
    by: TreatmentScalarFieldEnum[] | TreatmentScalarFieldEnum
    having?: TreatmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreatmentCountAggregateInputType | true
    _min?: TreatmentMinAggregateInputType
    _max?: TreatmentMaxAggregateInputType
  }

  export type TreatmentGroupByOutputType = {
    id: string
    name: string
    patient: string
    patientId: string | null
    patientType: string | null
    symptoms: string | null
    startDate: Date
    endDate: Date
    isActive: boolean
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: TreatmentCountAggregateOutputType | null
    _min: TreatmentMinAggregateOutputType | null
    _max: TreatmentMaxAggregateOutputType | null
  }

  type GetTreatmentGroupByPayload<T extends TreatmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreatmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreatmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreatmentGroupByOutputType[P]>
            : GetScalarType<T[P], TreatmentGroupByOutputType[P]>
        }
      >
    >


  export type TreatmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    patient?: boolean
    patientId?: boolean
    patientType?: boolean
    symptoms?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notifications?: boolean | Treatment$notificationsArgs<ExtArgs>
    medications?: boolean | Treatment$medicationsArgs<ExtArgs>
    images?: boolean | Treatment$imagesArgs<ExtArgs>
    _count?: boolean | TreatmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatment"]>

  export type TreatmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    patient?: boolean
    patientId?: boolean
    patientType?: boolean
    symptoms?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatment"]>

  export type TreatmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    patient?: boolean
    patientId?: boolean
    patientType?: boolean
    symptoms?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatment"]>

  export type TreatmentSelectScalar = {
    id?: boolean
    name?: boolean
    patient?: boolean
    patientId?: boolean
    patientType?: boolean
    symptoms?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TreatmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "patient" | "patientId" | "patientType" | "symptoms" | "startDate" | "endDate" | "isActive" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["treatment"]>
  export type TreatmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notifications?: boolean | Treatment$notificationsArgs<ExtArgs>
    medications?: boolean | Treatment$medicationsArgs<ExtArgs>
    images?: boolean | Treatment$imagesArgs<ExtArgs>
    _count?: boolean | TreatmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TreatmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TreatmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TreatmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Treatment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      medications: Prisma.$TreatmentMedicationPayload<ExtArgs>[]
      images: Prisma.$TreatmentImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      patient: string
      patientId: string | null
      patientType: string | null
      symptoms: string | null
      startDate: Date
      endDate: Date
      isActive: boolean
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["treatment"]>
    composites: {}
  }

  type TreatmentGetPayload<S extends boolean | null | undefined | TreatmentDefaultArgs> = $Result.GetResult<Prisma.$TreatmentPayload, S>

  type TreatmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TreatmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TreatmentCountAggregateInputType | true
    }

  export interface TreatmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Treatment'], meta: { name: 'Treatment' } }
    /**
     * Find zero or one Treatment that matches the filter.
     * @param {TreatmentFindUniqueArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TreatmentFindUniqueArgs>(args: SelectSubset<T, TreatmentFindUniqueArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Treatment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TreatmentFindUniqueOrThrowArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TreatmentFindUniqueOrThrowArgs>(args: SelectSubset<T, TreatmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Treatment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindFirstArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TreatmentFindFirstArgs>(args?: SelectSubset<T, TreatmentFindFirstArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Treatment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindFirstOrThrowArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TreatmentFindFirstOrThrowArgs>(args?: SelectSubset<T, TreatmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Treatments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Treatments
     * const treatments = await prisma.treatment.findMany()
     * 
     * // Get first 10 Treatments
     * const treatments = await prisma.treatment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treatmentWithIdOnly = await prisma.treatment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TreatmentFindManyArgs>(args?: SelectSubset<T, TreatmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Treatment.
     * @param {TreatmentCreateArgs} args - Arguments to create a Treatment.
     * @example
     * // Create one Treatment
     * const Treatment = await prisma.treatment.create({
     *   data: {
     *     // ... data to create a Treatment
     *   }
     * })
     * 
     */
    create<T extends TreatmentCreateArgs>(args: SelectSubset<T, TreatmentCreateArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Treatments.
     * @param {TreatmentCreateManyArgs} args - Arguments to create many Treatments.
     * @example
     * // Create many Treatments
     * const treatment = await prisma.treatment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TreatmentCreateManyArgs>(args?: SelectSubset<T, TreatmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Treatments and returns the data saved in the database.
     * @param {TreatmentCreateManyAndReturnArgs} args - Arguments to create many Treatments.
     * @example
     * // Create many Treatments
     * const treatment = await prisma.treatment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Treatments and only return the `id`
     * const treatmentWithIdOnly = await prisma.treatment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TreatmentCreateManyAndReturnArgs>(args?: SelectSubset<T, TreatmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Treatment.
     * @param {TreatmentDeleteArgs} args - Arguments to delete one Treatment.
     * @example
     * // Delete one Treatment
     * const Treatment = await prisma.treatment.delete({
     *   where: {
     *     // ... filter to delete one Treatment
     *   }
     * })
     * 
     */
    delete<T extends TreatmentDeleteArgs>(args: SelectSubset<T, TreatmentDeleteArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Treatment.
     * @param {TreatmentUpdateArgs} args - Arguments to update one Treatment.
     * @example
     * // Update one Treatment
     * const treatment = await prisma.treatment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TreatmentUpdateArgs>(args: SelectSubset<T, TreatmentUpdateArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Treatments.
     * @param {TreatmentDeleteManyArgs} args - Arguments to filter Treatments to delete.
     * @example
     * // Delete a few Treatments
     * const { count } = await prisma.treatment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TreatmentDeleteManyArgs>(args?: SelectSubset<T, TreatmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Treatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Treatments
     * const treatment = await prisma.treatment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TreatmentUpdateManyArgs>(args: SelectSubset<T, TreatmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Treatments and returns the data updated in the database.
     * @param {TreatmentUpdateManyAndReturnArgs} args - Arguments to update many Treatments.
     * @example
     * // Update many Treatments
     * const treatment = await prisma.treatment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Treatments and only return the `id`
     * const treatmentWithIdOnly = await prisma.treatment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TreatmentUpdateManyAndReturnArgs>(args: SelectSubset<T, TreatmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Treatment.
     * @param {TreatmentUpsertArgs} args - Arguments to update or create a Treatment.
     * @example
     * // Update or create a Treatment
     * const treatment = await prisma.treatment.upsert({
     *   create: {
     *     // ... data to create a Treatment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Treatment we want to update
     *   }
     * })
     */
    upsert<T extends TreatmentUpsertArgs>(args: SelectSubset<T, TreatmentUpsertArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Treatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentCountArgs} args - Arguments to filter Treatments to count.
     * @example
     * // Count the number of Treatments
     * const count = await prisma.treatment.count({
     *   where: {
     *     // ... the filter for the Treatments we want to count
     *   }
     * })
    **/
    count<T extends TreatmentCountArgs>(
      args?: Subset<T, TreatmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreatmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Treatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreatmentAggregateArgs>(args: Subset<T, TreatmentAggregateArgs>): Prisma.PrismaPromise<GetTreatmentAggregateType<T>>

    /**
     * Group by Treatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreatmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreatmentGroupByArgs['orderBy'] }
        : { orderBy?: TreatmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreatmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreatmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Treatment model
   */
  readonly fields: TreatmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Treatment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreatmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notifications<T extends Treatment$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Treatment$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    medications<T extends Treatment$medicationsArgs<ExtArgs> = {}>(args?: Subset<T, Treatment$medicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends Treatment$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Treatment$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Treatment model
   */
  interface TreatmentFieldRefs {
    readonly id: FieldRef<"Treatment", 'String'>
    readonly name: FieldRef<"Treatment", 'String'>
    readonly patient: FieldRef<"Treatment", 'String'>
    readonly patientId: FieldRef<"Treatment", 'String'>
    readonly patientType: FieldRef<"Treatment", 'String'>
    readonly symptoms: FieldRef<"Treatment", 'String'>
    readonly startDate: FieldRef<"Treatment", 'DateTime'>
    readonly endDate: FieldRef<"Treatment", 'DateTime'>
    readonly isActive: FieldRef<"Treatment", 'Boolean'>
    readonly userId: FieldRef<"Treatment", 'String'>
    readonly createdAt: FieldRef<"Treatment", 'DateTime'>
    readonly updatedAt: FieldRef<"Treatment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Treatment findUnique
   */
  export type TreatmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment findUniqueOrThrow
   */
  export type TreatmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment findFirst
   */
  export type TreatmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treatments.
     */
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment findFirstOrThrow
   */
  export type TreatmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treatments.
     */
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment findMany
   */
  export type TreatmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatments to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment create
   */
  export type TreatmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Treatment.
     */
    data: XOR<TreatmentCreateInput, TreatmentUncheckedCreateInput>
  }

  /**
   * Treatment createMany
   */
  export type TreatmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Treatments.
     */
    data: TreatmentCreateManyInput | TreatmentCreateManyInput[]
  }

  /**
   * Treatment createManyAndReturn
   */
  export type TreatmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * The data used to create many Treatments.
     */
    data: TreatmentCreateManyInput | TreatmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Treatment update
   */
  export type TreatmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Treatment.
     */
    data: XOR<TreatmentUpdateInput, TreatmentUncheckedUpdateInput>
    /**
     * Choose, which Treatment to update.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment updateMany
   */
  export type TreatmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Treatments.
     */
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyInput>
    /**
     * Filter which Treatments to update
     */
    where?: TreatmentWhereInput
    /**
     * Limit how many Treatments to update.
     */
    limit?: number
  }

  /**
   * Treatment updateManyAndReturn
   */
  export type TreatmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * The data used to update Treatments.
     */
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyInput>
    /**
     * Filter which Treatments to update
     */
    where?: TreatmentWhereInput
    /**
     * Limit how many Treatments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Treatment upsert
   */
  export type TreatmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Treatment to update in case it exists.
     */
    where: TreatmentWhereUniqueInput
    /**
     * In case the Treatment found by the `where` argument doesn't exist, create a new Treatment with this data.
     */
    create: XOR<TreatmentCreateInput, TreatmentUncheckedCreateInput>
    /**
     * In case the Treatment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreatmentUpdateInput, TreatmentUncheckedUpdateInput>
  }

  /**
   * Treatment delete
   */
  export type TreatmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter which Treatment to delete.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment deleteMany
   */
  export type TreatmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Treatments to delete
     */
    where?: TreatmentWhereInput
    /**
     * Limit how many Treatments to delete.
     */
    limit?: number
  }

  /**
   * Treatment.notifications
   */
  export type Treatment$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Treatment.medications
   */
  export type Treatment$medicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    where?: TreatmentMedicationWhereInput
    orderBy?: TreatmentMedicationOrderByWithRelationInput | TreatmentMedicationOrderByWithRelationInput[]
    cursor?: TreatmentMedicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentMedicationScalarFieldEnum | TreatmentMedicationScalarFieldEnum[]
  }

  /**
   * Treatment.images
   */
  export type Treatment$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
    where?: TreatmentImageWhereInput
    orderBy?: TreatmentImageOrderByWithRelationInput | TreatmentImageOrderByWithRelationInput[]
    cursor?: TreatmentImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentImageScalarFieldEnum | TreatmentImageScalarFieldEnum[]
  }

  /**
   * Treatment without action
   */
  export type TreatmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
  }


  /**
   * Model TreatmentMedication
   */

  export type AggregateTreatmentMedication = {
    _count: TreatmentMedicationCountAggregateOutputType | null
    _avg: TreatmentMedicationAvgAggregateOutputType | null
    _sum: TreatmentMedicationSumAggregateOutputType | null
    _min: TreatmentMedicationMinAggregateOutputType | null
    _max: TreatmentMedicationMaxAggregateOutputType | null
  }

  export type TreatmentMedicationAvgAggregateOutputType = {
    frequencyHours: number | null
    durationDays: number | null
  }

  export type TreatmentMedicationSumAggregateOutputType = {
    frequencyHours: number | null
    durationDays: number | null
  }

  export type TreatmentMedicationMinAggregateOutputType = {
    id: string | null
    treatmentId: string | null
    medicationId: string | null
    frequencyHours: number | null
    durationDays: number | null
    dosage: string | null
    startDate: Date | null
    endDate: Date | null
    startAtSpecificTime: boolean | null
    specificStartTime: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentMedicationMaxAggregateOutputType = {
    id: string | null
    treatmentId: string | null
    medicationId: string | null
    frequencyHours: number | null
    durationDays: number | null
    dosage: string | null
    startDate: Date | null
    endDate: Date | null
    startAtSpecificTime: boolean | null
    specificStartTime: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentMedicationCountAggregateOutputType = {
    id: number
    treatmentId: number
    medicationId: number
    frequencyHours: number
    durationDays: number
    dosage: number
    startDate: number
    endDate: number
    startAtSpecificTime: number
    specificStartTime: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TreatmentMedicationAvgAggregateInputType = {
    frequencyHours?: true
    durationDays?: true
  }

  export type TreatmentMedicationSumAggregateInputType = {
    frequencyHours?: true
    durationDays?: true
  }

  export type TreatmentMedicationMinAggregateInputType = {
    id?: true
    treatmentId?: true
    medicationId?: true
    frequencyHours?: true
    durationDays?: true
    dosage?: true
    startDate?: true
    endDate?: true
    startAtSpecificTime?: true
    specificStartTime?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentMedicationMaxAggregateInputType = {
    id?: true
    treatmentId?: true
    medicationId?: true
    frequencyHours?: true
    durationDays?: true
    dosage?: true
    startDate?: true
    endDate?: true
    startAtSpecificTime?: true
    specificStartTime?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentMedicationCountAggregateInputType = {
    id?: true
    treatmentId?: true
    medicationId?: true
    frequencyHours?: true
    durationDays?: true
    dosage?: true
    startDate?: true
    endDate?: true
    startAtSpecificTime?: true
    specificStartTime?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TreatmentMedicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreatmentMedication to aggregate.
     */
    where?: TreatmentMedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentMedications to fetch.
     */
    orderBy?: TreatmentMedicationOrderByWithRelationInput | TreatmentMedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreatmentMedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentMedications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentMedications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TreatmentMedications
    **/
    _count?: true | TreatmentMedicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TreatmentMedicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TreatmentMedicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreatmentMedicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreatmentMedicationMaxAggregateInputType
  }

  export type GetTreatmentMedicationAggregateType<T extends TreatmentMedicationAggregateArgs> = {
        [P in keyof T & keyof AggregateTreatmentMedication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreatmentMedication[P]>
      : GetScalarType<T[P], AggregateTreatmentMedication[P]>
  }




  export type TreatmentMedicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentMedicationWhereInput
    orderBy?: TreatmentMedicationOrderByWithAggregationInput | TreatmentMedicationOrderByWithAggregationInput[]
    by: TreatmentMedicationScalarFieldEnum[] | TreatmentMedicationScalarFieldEnum
    having?: TreatmentMedicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreatmentMedicationCountAggregateInputType | true
    _avg?: TreatmentMedicationAvgAggregateInputType
    _sum?: TreatmentMedicationSumAggregateInputType
    _min?: TreatmentMedicationMinAggregateInputType
    _max?: TreatmentMedicationMaxAggregateInputType
  }

  export type TreatmentMedicationGroupByOutputType = {
    id: string
    treatmentId: string
    medicationId: string
    frequencyHours: number
    durationDays: number
    dosage: string
    startDate: Date
    endDate: Date
    startAtSpecificTime: boolean
    specificStartTime: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: TreatmentMedicationCountAggregateOutputType | null
    _avg: TreatmentMedicationAvgAggregateOutputType | null
    _sum: TreatmentMedicationSumAggregateOutputType | null
    _min: TreatmentMedicationMinAggregateOutputType | null
    _max: TreatmentMedicationMaxAggregateOutputType | null
  }

  type GetTreatmentMedicationGroupByPayload<T extends TreatmentMedicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreatmentMedicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreatmentMedicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreatmentMedicationGroupByOutputType[P]>
            : GetScalarType<T[P], TreatmentMedicationGroupByOutputType[P]>
        }
      >
    >


  export type TreatmentMedicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentId?: boolean
    medicationId?: boolean
    frequencyHours?: boolean
    durationDays?: boolean
    dosage?: boolean
    startDate?: boolean
    endDate?: boolean
    startAtSpecificTime?: boolean
    specificStartTime?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentMedication"]>

  export type TreatmentMedicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentId?: boolean
    medicationId?: boolean
    frequencyHours?: boolean
    durationDays?: boolean
    dosage?: boolean
    startDate?: boolean
    endDate?: boolean
    startAtSpecificTime?: boolean
    specificStartTime?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentMedication"]>

  export type TreatmentMedicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentId?: boolean
    medicationId?: boolean
    frequencyHours?: boolean
    durationDays?: boolean
    dosage?: boolean
    startDate?: boolean
    endDate?: boolean
    startAtSpecificTime?: boolean
    specificStartTime?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentMedication"]>

  export type TreatmentMedicationSelectScalar = {
    id?: boolean
    treatmentId?: boolean
    medicationId?: boolean
    frequencyHours?: boolean
    durationDays?: boolean
    dosage?: boolean
    startDate?: boolean
    endDate?: boolean
    startAtSpecificTime?: boolean
    specificStartTime?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TreatmentMedicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "treatmentId" | "medicationId" | "frequencyHours" | "durationDays" | "dosage" | "startDate" | "endDate" | "startAtSpecificTime" | "specificStartTime" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["treatmentMedication"]>
  export type TreatmentMedicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }
  export type TreatmentMedicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }
  export type TreatmentMedicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }

  export type $TreatmentMedicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TreatmentMedication"
    objects: {
      treatment: Prisma.$TreatmentPayload<ExtArgs>
      medication: Prisma.$MedicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      treatmentId: string
      medicationId: string
      frequencyHours: number
      durationDays: number
      dosage: string
      startDate: Date
      endDate: Date
      startAtSpecificTime: boolean
      specificStartTime: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["treatmentMedication"]>
    composites: {}
  }

  type TreatmentMedicationGetPayload<S extends boolean | null | undefined | TreatmentMedicationDefaultArgs> = $Result.GetResult<Prisma.$TreatmentMedicationPayload, S>

  type TreatmentMedicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TreatmentMedicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TreatmentMedicationCountAggregateInputType | true
    }

  export interface TreatmentMedicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TreatmentMedication'], meta: { name: 'TreatmentMedication' } }
    /**
     * Find zero or one TreatmentMedication that matches the filter.
     * @param {TreatmentMedicationFindUniqueArgs} args - Arguments to find a TreatmentMedication
     * @example
     * // Get one TreatmentMedication
     * const treatmentMedication = await prisma.treatmentMedication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TreatmentMedicationFindUniqueArgs>(args: SelectSubset<T, TreatmentMedicationFindUniqueArgs<ExtArgs>>): Prisma__TreatmentMedicationClient<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TreatmentMedication that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TreatmentMedicationFindUniqueOrThrowArgs} args - Arguments to find a TreatmentMedication
     * @example
     * // Get one TreatmentMedication
     * const treatmentMedication = await prisma.treatmentMedication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TreatmentMedicationFindUniqueOrThrowArgs>(args: SelectSubset<T, TreatmentMedicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TreatmentMedicationClient<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TreatmentMedication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentMedicationFindFirstArgs} args - Arguments to find a TreatmentMedication
     * @example
     * // Get one TreatmentMedication
     * const treatmentMedication = await prisma.treatmentMedication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TreatmentMedicationFindFirstArgs>(args?: SelectSubset<T, TreatmentMedicationFindFirstArgs<ExtArgs>>): Prisma__TreatmentMedicationClient<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TreatmentMedication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentMedicationFindFirstOrThrowArgs} args - Arguments to find a TreatmentMedication
     * @example
     * // Get one TreatmentMedication
     * const treatmentMedication = await prisma.treatmentMedication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TreatmentMedicationFindFirstOrThrowArgs>(args?: SelectSubset<T, TreatmentMedicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__TreatmentMedicationClient<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TreatmentMedications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentMedicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TreatmentMedications
     * const treatmentMedications = await prisma.treatmentMedication.findMany()
     * 
     * // Get first 10 TreatmentMedications
     * const treatmentMedications = await prisma.treatmentMedication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treatmentMedicationWithIdOnly = await prisma.treatmentMedication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TreatmentMedicationFindManyArgs>(args?: SelectSubset<T, TreatmentMedicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TreatmentMedication.
     * @param {TreatmentMedicationCreateArgs} args - Arguments to create a TreatmentMedication.
     * @example
     * // Create one TreatmentMedication
     * const TreatmentMedication = await prisma.treatmentMedication.create({
     *   data: {
     *     // ... data to create a TreatmentMedication
     *   }
     * })
     * 
     */
    create<T extends TreatmentMedicationCreateArgs>(args: SelectSubset<T, TreatmentMedicationCreateArgs<ExtArgs>>): Prisma__TreatmentMedicationClient<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TreatmentMedications.
     * @param {TreatmentMedicationCreateManyArgs} args - Arguments to create many TreatmentMedications.
     * @example
     * // Create many TreatmentMedications
     * const treatmentMedication = await prisma.treatmentMedication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TreatmentMedicationCreateManyArgs>(args?: SelectSubset<T, TreatmentMedicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TreatmentMedications and returns the data saved in the database.
     * @param {TreatmentMedicationCreateManyAndReturnArgs} args - Arguments to create many TreatmentMedications.
     * @example
     * // Create many TreatmentMedications
     * const treatmentMedication = await prisma.treatmentMedication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TreatmentMedications and only return the `id`
     * const treatmentMedicationWithIdOnly = await prisma.treatmentMedication.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TreatmentMedicationCreateManyAndReturnArgs>(args?: SelectSubset<T, TreatmentMedicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TreatmentMedication.
     * @param {TreatmentMedicationDeleteArgs} args - Arguments to delete one TreatmentMedication.
     * @example
     * // Delete one TreatmentMedication
     * const TreatmentMedication = await prisma.treatmentMedication.delete({
     *   where: {
     *     // ... filter to delete one TreatmentMedication
     *   }
     * })
     * 
     */
    delete<T extends TreatmentMedicationDeleteArgs>(args: SelectSubset<T, TreatmentMedicationDeleteArgs<ExtArgs>>): Prisma__TreatmentMedicationClient<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TreatmentMedication.
     * @param {TreatmentMedicationUpdateArgs} args - Arguments to update one TreatmentMedication.
     * @example
     * // Update one TreatmentMedication
     * const treatmentMedication = await prisma.treatmentMedication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TreatmentMedicationUpdateArgs>(args: SelectSubset<T, TreatmentMedicationUpdateArgs<ExtArgs>>): Prisma__TreatmentMedicationClient<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TreatmentMedications.
     * @param {TreatmentMedicationDeleteManyArgs} args - Arguments to filter TreatmentMedications to delete.
     * @example
     * // Delete a few TreatmentMedications
     * const { count } = await prisma.treatmentMedication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TreatmentMedicationDeleteManyArgs>(args?: SelectSubset<T, TreatmentMedicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TreatmentMedications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentMedicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TreatmentMedications
     * const treatmentMedication = await prisma.treatmentMedication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TreatmentMedicationUpdateManyArgs>(args: SelectSubset<T, TreatmentMedicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TreatmentMedications and returns the data updated in the database.
     * @param {TreatmentMedicationUpdateManyAndReturnArgs} args - Arguments to update many TreatmentMedications.
     * @example
     * // Update many TreatmentMedications
     * const treatmentMedication = await prisma.treatmentMedication.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TreatmentMedications and only return the `id`
     * const treatmentMedicationWithIdOnly = await prisma.treatmentMedication.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TreatmentMedicationUpdateManyAndReturnArgs>(args: SelectSubset<T, TreatmentMedicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TreatmentMedication.
     * @param {TreatmentMedicationUpsertArgs} args - Arguments to update or create a TreatmentMedication.
     * @example
     * // Update or create a TreatmentMedication
     * const treatmentMedication = await prisma.treatmentMedication.upsert({
     *   create: {
     *     // ... data to create a TreatmentMedication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TreatmentMedication we want to update
     *   }
     * })
     */
    upsert<T extends TreatmentMedicationUpsertArgs>(args: SelectSubset<T, TreatmentMedicationUpsertArgs<ExtArgs>>): Prisma__TreatmentMedicationClient<$Result.GetResult<Prisma.$TreatmentMedicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TreatmentMedications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentMedicationCountArgs} args - Arguments to filter TreatmentMedications to count.
     * @example
     * // Count the number of TreatmentMedications
     * const count = await prisma.treatmentMedication.count({
     *   where: {
     *     // ... the filter for the TreatmentMedications we want to count
     *   }
     * })
    **/
    count<T extends TreatmentMedicationCountArgs>(
      args?: Subset<T, TreatmentMedicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreatmentMedicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TreatmentMedication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentMedicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreatmentMedicationAggregateArgs>(args: Subset<T, TreatmentMedicationAggregateArgs>): Prisma.PrismaPromise<GetTreatmentMedicationAggregateType<T>>

    /**
     * Group by TreatmentMedication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentMedicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreatmentMedicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreatmentMedicationGroupByArgs['orderBy'] }
        : { orderBy?: TreatmentMedicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreatmentMedicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreatmentMedicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TreatmentMedication model
   */
  readonly fields: TreatmentMedicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TreatmentMedication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreatmentMedicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    treatment<T extends TreatmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentDefaultArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    medication<T extends MedicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicationDefaultArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TreatmentMedication model
   */
  interface TreatmentMedicationFieldRefs {
    readonly id: FieldRef<"TreatmentMedication", 'String'>
    readonly treatmentId: FieldRef<"TreatmentMedication", 'String'>
    readonly medicationId: FieldRef<"TreatmentMedication", 'String'>
    readonly frequencyHours: FieldRef<"TreatmentMedication", 'Int'>
    readonly durationDays: FieldRef<"TreatmentMedication", 'Int'>
    readonly dosage: FieldRef<"TreatmentMedication", 'String'>
    readonly startDate: FieldRef<"TreatmentMedication", 'DateTime'>
    readonly endDate: FieldRef<"TreatmentMedication", 'DateTime'>
    readonly startAtSpecificTime: FieldRef<"TreatmentMedication", 'Boolean'>
    readonly specificStartTime: FieldRef<"TreatmentMedication", 'DateTime'>
    readonly isActive: FieldRef<"TreatmentMedication", 'Boolean'>
    readonly createdAt: FieldRef<"TreatmentMedication", 'DateTime'>
    readonly updatedAt: FieldRef<"TreatmentMedication", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TreatmentMedication findUnique
   */
  export type TreatmentMedicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentMedication to fetch.
     */
    where: TreatmentMedicationWhereUniqueInput
  }

  /**
   * TreatmentMedication findUniqueOrThrow
   */
  export type TreatmentMedicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentMedication to fetch.
     */
    where: TreatmentMedicationWhereUniqueInput
  }

  /**
   * TreatmentMedication findFirst
   */
  export type TreatmentMedicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentMedication to fetch.
     */
    where?: TreatmentMedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentMedications to fetch.
     */
    orderBy?: TreatmentMedicationOrderByWithRelationInput | TreatmentMedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreatmentMedications.
     */
    cursor?: TreatmentMedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentMedications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentMedications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreatmentMedications.
     */
    distinct?: TreatmentMedicationScalarFieldEnum | TreatmentMedicationScalarFieldEnum[]
  }

  /**
   * TreatmentMedication findFirstOrThrow
   */
  export type TreatmentMedicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentMedication to fetch.
     */
    where?: TreatmentMedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentMedications to fetch.
     */
    orderBy?: TreatmentMedicationOrderByWithRelationInput | TreatmentMedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreatmentMedications.
     */
    cursor?: TreatmentMedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentMedications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentMedications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreatmentMedications.
     */
    distinct?: TreatmentMedicationScalarFieldEnum | TreatmentMedicationScalarFieldEnum[]
  }

  /**
   * TreatmentMedication findMany
   */
  export type TreatmentMedicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentMedications to fetch.
     */
    where?: TreatmentMedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentMedications to fetch.
     */
    orderBy?: TreatmentMedicationOrderByWithRelationInput | TreatmentMedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TreatmentMedications.
     */
    cursor?: TreatmentMedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentMedications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentMedications.
     */
    skip?: number
    distinct?: TreatmentMedicationScalarFieldEnum | TreatmentMedicationScalarFieldEnum[]
  }

  /**
   * TreatmentMedication create
   */
  export type TreatmentMedicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    /**
     * The data needed to create a TreatmentMedication.
     */
    data: XOR<TreatmentMedicationCreateInput, TreatmentMedicationUncheckedCreateInput>
  }

  /**
   * TreatmentMedication createMany
   */
  export type TreatmentMedicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TreatmentMedications.
     */
    data: TreatmentMedicationCreateManyInput | TreatmentMedicationCreateManyInput[]
  }

  /**
   * TreatmentMedication createManyAndReturn
   */
  export type TreatmentMedicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * The data used to create many TreatmentMedications.
     */
    data: TreatmentMedicationCreateManyInput | TreatmentMedicationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TreatmentMedication update
   */
  export type TreatmentMedicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    /**
     * The data needed to update a TreatmentMedication.
     */
    data: XOR<TreatmentMedicationUpdateInput, TreatmentMedicationUncheckedUpdateInput>
    /**
     * Choose, which TreatmentMedication to update.
     */
    where: TreatmentMedicationWhereUniqueInput
  }

  /**
   * TreatmentMedication updateMany
   */
  export type TreatmentMedicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TreatmentMedications.
     */
    data: XOR<TreatmentMedicationUpdateManyMutationInput, TreatmentMedicationUncheckedUpdateManyInput>
    /**
     * Filter which TreatmentMedications to update
     */
    where?: TreatmentMedicationWhereInput
    /**
     * Limit how many TreatmentMedications to update.
     */
    limit?: number
  }

  /**
   * TreatmentMedication updateManyAndReturn
   */
  export type TreatmentMedicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * The data used to update TreatmentMedications.
     */
    data: XOR<TreatmentMedicationUpdateManyMutationInput, TreatmentMedicationUncheckedUpdateManyInput>
    /**
     * Filter which TreatmentMedications to update
     */
    where?: TreatmentMedicationWhereInput
    /**
     * Limit how many TreatmentMedications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TreatmentMedication upsert
   */
  export type TreatmentMedicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    /**
     * The filter to search for the TreatmentMedication to update in case it exists.
     */
    where: TreatmentMedicationWhereUniqueInput
    /**
     * In case the TreatmentMedication found by the `where` argument doesn't exist, create a new TreatmentMedication with this data.
     */
    create: XOR<TreatmentMedicationCreateInput, TreatmentMedicationUncheckedCreateInput>
    /**
     * In case the TreatmentMedication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreatmentMedicationUpdateInput, TreatmentMedicationUncheckedUpdateInput>
  }

  /**
   * TreatmentMedication delete
   */
  export type TreatmentMedicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
    /**
     * Filter which TreatmentMedication to delete.
     */
    where: TreatmentMedicationWhereUniqueInput
  }

  /**
   * TreatmentMedication deleteMany
   */
  export type TreatmentMedicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreatmentMedications to delete
     */
    where?: TreatmentMedicationWhereInput
    /**
     * Limit how many TreatmentMedications to delete.
     */
    limit?: number
  }

  /**
   * TreatmentMedication without action
   */
  export type TreatmentMedicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentMedication
     */
    select?: TreatmentMedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentMedication
     */
    omit?: TreatmentMedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentMedicationInclude<ExtArgs> | null
  }


  /**
   * Model TreatmentImage
   */

  export type AggregateTreatmentImage = {
    _count: TreatmentImageCountAggregateOutputType | null
    _min: TreatmentImageMinAggregateOutputType | null
    _max: TreatmentImageMaxAggregateOutputType | null
  }

  export type TreatmentImageMinAggregateOutputType = {
    id: string | null
    treatmentId: string | null
    imageUrl: string | null
    imageType: string | null
    extractedText: string | null
    aiAnalysis: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentImageMaxAggregateOutputType = {
    id: string | null
    treatmentId: string | null
    imageUrl: string | null
    imageType: string | null
    extractedText: string | null
    aiAnalysis: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentImageCountAggregateOutputType = {
    id: number
    treatmentId: number
    imageUrl: number
    imageType: number
    extractedText: number
    aiAnalysis: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TreatmentImageMinAggregateInputType = {
    id?: true
    treatmentId?: true
    imageUrl?: true
    imageType?: true
    extractedText?: true
    aiAnalysis?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentImageMaxAggregateInputType = {
    id?: true
    treatmentId?: true
    imageUrl?: true
    imageType?: true
    extractedText?: true
    aiAnalysis?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentImageCountAggregateInputType = {
    id?: true
    treatmentId?: true
    imageUrl?: true
    imageType?: true
    extractedText?: true
    aiAnalysis?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TreatmentImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreatmentImage to aggregate.
     */
    where?: TreatmentImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentImages to fetch.
     */
    orderBy?: TreatmentImageOrderByWithRelationInput | TreatmentImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreatmentImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TreatmentImages
    **/
    _count?: true | TreatmentImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreatmentImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreatmentImageMaxAggregateInputType
  }

  export type GetTreatmentImageAggregateType<T extends TreatmentImageAggregateArgs> = {
        [P in keyof T & keyof AggregateTreatmentImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreatmentImage[P]>
      : GetScalarType<T[P], AggregateTreatmentImage[P]>
  }




  export type TreatmentImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentImageWhereInput
    orderBy?: TreatmentImageOrderByWithAggregationInput | TreatmentImageOrderByWithAggregationInput[]
    by: TreatmentImageScalarFieldEnum[] | TreatmentImageScalarFieldEnum
    having?: TreatmentImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreatmentImageCountAggregateInputType | true
    _min?: TreatmentImageMinAggregateInputType
    _max?: TreatmentImageMaxAggregateInputType
  }

  export type TreatmentImageGroupByOutputType = {
    id: string
    treatmentId: string
    imageUrl: string
    imageType: string
    extractedText: string | null
    aiAnalysis: string | null
    createdAt: Date
    updatedAt: Date
    _count: TreatmentImageCountAggregateOutputType | null
    _min: TreatmentImageMinAggregateOutputType | null
    _max: TreatmentImageMaxAggregateOutputType | null
  }

  type GetTreatmentImageGroupByPayload<T extends TreatmentImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreatmentImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreatmentImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreatmentImageGroupByOutputType[P]>
            : GetScalarType<T[P], TreatmentImageGroupByOutputType[P]>
        }
      >
    >


  export type TreatmentImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentId?: boolean
    imageUrl?: boolean
    imageType?: boolean
    extractedText?: boolean
    aiAnalysis?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentImage"]>

  export type TreatmentImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentId?: boolean
    imageUrl?: boolean
    imageType?: boolean
    extractedText?: boolean
    aiAnalysis?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentImage"]>

  export type TreatmentImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentId?: boolean
    imageUrl?: boolean
    imageType?: boolean
    extractedText?: boolean
    aiAnalysis?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentImage"]>

  export type TreatmentImageSelectScalar = {
    id?: boolean
    treatmentId?: boolean
    imageUrl?: boolean
    imageType?: boolean
    extractedText?: boolean
    aiAnalysis?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TreatmentImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "treatmentId" | "imageUrl" | "imageType" | "extractedText" | "aiAnalysis" | "createdAt" | "updatedAt", ExtArgs["result"]["treatmentImage"]>
  export type TreatmentImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }
  export type TreatmentImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }
  export type TreatmentImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }

  export type $TreatmentImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TreatmentImage"
    objects: {
      treatment: Prisma.$TreatmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      treatmentId: string
      imageUrl: string
      imageType: string
      extractedText: string | null
      aiAnalysis: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["treatmentImage"]>
    composites: {}
  }

  type TreatmentImageGetPayload<S extends boolean | null | undefined | TreatmentImageDefaultArgs> = $Result.GetResult<Prisma.$TreatmentImagePayload, S>

  type TreatmentImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TreatmentImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TreatmentImageCountAggregateInputType | true
    }

  export interface TreatmentImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TreatmentImage'], meta: { name: 'TreatmentImage' } }
    /**
     * Find zero or one TreatmentImage that matches the filter.
     * @param {TreatmentImageFindUniqueArgs} args - Arguments to find a TreatmentImage
     * @example
     * // Get one TreatmentImage
     * const treatmentImage = await prisma.treatmentImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TreatmentImageFindUniqueArgs>(args: SelectSubset<T, TreatmentImageFindUniqueArgs<ExtArgs>>): Prisma__TreatmentImageClient<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TreatmentImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TreatmentImageFindUniqueOrThrowArgs} args - Arguments to find a TreatmentImage
     * @example
     * // Get one TreatmentImage
     * const treatmentImage = await prisma.treatmentImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TreatmentImageFindUniqueOrThrowArgs>(args: SelectSubset<T, TreatmentImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TreatmentImageClient<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TreatmentImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentImageFindFirstArgs} args - Arguments to find a TreatmentImage
     * @example
     * // Get one TreatmentImage
     * const treatmentImage = await prisma.treatmentImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TreatmentImageFindFirstArgs>(args?: SelectSubset<T, TreatmentImageFindFirstArgs<ExtArgs>>): Prisma__TreatmentImageClient<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TreatmentImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentImageFindFirstOrThrowArgs} args - Arguments to find a TreatmentImage
     * @example
     * // Get one TreatmentImage
     * const treatmentImage = await prisma.treatmentImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TreatmentImageFindFirstOrThrowArgs>(args?: SelectSubset<T, TreatmentImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__TreatmentImageClient<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TreatmentImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TreatmentImages
     * const treatmentImages = await prisma.treatmentImage.findMany()
     * 
     * // Get first 10 TreatmentImages
     * const treatmentImages = await prisma.treatmentImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treatmentImageWithIdOnly = await prisma.treatmentImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TreatmentImageFindManyArgs>(args?: SelectSubset<T, TreatmentImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TreatmentImage.
     * @param {TreatmentImageCreateArgs} args - Arguments to create a TreatmentImage.
     * @example
     * // Create one TreatmentImage
     * const TreatmentImage = await prisma.treatmentImage.create({
     *   data: {
     *     // ... data to create a TreatmentImage
     *   }
     * })
     * 
     */
    create<T extends TreatmentImageCreateArgs>(args: SelectSubset<T, TreatmentImageCreateArgs<ExtArgs>>): Prisma__TreatmentImageClient<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TreatmentImages.
     * @param {TreatmentImageCreateManyArgs} args - Arguments to create many TreatmentImages.
     * @example
     * // Create many TreatmentImages
     * const treatmentImage = await prisma.treatmentImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TreatmentImageCreateManyArgs>(args?: SelectSubset<T, TreatmentImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TreatmentImages and returns the data saved in the database.
     * @param {TreatmentImageCreateManyAndReturnArgs} args - Arguments to create many TreatmentImages.
     * @example
     * // Create many TreatmentImages
     * const treatmentImage = await prisma.treatmentImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TreatmentImages and only return the `id`
     * const treatmentImageWithIdOnly = await prisma.treatmentImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TreatmentImageCreateManyAndReturnArgs>(args?: SelectSubset<T, TreatmentImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TreatmentImage.
     * @param {TreatmentImageDeleteArgs} args - Arguments to delete one TreatmentImage.
     * @example
     * // Delete one TreatmentImage
     * const TreatmentImage = await prisma.treatmentImage.delete({
     *   where: {
     *     // ... filter to delete one TreatmentImage
     *   }
     * })
     * 
     */
    delete<T extends TreatmentImageDeleteArgs>(args: SelectSubset<T, TreatmentImageDeleteArgs<ExtArgs>>): Prisma__TreatmentImageClient<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TreatmentImage.
     * @param {TreatmentImageUpdateArgs} args - Arguments to update one TreatmentImage.
     * @example
     * // Update one TreatmentImage
     * const treatmentImage = await prisma.treatmentImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TreatmentImageUpdateArgs>(args: SelectSubset<T, TreatmentImageUpdateArgs<ExtArgs>>): Prisma__TreatmentImageClient<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TreatmentImages.
     * @param {TreatmentImageDeleteManyArgs} args - Arguments to filter TreatmentImages to delete.
     * @example
     * // Delete a few TreatmentImages
     * const { count } = await prisma.treatmentImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TreatmentImageDeleteManyArgs>(args?: SelectSubset<T, TreatmentImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TreatmentImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TreatmentImages
     * const treatmentImage = await prisma.treatmentImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TreatmentImageUpdateManyArgs>(args: SelectSubset<T, TreatmentImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TreatmentImages and returns the data updated in the database.
     * @param {TreatmentImageUpdateManyAndReturnArgs} args - Arguments to update many TreatmentImages.
     * @example
     * // Update many TreatmentImages
     * const treatmentImage = await prisma.treatmentImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TreatmentImages and only return the `id`
     * const treatmentImageWithIdOnly = await prisma.treatmentImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TreatmentImageUpdateManyAndReturnArgs>(args: SelectSubset<T, TreatmentImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TreatmentImage.
     * @param {TreatmentImageUpsertArgs} args - Arguments to update or create a TreatmentImage.
     * @example
     * // Update or create a TreatmentImage
     * const treatmentImage = await prisma.treatmentImage.upsert({
     *   create: {
     *     // ... data to create a TreatmentImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TreatmentImage we want to update
     *   }
     * })
     */
    upsert<T extends TreatmentImageUpsertArgs>(args: SelectSubset<T, TreatmentImageUpsertArgs<ExtArgs>>): Prisma__TreatmentImageClient<$Result.GetResult<Prisma.$TreatmentImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TreatmentImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentImageCountArgs} args - Arguments to filter TreatmentImages to count.
     * @example
     * // Count the number of TreatmentImages
     * const count = await prisma.treatmentImage.count({
     *   where: {
     *     // ... the filter for the TreatmentImages we want to count
     *   }
     * })
    **/
    count<T extends TreatmentImageCountArgs>(
      args?: Subset<T, TreatmentImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreatmentImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TreatmentImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreatmentImageAggregateArgs>(args: Subset<T, TreatmentImageAggregateArgs>): Prisma.PrismaPromise<GetTreatmentImageAggregateType<T>>

    /**
     * Group by TreatmentImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreatmentImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreatmentImageGroupByArgs['orderBy'] }
        : { orderBy?: TreatmentImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreatmentImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreatmentImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TreatmentImage model
   */
  readonly fields: TreatmentImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TreatmentImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreatmentImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    treatment<T extends TreatmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentDefaultArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TreatmentImage model
   */
  interface TreatmentImageFieldRefs {
    readonly id: FieldRef<"TreatmentImage", 'String'>
    readonly treatmentId: FieldRef<"TreatmentImage", 'String'>
    readonly imageUrl: FieldRef<"TreatmentImage", 'String'>
    readonly imageType: FieldRef<"TreatmentImage", 'String'>
    readonly extractedText: FieldRef<"TreatmentImage", 'String'>
    readonly aiAnalysis: FieldRef<"TreatmentImage", 'String'>
    readonly createdAt: FieldRef<"TreatmentImage", 'DateTime'>
    readonly updatedAt: FieldRef<"TreatmentImage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TreatmentImage findUnique
   */
  export type TreatmentImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentImage to fetch.
     */
    where: TreatmentImageWhereUniqueInput
  }

  /**
   * TreatmentImage findUniqueOrThrow
   */
  export type TreatmentImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentImage to fetch.
     */
    where: TreatmentImageWhereUniqueInput
  }

  /**
   * TreatmentImage findFirst
   */
  export type TreatmentImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentImage to fetch.
     */
    where?: TreatmentImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentImages to fetch.
     */
    orderBy?: TreatmentImageOrderByWithRelationInput | TreatmentImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreatmentImages.
     */
    cursor?: TreatmentImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreatmentImages.
     */
    distinct?: TreatmentImageScalarFieldEnum | TreatmentImageScalarFieldEnum[]
  }

  /**
   * TreatmentImage findFirstOrThrow
   */
  export type TreatmentImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentImage to fetch.
     */
    where?: TreatmentImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentImages to fetch.
     */
    orderBy?: TreatmentImageOrderByWithRelationInput | TreatmentImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreatmentImages.
     */
    cursor?: TreatmentImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreatmentImages.
     */
    distinct?: TreatmentImageScalarFieldEnum | TreatmentImageScalarFieldEnum[]
  }

  /**
   * TreatmentImage findMany
   */
  export type TreatmentImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentImages to fetch.
     */
    where?: TreatmentImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentImages to fetch.
     */
    orderBy?: TreatmentImageOrderByWithRelationInput | TreatmentImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TreatmentImages.
     */
    cursor?: TreatmentImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentImages.
     */
    skip?: number
    distinct?: TreatmentImageScalarFieldEnum | TreatmentImageScalarFieldEnum[]
  }

  /**
   * TreatmentImage create
   */
  export type TreatmentImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
    /**
     * The data needed to create a TreatmentImage.
     */
    data: XOR<TreatmentImageCreateInput, TreatmentImageUncheckedCreateInput>
  }

  /**
   * TreatmentImage createMany
   */
  export type TreatmentImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TreatmentImages.
     */
    data: TreatmentImageCreateManyInput | TreatmentImageCreateManyInput[]
  }

  /**
   * TreatmentImage createManyAndReturn
   */
  export type TreatmentImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * The data used to create many TreatmentImages.
     */
    data: TreatmentImageCreateManyInput | TreatmentImageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TreatmentImage update
   */
  export type TreatmentImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
    /**
     * The data needed to update a TreatmentImage.
     */
    data: XOR<TreatmentImageUpdateInput, TreatmentImageUncheckedUpdateInput>
    /**
     * Choose, which TreatmentImage to update.
     */
    where: TreatmentImageWhereUniqueInput
  }

  /**
   * TreatmentImage updateMany
   */
  export type TreatmentImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TreatmentImages.
     */
    data: XOR<TreatmentImageUpdateManyMutationInput, TreatmentImageUncheckedUpdateManyInput>
    /**
     * Filter which TreatmentImages to update
     */
    where?: TreatmentImageWhereInput
    /**
     * Limit how many TreatmentImages to update.
     */
    limit?: number
  }

  /**
   * TreatmentImage updateManyAndReturn
   */
  export type TreatmentImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * The data used to update TreatmentImages.
     */
    data: XOR<TreatmentImageUpdateManyMutationInput, TreatmentImageUncheckedUpdateManyInput>
    /**
     * Filter which TreatmentImages to update
     */
    where?: TreatmentImageWhereInput
    /**
     * Limit how many TreatmentImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TreatmentImage upsert
   */
  export type TreatmentImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
    /**
     * The filter to search for the TreatmentImage to update in case it exists.
     */
    where: TreatmentImageWhereUniqueInput
    /**
     * In case the TreatmentImage found by the `where` argument doesn't exist, create a new TreatmentImage with this data.
     */
    create: XOR<TreatmentImageCreateInput, TreatmentImageUncheckedCreateInput>
    /**
     * In case the TreatmentImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreatmentImageUpdateInput, TreatmentImageUncheckedUpdateInput>
  }

  /**
   * TreatmentImage delete
   */
  export type TreatmentImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
    /**
     * Filter which TreatmentImage to delete.
     */
    where: TreatmentImageWhereUniqueInput
  }

  /**
   * TreatmentImage deleteMany
   */
  export type TreatmentImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreatmentImages to delete
     */
    where?: TreatmentImageWhereInput
    /**
     * Limit how many TreatmentImages to delete.
     */
    limit?: number
  }

  /**
   * TreatmentImage without action
   */
  export type TreatmentImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentImage
     */
    select?: TreatmentImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentImage
     */
    omit?: TreatmentImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentImageInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    treatmentId: string | null
    scheduledDate: Date | null
    sent: boolean | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    treatmentId: string | null
    scheduledDate: Date | null
    sent: boolean | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    treatmentId: number
    scheduledDate: number
    sent: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    treatmentId?: true
    scheduledDate?: true
    sent?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    treatmentId?: true
    scheduledDate?: true
    sent?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    treatmentId?: true
    scheduledDate?: true
    sent?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    treatmentId: string
    scheduledDate: Date
    sent: boolean
    type: string
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentId?: boolean
    scheduledDate?: boolean
    sent?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentId?: boolean
    scheduledDate?: boolean
    sent?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentId?: boolean
    scheduledDate?: boolean
    sent?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    treatmentId?: boolean
    scheduledDate?: boolean
    sent?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "treatmentId" | "scheduledDate" | "sent" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      treatment: Prisma.$TreatmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      treatmentId: string
      scheduledDate: Date
      sent: boolean
      type: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    treatment<T extends TreatmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentDefaultArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly treatmentId: FieldRef<"Notification", 'String'>
    readonly scheduledDate: FieldRef<"Notification", 'DateTime'>
    readonly sent: FieldRef<"Notification", 'Boolean'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model NotificationPreferences
   */

  export type AggregateNotificationPreferences = {
    _count: NotificationPreferencesCountAggregateOutputType | null
    _min: NotificationPreferencesMinAggregateOutputType | null
    _max: NotificationPreferencesMaxAggregateOutputType | null
  }

  export type NotificationPreferencesMinAggregateOutputType = {
    id: string | null
    push: boolean | null
    sound: boolean | null
    email: boolean | null
    browser: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationPreferencesMaxAggregateOutputType = {
    id: string | null
    push: boolean | null
    sound: boolean | null
    email: boolean | null
    browser: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationPreferencesCountAggregateOutputType = {
    id: number
    push: number
    sound: number
    email: number
    browser: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationPreferencesMinAggregateInputType = {
    id?: true
    push?: true
    sound?: true
    email?: true
    browser?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationPreferencesMaxAggregateInputType = {
    id?: true
    push?: true
    sound?: true
    email?: true
    browser?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationPreferencesCountAggregateInputType = {
    id?: true
    push?: true
    sound?: true
    email?: true
    browser?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationPreferencesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationPreferences to aggregate.
     */
    where?: NotificationPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferencesOrderByWithRelationInput | NotificationPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationPreferences
    **/
    _count?: true | NotificationPreferencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationPreferencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationPreferencesMaxAggregateInputType
  }

  export type GetNotificationPreferencesAggregateType<T extends NotificationPreferencesAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationPreferences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationPreferences[P]>
      : GetScalarType<T[P], AggregateNotificationPreferences[P]>
  }




  export type NotificationPreferencesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationPreferencesWhereInput
    orderBy?: NotificationPreferencesOrderByWithAggregationInput | NotificationPreferencesOrderByWithAggregationInput[]
    by: NotificationPreferencesScalarFieldEnum[] | NotificationPreferencesScalarFieldEnum
    having?: NotificationPreferencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationPreferencesCountAggregateInputType | true
    _min?: NotificationPreferencesMinAggregateInputType
    _max?: NotificationPreferencesMaxAggregateInputType
  }

  export type NotificationPreferencesGroupByOutputType = {
    id: string
    push: boolean
    sound: boolean
    email: boolean
    browser: boolean
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: NotificationPreferencesCountAggregateOutputType | null
    _min: NotificationPreferencesMinAggregateOutputType | null
    _max: NotificationPreferencesMaxAggregateOutputType | null
  }

  type GetNotificationPreferencesGroupByPayload<T extends NotificationPreferencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationPreferencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationPreferencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationPreferencesGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationPreferencesGroupByOutputType[P]>
        }
      >
    >


  export type NotificationPreferencesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    push?: boolean
    sound?: boolean
    email?: boolean
    browser?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationPreferences"]>

  export type NotificationPreferencesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    push?: boolean
    sound?: boolean
    email?: boolean
    browser?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationPreferences"]>

  export type NotificationPreferencesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    push?: boolean
    sound?: boolean
    email?: boolean
    browser?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationPreferences"]>

  export type NotificationPreferencesSelectScalar = {
    id?: boolean
    push?: boolean
    sound?: boolean
    email?: boolean
    browser?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationPreferencesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "push" | "sound" | "email" | "browser" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationPreferences"]>
  export type NotificationPreferencesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationPreferencesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationPreferencesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPreferencesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationPreferences"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      push: boolean
      sound: boolean
      email: boolean
      browser: boolean
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationPreferences"]>
    composites: {}
  }

  type NotificationPreferencesGetPayload<S extends boolean | null | undefined | NotificationPreferencesDefaultArgs> = $Result.GetResult<Prisma.$NotificationPreferencesPayload, S>

  type NotificationPreferencesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationPreferencesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationPreferencesCountAggregateInputType | true
    }

  export interface NotificationPreferencesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationPreferences'], meta: { name: 'NotificationPreferences' } }
    /**
     * Find zero or one NotificationPreferences that matches the filter.
     * @param {NotificationPreferencesFindUniqueArgs} args - Arguments to find a NotificationPreferences
     * @example
     * // Get one NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationPreferencesFindUniqueArgs>(args: SelectSubset<T, NotificationPreferencesFindUniqueArgs<ExtArgs>>): Prisma__NotificationPreferencesClient<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationPreferences that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationPreferencesFindUniqueOrThrowArgs} args - Arguments to find a NotificationPreferences
     * @example
     * // Get one NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationPreferencesFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationPreferencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationPreferencesClient<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferencesFindFirstArgs} args - Arguments to find a NotificationPreferences
     * @example
     * // Get one NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationPreferencesFindFirstArgs>(args?: SelectSubset<T, NotificationPreferencesFindFirstArgs<ExtArgs>>): Prisma__NotificationPreferencesClient<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationPreferences that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferencesFindFirstOrThrowArgs} args - Arguments to find a NotificationPreferences
     * @example
     * // Get one NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationPreferencesFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationPreferencesFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationPreferencesClient<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferencesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.findMany()
     * 
     * // Get first 10 NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationPreferencesWithIdOnly = await prisma.notificationPreferences.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationPreferencesFindManyArgs>(args?: SelectSubset<T, NotificationPreferencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationPreferences.
     * @param {NotificationPreferencesCreateArgs} args - Arguments to create a NotificationPreferences.
     * @example
     * // Create one NotificationPreferences
     * const NotificationPreferences = await prisma.notificationPreferences.create({
     *   data: {
     *     // ... data to create a NotificationPreferences
     *   }
     * })
     * 
     */
    create<T extends NotificationPreferencesCreateArgs>(args: SelectSubset<T, NotificationPreferencesCreateArgs<ExtArgs>>): Prisma__NotificationPreferencesClient<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationPreferences.
     * @param {NotificationPreferencesCreateManyArgs} args - Arguments to create many NotificationPreferences.
     * @example
     * // Create many NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationPreferencesCreateManyArgs>(args?: SelectSubset<T, NotificationPreferencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationPreferences and returns the data saved in the database.
     * @param {NotificationPreferencesCreateManyAndReturnArgs} args - Arguments to create many NotificationPreferences.
     * @example
     * // Create many NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationPreferences and only return the `id`
     * const notificationPreferencesWithIdOnly = await prisma.notificationPreferences.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationPreferencesCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationPreferencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationPreferences.
     * @param {NotificationPreferencesDeleteArgs} args - Arguments to delete one NotificationPreferences.
     * @example
     * // Delete one NotificationPreferences
     * const NotificationPreferences = await prisma.notificationPreferences.delete({
     *   where: {
     *     // ... filter to delete one NotificationPreferences
     *   }
     * })
     * 
     */
    delete<T extends NotificationPreferencesDeleteArgs>(args: SelectSubset<T, NotificationPreferencesDeleteArgs<ExtArgs>>): Prisma__NotificationPreferencesClient<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationPreferences.
     * @param {NotificationPreferencesUpdateArgs} args - Arguments to update one NotificationPreferences.
     * @example
     * // Update one NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationPreferencesUpdateArgs>(args: SelectSubset<T, NotificationPreferencesUpdateArgs<ExtArgs>>): Prisma__NotificationPreferencesClient<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationPreferences.
     * @param {NotificationPreferencesDeleteManyArgs} args - Arguments to filter NotificationPreferences to delete.
     * @example
     * // Delete a few NotificationPreferences
     * const { count } = await prisma.notificationPreferences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationPreferencesDeleteManyArgs>(args?: SelectSubset<T, NotificationPreferencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationPreferencesUpdateManyArgs>(args: SelectSubset<T, NotificationPreferencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationPreferences and returns the data updated in the database.
     * @param {NotificationPreferencesUpdateManyAndReturnArgs} args - Arguments to update many NotificationPreferences.
     * @example
     * // Update many NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationPreferences and only return the `id`
     * const notificationPreferencesWithIdOnly = await prisma.notificationPreferences.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationPreferencesUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationPreferencesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationPreferences.
     * @param {NotificationPreferencesUpsertArgs} args - Arguments to update or create a NotificationPreferences.
     * @example
     * // Update or create a NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreferences.upsert({
     *   create: {
     *     // ... data to create a NotificationPreferences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationPreferences we want to update
     *   }
     * })
     */
    upsert<T extends NotificationPreferencesUpsertArgs>(args: SelectSubset<T, NotificationPreferencesUpsertArgs<ExtArgs>>): Prisma__NotificationPreferencesClient<$Result.GetResult<Prisma.$NotificationPreferencesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferencesCountArgs} args - Arguments to filter NotificationPreferences to count.
     * @example
     * // Count the number of NotificationPreferences
     * const count = await prisma.notificationPreferences.count({
     *   where: {
     *     // ... the filter for the NotificationPreferences we want to count
     *   }
     * })
    **/
    count<T extends NotificationPreferencesCountArgs>(
      args?: Subset<T, NotificationPreferencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationPreferencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationPreferencesAggregateArgs>(args: Subset<T, NotificationPreferencesAggregateArgs>): Prisma.PrismaPromise<GetNotificationPreferencesAggregateType<T>>

    /**
     * Group by NotificationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationPreferencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationPreferencesGroupByArgs['orderBy'] }
        : { orderBy?: NotificationPreferencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationPreferencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationPreferencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationPreferences model
   */
  readonly fields: NotificationPreferencesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationPreferences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationPreferencesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationPreferences model
   */
  interface NotificationPreferencesFieldRefs {
    readonly id: FieldRef<"NotificationPreferences", 'String'>
    readonly push: FieldRef<"NotificationPreferences", 'Boolean'>
    readonly sound: FieldRef<"NotificationPreferences", 'Boolean'>
    readonly email: FieldRef<"NotificationPreferences", 'Boolean'>
    readonly browser: FieldRef<"NotificationPreferences", 'Boolean'>
    readonly userId: FieldRef<"NotificationPreferences", 'String'>
    readonly createdAt: FieldRef<"NotificationPreferences", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationPreferences", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationPreferences findUnique
   */
  export type NotificationPreferencesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreferences to fetch.
     */
    where: NotificationPreferencesWhereUniqueInput
  }

  /**
   * NotificationPreferences findUniqueOrThrow
   */
  export type NotificationPreferencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreferences to fetch.
     */
    where: NotificationPreferencesWhereUniqueInput
  }

  /**
   * NotificationPreferences findFirst
   */
  export type NotificationPreferencesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreferences to fetch.
     */
    where?: NotificationPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferencesOrderByWithRelationInput | NotificationPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationPreferences.
     */
    cursor?: NotificationPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationPreferences.
     */
    distinct?: NotificationPreferencesScalarFieldEnum | NotificationPreferencesScalarFieldEnum[]
  }

  /**
   * NotificationPreferences findFirstOrThrow
   */
  export type NotificationPreferencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreferences to fetch.
     */
    where?: NotificationPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferencesOrderByWithRelationInput | NotificationPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationPreferences.
     */
    cursor?: NotificationPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationPreferences.
     */
    distinct?: NotificationPreferencesScalarFieldEnum | NotificationPreferencesScalarFieldEnum[]
  }

  /**
   * NotificationPreferences findMany
   */
  export type NotificationPreferencesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreferences to fetch.
     */
    where?: NotificationPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferencesOrderByWithRelationInput | NotificationPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationPreferences.
     */
    cursor?: NotificationPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    distinct?: NotificationPreferencesScalarFieldEnum | NotificationPreferencesScalarFieldEnum[]
  }

  /**
   * NotificationPreferences create
   */
  export type NotificationPreferencesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationPreferences.
     */
    data: XOR<NotificationPreferencesCreateInput, NotificationPreferencesUncheckedCreateInput>
  }

  /**
   * NotificationPreferences createMany
   */
  export type NotificationPreferencesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationPreferences.
     */
    data: NotificationPreferencesCreateManyInput | NotificationPreferencesCreateManyInput[]
  }

  /**
   * NotificationPreferences createManyAndReturn
   */
  export type NotificationPreferencesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationPreferences.
     */
    data: NotificationPreferencesCreateManyInput | NotificationPreferencesCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationPreferences update
   */
  export type NotificationPreferencesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationPreferences.
     */
    data: XOR<NotificationPreferencesUpdateInput, NotificationPreferencesUncheckedUpdateInput>
    /**
     * Choose, which NotificationPreferences to update.
     */
    where: NotificationPreferencesWhereUniqueInput
  }

  /**
   * NotificationPreferences updateMany
   */
  export type NotificationPreferencesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationPreferences.
     */
    data: XOR<NotificationPreferencesUpdateManyMutationInput, NotificationPreferencesUncheckedUpdateManyInput>
    /**
     * Filter which NotificationPreferences to update
     */
    where?: NotificationPreferencesWhereInput
    /**
     * Limit how many NotificationPreferences to update.
     */
    limit?: number
  }

  /**
   * NotificationPreferences updateManyAndReturn
   */
  export type NotificationPreferencesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * The data used to update NotificationPreferences.
     */
    data: XOR<NotificationPreferencesUpdateManyMutationInput, NotificationPreferencesUncheckedUpdateManyInput>
    /**
     * Filter which NotificationPreferences to update
     */
    where?: NotificationPreferencesWhereInput
    /**
     * Limit how many NotificationPreferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationPreferences upsert
   */
  export type NotificationPreferencesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationPreferences to update in case it exists.
     */
    where: NotificationPreferencesWhereUniqueInput
    /**
     * In case the NotificationPreferences found by the `where` argument doesn't exist, create a new NotificationPreferences with this data.
     */
    create: XOR<NotificationPreferencesCreateInput, NotificationPreferencesUncheckedCreateInput>
    /**
     * In case the NotificationPreferences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationPreferencesUpdateInput, NotificationPreferencesUncheckedUpdateInput>
  }

  /**
   * NotificationPreferences delete
   */
  export type NotificationPreferencesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
    /**
     * Filter which NotificationPreferences to delete.
     */
    where: NotificationPreferencesWhereUniqueInput
  }

  /**
   * NotificationPreferences deleteMany
   */
  export type NotificationPreferencesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationPreferences to delete
     */
    where?: NotificationPreferencesWhereInput
    /**
     * Limit how many NotificationPreferences to delete.
     */
    limit?: number
  }

  /**
   * NotificationPreferences without action
   */
  export type NotificationPreferencesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreferences
     */
    select?: NotificationPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreferences
     */
    omit?: NotificationPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferencesInclude<ExtArgs> | null
  }


  /**
   * Model PushSubscription
   */

  export type AggregatePushSubscription = {
    _count: PushSubscriptionCountAggregateOutputType | null
    _min: PushSubscriptionMinAggregateOutputType | null
    _max: PushSubscriptionMaxAggregateOutputType | null
  }

  export type PushSubscriptionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    endpoint: string | null
    p256dhKey: string | null
    authKey: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PushSubscriptionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    endpoint: string | null
    p256dhKey: string | null
    authKey: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PushSubscriptionCountAggregateOutputType = {
    id: number
    userId: number
    endpoint: number
    p256dhKey: number
    authKey: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PushSubscriptionMinAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    p256dhKey?: true
    authKey?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PushSubscriptionMaxAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    p256dhKey?: true
    authKey?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PushSubscriptionCountAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    p256dhKey?: true
    authKey?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PushSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PushSubscription to aggregate.
     */
    where?: PushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushSubscriptions to fetch.
     */
    orderBy?: PushSubscriptionOrderByWithRelationInput | PushSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PushSubscriptions
    **/
    _count?: true | PushSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PushSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PushSubscriptionMaxAggregateInputType
  }

  export type GetPushSubscriptionAggregateType<T extends PushSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregatePushSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePushSubscription[P]>
      : GetScalarType<T[P], AggregatePushSubscription[P]>
  }




  export type PushSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PushSubscriptionWhereInput
    orderBy?: PushSubscriptionOrderByWithAggregationInput | PushSubscriptionOrderByWithAggregationInput[]
    by: PushSubscriptionScalarFieldEnum[] | PushSubscriptionScalarFieldEnum
    having?: PushSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PushSubscriptionCountAggregateInputType | true
    _min?: PushSubscriptionMinAggregateInputType
    _max?: PushSubscriptionMaxAggregateInputType
  }

  export type PushSubscriptionGroupByOutputType = {
    id: string
    userId: string
    endpoint: string
    p256dhKey: string
    authKey: string
    createdAt: Date
    updatedAt: Date
    _count: PushSubscriptionCountAggregateOutputType | null
    _min: PushSubscriptionMinAggregateOutputType | null
    _max: PushSubscriptionMaxAggregateOutputType | null
  }

  type GetPushSubscriptionGroupByPayload<T extends PushSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PushSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PushSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PushSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], PushSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type PushSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    p256dhKey?: boolean
    authKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pushSubscription"]>

  export type PushSubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    p256dhKey?: boolean
    authKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pushSubscription"]>

  export type PushSubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    p256dhKey?: boolean
    authKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pushSubscription"]>

  export type PushSubscriptionSelectScalar = {
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    p256dhKey?: boolean
    authKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PushSubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "endpoint" | "p256dhKey" | "authKey" | "createdAt" | "updatedAt", ExtArgs["result"]["pushSubscription"]>
  export type PushSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PushSubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PushSubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PushSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PushSubscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      endpoint: string
      p256dhKey: string
      authKey: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pushSubscription"]>
    composites: {}
  }

  type PushSubscriptionGetPayload<S extends boolean | null | undefined | PushSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$PushSubscriptionPayload, S>

  type PushSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PushSubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PushSubscriptionCountAggregateInputType | true
    }

  export interface PushSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PushSubscription'], meta: { name: 'PushSubscription' } }
    /**
     * Find zero or one PushSubscription that matches the filter.
     * @param {PushSubscriptionFindUniqueArgs} args - Arguments to find a PushSubscription
     * @example
     * // Get one PushSubscription
     * const pushSubscription = await prisma.pushSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PushSubscriptionFindUniqueArgs>(args: SelectSubset<T, PushSubscriptionFindUniqueArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PushSubscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PushSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a PushSubscription
     * @example
     * // Get one PushSubscription
     * const pushSubscription = await prisma.pushSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PushSubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, PushSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PushSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionFindFirstArgs} args - Arguments to find a PushSubscription
     * @example
     * // Get one PushSubscription
     * const pushSubscription = await prisma.pushSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PushSubscriptionFindFirstArgs>(args?: SelectSubset<T, PushSubscriptionFindFirstArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PushSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionFindFirstOrThrowArgs} args - Arguments to find a PushSubscription
     * @example
     * // Get one PushSubscription
     * const pushSubscription = await prisma.pushSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PushSubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, PushSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PushSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PushSubscriptions
     * const pushSubscriptions = await prisma.pushSubscription.findMany()
     * 
     * // Get first 10 PushSubscriptions
     * const pushSubscriptions = await prisma.pushSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pushSubscriptionWithIdOnly = await prisma.pushSubscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PushSubscriptionFindManyArgs>(args?: SelectSubset<T, PushSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PushSubscription.
     * @param {PushSubscriptionCreateArgs} args - Arguments to create a PushSubscription.
     * @example
     * // Create one PushSubscription
     * const PushSubscription = await prisma.pushSubscription.create({
     *   data: {
     *     // ... data to create a PushSubscription
     *   }
     * })
     * 
     */
    create<T extends PushSubscriptionCreateArgs>(args: SelectSubset<T, PushSubscriptionCreateArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PushSubscriptions.
     * @param {PushSubscriptionCreateManyArgs} args - Arguments to create many PushSubscriptions.
     * @example
     * // Create many PushSubscriptions
     * const pushSubscription = await prisma.pushSubscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PushSubscriptionCreateManyArgs>(args?: SelectSubset<T, PushSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PushSubscriptions and returns the data saved in the database.
     * @param {PushSubscriptionCreateManyAndReturnArgs} args - Arguments to create many PushSubscriptions.
     * @example
     * // Create many PushSubscriptions
     * const pushSubscription = await prisma.pushSubscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PushSubscriptions and only return the `id`
     * const pushSubscriptionWithIdOnly = await prisma.pushSubscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PushSubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, PushSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PushSubscription.
     * @param {PushSubscriptionDeleteArgs} args - Arguments to delete one PushSubscription.
     * @example
     * // Delete one PushSubscription
     * const PushSubscription = await prisma.pushSubscription.delete({
     *   where: {
     *     // ... filter to delete one PushSubscription
     *   }
     * })
     * 
     */
    delete<T extends PushSubscriptionDeleteArgs>(args: SelectSubset<T, PushSubscriptionDeleteArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PushSubscription.
     * @param {PushSubscriptionUpdateArgs} args - Arguments to update one PushSubscription.
     * @example
     * // Update one PushSubscription
     * const pushSubscription = await prisma.pushSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PushSubscriptionUpdateArgs>(args: SelectSubset<T, PushSubscriptionUpdateArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PushSubscriptions.
     * @param {PushSubscriptionDeleteManyArgs} args - Arguments to filter PushSubscriptions to delete.
     * @example
     * // Delete a few PushSubscriptions
     * const { count } = await prisma.pushSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PushSubscriptionDeleteManyArgs>(args?: SelectSubset<T, PushSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PushSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PushSubscriptions
     * const pushSubscription = await prisma.pushSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PushSubscriptionUpdateManyArgs>(args: SelectSubset<T, PushSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PushSubscriptions and returns the data updated in the database.
     * @param {PushSubscriptionUpdateManyAndReturnArgs} args - Arguments to update many PushSubscriptions.
     * @example
     * // Update many PushSubscriptions
     * const pushSubscription = await prisma.pushSubscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PushSubscriptions and only return the `id`
     * const pushSubscriptionWithIdOnly = await prisma.pushSubscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PushSubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, PushSubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PushSubscription.
     * @param {PushSubscriptionUpsertArgs} args - Arguments to update or create a PushSubscription.
     * @example
     * // Update or create a PushSubscription
     * const pushSubscription = await prisma.pushSubscription.upsert({
     *   create: {
     *     // ... data to create a PushSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PushSubscription we want to update
     *   }
     * })
     */
    upsert<T extends PushSubscriptionUpsertArgs>(args: SelectSubset<T, PushSubscriptionUpsertArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PushSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionCountArgs} args - Arguments to filter PushSubscriptions to count.
     * @example
     * // Count the number of PushSubscriptions
     * const count = await prisma.pushSubscription.count({
     *   where: {
     *     // ... the filter for the PushSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends PushSubscriptionCountArgs>(
      args?: Subset<T, PushSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PushSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PushSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PushSubscriptionAggregateArgs>(args: Subset<T, PushSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetPushSubscriptionAggregateType<T>>

    /**
     * Group by PushSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PushSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PushSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: PushSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PushSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPushSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PushSubscription model
   */
  readonly fields: PushSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PushSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PushSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PushSubscription model
   */
  interface PushSubscriptionFieldRefs {
    readonly id: FieldRef<"PushSubscription", 'String'>
    readonly userId: FieldRef<"PushSubscription", 'String'>
    readonly endpoint: FieldRef<"PushSubscription", 'String'>
    readonly p256dhKey: FieldRef<"PushSubscription", 'String'>
    readonly authKey: FieldRef<"PushSubscription", 'String'>
    readonly createdAt: FieldRef<"PushSubscription", 'DateTime'>
    readonly updatedAt: FieldRef<"PushSubscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PushSubscription findUnique
   */
  export type PushSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which PushSubscription to fetch.
     */
    where: PushSubscriptionWhereUniqueInput
  }

  /**
   * PushSubscription findUniqueOrThrow
   */
  export type PushSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which PushSubscription to fetch.
     */
    where: PushSubscriptionWhereUniqueInput
  }

  /**
   * PushSubscription findFirst
   */
  export type PushSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which PushSubscription to fetch.
     */
    where?: PushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushSubscriptions to fetch.
     */
    orderBy?: PushSubscriptionOrderByWithRelationInput | PushSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PushSubscriptions.
     */
    cursor?: PushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PushSubscriptions.
     */
    distinct?: PushSubscriptionScalarFieldEnum | PushSubscriptionScalarFieldEnum[]
  }

  /**
   * PushSubscription findFirstOrThrow
   */
  export type PushSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which PushSubscription to fetch.
     */
    where?: PushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushSubscriptions to fetch.
     */
    orderBy?: PushSubscriptionOrderByWithRelationInput | PushSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PushSubscriptions.
     */
    cursor?: PushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PushSubscriptions.
     */
    distinct?: PushSubscriptionScalarFieldEnum | PushSubscriptionScalarFieldEnum[]
  }

  /**
   * PushSubscription findMany
   */
  export type PushSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which PushSubscriptions to fetch.
     */
    where?: PushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushSubscriptions to fetch.
     */
    orderBy?: PushSubscriptionOrderByWithRelationInput | PushSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PushSubscriptions.
     */
    cursor?: PushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushSubscriptions.
     */
    skip?: number
    distinct?: PushSubscriptionScalarFieldEnum | PushSubscriptionScalarFieldEnum[]
  }

  /**
   * PushSubscription create
   */
  export type PushSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a PushSubscription.
     */
    data: XOR<PushSubscriptionCreateInput, PushSubscriptionUncheckedCreateInput>
  }

  /**
   * PushSubscription createMany
   */
  export type PushSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PushSubscriptions.
     */
    data: PushSubscriptionCreateManyInput | PushSubscriptionCreateManyInput[]
  }

  /**
   * PushSubscription createManyAndReturn
   */
  export type PushSubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many PushSubscriptions.
     */
    data: PushSubscriptionCreateManyInput | PushSubscriptionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PushSubscription update
   */
  export type PushSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a PushSubscription.
     */
    data: XOR<PushSubscriptionUpdateInput, PushSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which PushSubscription to update.
     */
    where: PushSubscriptionWhereUniqueInput
  }

  /**
   * PushSubscription updateMany
   */
  export type PushSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PushSubscriptions.
     */
    data: XOR<PushSubscriptionUpdateManyMutationInput, PushSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which PushSubscriptions to update
     */
    where?: PushSubscriptionWhereInput
    /**
     * Limit how many PushSubscriptions to update.
     */
    limit?: number
  }

  /**
   * PushSubscription updateManyAndReturn
   */
  export type PushSubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update PushSubscriptions.
     */
    data: XOR<PushSubscriptionUpdateManyMutationInput, PushSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which PushSubscriptions to update
     */
    where?: PushSubscriptionWhereInput
    /**
     * Limit how many PushSubscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PushSubscription upsert
   */
  export type PushSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the PushSubscription to update in case it exists.
     */
    where: PushSubscriptionWhereUniqueInput
    /**
     * In case the PushSubscription found by the `where` argument doesn't exist, create a new PushSubscription with this data.
     */
    create: XOR<PushSubscriptionCreateInput, PushSubscriptionUncheckedCreateInput>
    /**
     * In case the PushSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PushSubscriptionUpdateInput, PushSubscriptionUncheckedUpdateInput>
  }

  /**
   * PushSubscription delete
   */
  export type PushSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which PushSubscription to delete.
     */
    where: PushSubscriptionWhereUniqueInput
  }

  /**
   * PushSubscription deleteMany
   */
  export type PushSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PushSubscriptions to delete
     */
    where?: PushSubscriptionWhereInput
    /**
     * Limit how many PushSubscriptions to delete.
     */
    limit?: number
  }

  /**
   * PushSubscription without action
   */
  export type PushSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushSubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model ShoppingItem
   */

  export type AggregateShoppingItem = {
    _count: ShoppingItemCountAggregateOutputType | null
    _avg: ShoppingItemAvgAggregateOutputType | null
    _sum: ShoppingItemSumAggregateOutputType | null
    _min: ShoppingItemMinAggregateOutputType | null
    _max: ShoppingItemMaxAggregateOutputType | null
  }

  export type ShoppingItemAvgAggregateOutputType = {
    price: number | null
    quantity: number | null
  }

  export type ShoppingItemSumAggregateOutputType = {
    price: number | null
    quantity: number | null
  }

  export type ShoppingItemMinAggregateOutputType = {
    id: string | null
    name: string | null
    presentation: string | null
    laboratory: string | null
    price: number | null
    quantity: number | null
    shoppingListId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShoppingItemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    presentation: string | null
    laboratory: string | null
    price: number | null
    quantity: number | null
    shoppingListId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShoppingItemCountAggregateOutputType = {
    id: number
    name: number
    presentation: number
    laboratory: number
    price: number
    quantity: number
    shoppingListId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShoppingItemAvgAggregateInputType = {
    price?: true
    quantity?: true
  }

  export type ShoppingItemSumAggregateInputType = {
    price?: true
    quantity?: true
  }

  export type ShoppingItemMinAggregateInputType = {
    id?: true
    name?: true
    presentation?: true
    laboratory?: true
    price?: true
    quantity?: true
    shoppingListId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShoppingItemMaxAggregateInputType = {
    id?: true
    name?: true
    presentation?: true
    laboratory?: true
    price?: true
    quantity?: true
    shoppingListId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShoppingItemCountAggregateInputType = {
    id?: true
    name?: true
    presentation?: true
    laboratory?: true
    price?: true
    quantity?: true
    shoppingListId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShoppingItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingItem to aggregate.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShoppingItems
    **/
    _count?: true | ShoppingItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShoppingItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShoppingItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShoppingItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShoppingItemMaxAggregateInputType
  }

  export type GetShoppingItemAggregateType<T extends ShoppingItemAggregateArgs> = {
        [P in keyof T & keyof AggregateShoppingItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShoppingItem[P]>
      : GetScalarType<T[P], AggregateShoppingItem[P]>
  }




  export type ShoppingItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingItemWhereInput
    orderBy?: ShoppingItemOrderByWithAggregationInput | ShoppingItemOrderByWithAggregationInput[]
    by: ShoppingItemScalarFieldEnum[] | ShoppingItemScalarFieldEnum
    having?: ShoppingItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShoppingItemCountAggregateInputType | true
    _avg?: ShoppingItemAvgAggregateInputType
    _sum?: ShoppingItemSumAggregateInputType
    _min?: ShoppingItemMinAggregateInputType
    _max?: ShoppingItemMaxAggregateInputType
  }

  export type ShoppingItemGroupByOutputType = {
    id: string
    name: string
    presentation: string | null
    laboratory: string | null
    price: number
    quantity: number
    shoppingListId: string
    createdAt: Date
    updatedAt: Date
    _count: ShoppingItemCountAggregateOutputType | null
    _avg: ShoppingItemAvgAggregateOutputType | null
    _sum: ShoppingItemSumAggregateOutputType | null
    _min: ShoppingItemMinAggregateOutputType | null
    _max: ShoppingItemMaxAggregateOutputType | null
  }

  type GetShoppingItemGroupByPayload<T extends ShoppingItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShoppingItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShoppingItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShoppingItemGroupByOutputType[P]>
            : GetScalarType<T[P], ShoppingItemGroupByOutputType[P]>
        }
      >
    >


  export type ShoppingItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    presentation?: boolean
    laboratory?: boolean
    price?: boolean
    quantity?: boolean
    shoppingListId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shoppingList?: boolean | ShoppingListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingItem"]>

  export type ShoppingItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    presentation?: boolean
    laboratory?: boolean
    price?: boolean
    quantity?: boolean
    shoppingListId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shoppingList?: boolean | ShoppingListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingItem"]>

  export type ShoppingItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    presentation?: boolean
    laboratory?: boolean
    price?: boolean
    quantity?: boolean
    shoppingListId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shoppingList?: boolean | ShoppingListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingItem"]>

  export type ShoppingItemSelectScalar = {
    id?: boolean
    name?: boolean
    presentation?: boolean
    laboratory?: boolean
    price?: boolean
    quantity?: boolean
    shoppingListId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShoppingItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "presentation" | "laboratory" | "price" | "quantity" | "shoppingListId" | "createdAt" | "updatedAt", ExtArgs["result"]["shoppingItem"]>
  export type ShoppingItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shoppingList?: boolean | ShoppingListDefaultArgs<ExtArgs>
  }
  export type ShoppingItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shoppingList?: boolean | ShoppingListDefaultArgs<ExtArgs>
  }
  export type ShoppingItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shoppingList?: boolean | ShoppingListDefaultArgs<ExtArgs>
  }

  export type $ShoppingItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShoppingItem"
    objects: {
      shoppingList: Prisma.$ShoppingListPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      presentation: string | null
      laboratory: string | null
      price: number
      quantity: number
      shoppingListId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shoppingItem"]>
    composites: {}
  }

  type ShoppingItemGetPayload<S extends boolean | null | undefined | ShoppingItemDefaultArgs> = $Result.GetResult<Prisma.$ShoppingItemPayload, S>

  type ShoppingItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShoppingItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShoppingItemCountAggregateInputType | true
    }

  export interface ShoppingItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShoppingItem'], meta: { name: 'ShoppingItem' } }
    /**
     * Find zero or one ShoppingItem that matches the filter.
     * @param {ShoppingItemFindUniqueArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShoppingItemFindUniqueArgs>(args: SelectSubset<T, ShoppingItemFindUniqueArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShoppingItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShoppingItemFindUniqueOrThrowArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShoppingItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ShoppingItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShoppingItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemFindFirstArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShoppingItemFindFirstArgs>(args?: SelectSubset<T, ShoppingItemFindFirstArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShoppingItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemFindFirstOrThrowArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShoppingItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ShoppingItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShoppingItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShoppingItems
     * const shoppingItems = await prisma.shoppingItem.findMany()
     * 
     * // Get first 10 ShoppingItems
     * const shoppingItems = await prisma.shoppingItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shoppingItemWithIdOnly = await prisma.shoppingItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShoppingItemFindManyArgs>(args?: SelectSubset<T, ShoppingItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShoppingItem.
     * @param {ShoppingItemCreateArgs} args - Arguments to create a ShoppingItem.
     * @example
     * // Create one ShoppingItem
     * const ShoppingItem = await prisma.shoppingItem.create({
     *   data: {
     *     // ... data to create a ShoppingItem
     *   }
     * })
     * 
     */
    create<T extends ShoppingItemCreateArgs>(args: SelectSubset<T, ShoppingItemCreateArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShoppingItems.
     * @param {ShoppingItemCreateManyArgs} args - Arguments to create many ShoppingItems.
     * @example
     * // Create many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShoppingItemCreateManyArgs>(args?: SelectSubset<T, ShoppingItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShoppingItems and returns the data saved in the database.
     * @param {ShoppingItemCreateManyAndReturnArgs} args - Arguments to create many ShoppingItems.
     * @example
     * // Create many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShoppingItems and only return the `id`
     * const shoppingItemWithIdOnly = await prisma.shoppingItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShoppingItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ShoppingItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShoppingItem.
     * @param {ShoppingItemDeleteArgs} args - Arguments to delete one ShoppingItem.
     * @example
     * // Delete one ShoppingItem
     * const ShoppingItem = await prisma.shoppingItem.delete({
     *   where: {
     *     // ... filter to delete one ShoppingItem
     *   }
     * })
     * 
     */
    delete<T extends ShoppingItemDeleteArgs>(args: SelectSubset<T, ShoppingItemDeleteArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShoppingItem.
     * @param {ShoppingItemUpdateArgs} args - Arguments to update one ShoppingItem.
     * @example
     * // Update one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShoppingItemUpdateArgs>(args: SelectSubset<T, ShoppingItemUpdateArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShoppingItems.
     * @param {ShoppingItemDeleteManyArgs} args - Arguments to filter ShoppingItems to delete.
     * @example
     * // Delete a few ShoppingItems
     * const { count } = await prisma.shoppingItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShoppingItemDeleteManyArgs>(args?: SelectSubset<T, ShoppingItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShoppingItemUpdateManyArgs>(args: SelectSubset<T, ShoppingItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingItems and returns the data updated in the database.
     * @param {ShoppingItemUpdateManyAndReturnArgs} args - Arguments to update many ShoppingItems.
     * @example
     * // Update many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShoppingItems and only return the `id`
     * const shoppingItemWithIdOnly = await prisma.shoppingItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShoppingItemUpdateManyAndReturnArgs>(args: SelectSubset<T, ShoppingItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShoppingItem.
     * @param {ShoppingItemUpsertArgs} args - Arguments to update or create a ShoppingItem.
     * @example
     * // Update or create a ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.upsert({
     *   create: {
     *     // ... data to create a ShoppingItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShoppingItem we want to update
     *   }
     * })
     */
    upsert<T extends ShoppingItemUpsertArgs>(args: SelectSubset<T, ShoppingItemUpsertArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShoppingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemCountArgs} args - Arguments to filter ShoppingItems to count.
     * @example
     * // Count the number of ShoppingItems
     * const count = await prisma.shoppingItem.count({
     *   where: {
     *     // ... the filter for the ShoppingItems we want to count
     *   }
     * })
    **/
    count<T extends ShoppingItemCountArgs>(
      args?: Subset<T, ShoppingItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShoppingItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShoppingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShoppingItemAggregateArgs>(args: Subset<T, ShoppingItemAggregateArgs>): Prisma.PrismaPromise<GetShoppingItemAggregateType<T>>

    /**
     * Group by ShoppingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShoppingItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShoppingItemGroupByArgs['orderBy'] }
        : { orderBy?: ShoppingItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShoppingItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShoppingItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShoppingItem model
   */
  readonly fields: ShoppingItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShoppingItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShoppingItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shoppingList<T extends ShoppingListDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShoppingListDefaultArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShoppingItem model
   */
  interface ShoppingItemFieldRefs {
    readonly id: FieldRef<"ShoppingItem", 'String'>
    readonly name: FieldRef<"ShoppingItem", 'String'>
    readonly presentation: FieldRef<"ShoppingItem", 'String'>
    readonly laboratory: FieldRef<"ShoppingItem", 'String'>
    readonly price: FieldRef<"ShoppingItem", 'Float'>
    readonly quantity: FieldRef<"ShoppingItem", 'Int'>
    readonly shoppingListId: FieldRef<"ShoppingItem", 'String'>
    readonly createdAt: FieldRef<"ShoppingItem", 'DateTime'>
    readonly updatedAt: FieldRef<"ShoppingItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShoppingItem findUnique
   */
  export type ShoppingItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem findUniqueOrThrow
   */
  export type ShoppingItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem findFirst
   */
  export type ShoppingItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingItems.
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingItems.
     */
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingItem findFirstOrThrow
   */
  export type ShoppingItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingItems.
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingItems.
     */
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingItem findMany
   */
  export type ShoppingItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItems to fetch.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShoppingItems.
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingItem create
   */
  export type ShoppingItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ShoppingItem.
     */
    data: XOR<ShoppingItemCreateInput, ShoppingItemUncheckedCreateInput>
  }

  /**
   * ShoppingItem createMany
   */
  export type ShoppingItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShoppingItems.
     */
    data: ShoppingItemCreateManyInput | ShoppingItemCreateManyInput[]
  }

  /**
   * ShoppingItem createManyAndReturn
   */
  export type ShoppingItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * The data used to create many ShoppingItems.
     */
    data: ShoppingItemCreateManyInput | ShoppingItemCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingItem update
   */
  export type ShoppingItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ShoppingItem.
     */
    data: XOR<ShoppingItemUpdateInput, ShoppingItemUncheckedUpdateInput>
    /**
     * Choose, which ShoppingItem to update.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem updateMany
   */
  export type ShoppingItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShoppingItems.
     */
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingItems to update
     */
    where?: ShoppingItemWhereInput
    /**
     * Limit how many ShoppingItems to update.
     */
    limit?: number
  }

  /**
   * ShoppingItem updateManyAndReturn
   */
  export type ShoppingItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * The data used to update ShoppingItems.
     */
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingItems to update
     */
    where?: ShoppingItemWhereInput
    /**
     * Limit how many ShoppingItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingItem upsert
   */
  export type ShoppingItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ShoppingItem to update in case it exists.
     */
    where: ShoppingItemWhereUniqueInput
    /**
     * In case the ShoppingItem found by the `where` argument doesn't exist, create a new ShoppingItem with this data.
     */
    create: XOR<ShoppingItemCreateInput, ShoppingItemUncheckedCreateInput>
    /**
     * In case the ShoppingItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShoppingItemUpdateInput, ShoppingItemUncheckedUpdateInput>
  }

  /**
   * ShoppingItem delete
   */
  export type ShoppingItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter which ShoppingItem to delete.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem deleteMany
   */
  export type ShoppingItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingItems to delete
     */
    where?: ShoppingItemWhereInput
    /**
     * Limit how many ShoppingItems to delete.
     */
    limit?: number
  }

  /**
   * ShoppingItem without action
   */
  export type ShoppingItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
  }


  /**
   * Model ShoppingList
   */

  export type AggregateShoppingList = {
    _count: ShoppingListCountAggregateOutputType | null
    _avg: ShoppingListAvgAggregateOutputType | null
    _sum: ShoppingListSumAggregateOutputType | null
    _min: ShoppingListMinAggregateOutputType | null
    _max: ShoppingListMaxAggregateOutputType | null
  }

  export type ShoppingListAvgAggregateOutputType = {
    total: number | null
  }

  export type ShoppingListSumAggregateOutputType = {
    total: number | null
  }

  export type ShoppingListMinAggregateOutputType = {
    id: string | null
    name: string | null
    total: number | null
    isArchived: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShoppingListMaxAggregateOutputType = {
    id: string | null
    name: string | null
    total: number | null
    isArchived: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShoppingListCountAggregateOutputType = {
    id: number
    name: number
    total: number
    isArchived: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShoppingListAvgAggregateInputType = {
    total?: true
  }

  export type ShoppingListSumAggregateInputType = {
    total?: true
  }

  export type ShoppingListMinAggregateInputType = {
    id?: true
    name?: true
    total?: true
    isArchived?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShoppingListMaxAggregateInputType = {
    id?: true
    name?: true
    total?: true
    isArchived?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShoppingListCountAggregateInputType = {
    id?: true
    name?: true
    total?: true
    isArchived?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShoppingListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingList to aggregate.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShoppingLists
    **/
    _count?: true | ShoppingListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShoppingListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShoppingListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShoppingListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShoppingListMaxAggregateInputType
  }

  export type GetShoppingListAggregateType<T extends ShoppingListAggregateArgs> = {
        [P in keyof T & keyof AggregateShoppingList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShoppingList[P]>
      : GetScalarType<T[P], AggregateShoppingList[P]>
  }




  export type ShoppingListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingListWhereInput
    orderBy?: ShoppingListOrderByWithAggregationInput | ShoppingListOrderByWithAggregationInput[]
    by: ShoppingListScalarFieldEnum[] | ShoppingListScalarFieldEnum
    having?: ShoppingListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShoppingListCountAggregateInputType | true
    _avg?: ShoppingListAvgAggregateInputType
    _sum?: ShoppingListSumAggregateInputType
    _min?: ShoppingListMinAggregateInputType
    _max?: ShoppingListMaxAggregateInputType
  }

  export type ShoppingListGroupByOutputType = {
    id: string
    name: string
    total: number
    isArchived: boolean
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: ShoppingListCountAggregateOutputType | null
    _avg: ShoppingListAvgAggregateOutputType | null
    _sum: ShoppingListSumAggregateOutputType | null
    _min: ShoppingListMinAggregateOutputType | null
    _max: ShoppingListMaxAggregateOutputType | null
  }

  type GetShoppingListGroupByPayload<T extends ShoppingListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShoppingListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShoppingListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShoppingListGroupByOutputType[P]>
            : GetScalarType<T[P], ShoppingListGroupByOutputType[P]>
        }
      >
    >


  export type ShoppingListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    total?: boolean
    isArchived?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    items?: boolean | ShoppingList$itemsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ShoppingListCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingList"]>

  export type ShoppingListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    total?: boolean
    isArchived?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingList"]>

  export type ShoppingListSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    total?: boolean
    isArchived?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingList"]>

  export type ShoppingListSelectScalar = {
    id?: boolean
    name?: boolean
    total?: boolean
    isArchived?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShoppingListOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "total" | "isArchived" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["shoppingList"]>
  export type ShoppingListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ShoppingList$itemsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ShoppingListCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShoppingListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShoppingListIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ShoppingListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShoppingList"
    objects: {
      items: Prisma.$ShoppingItemPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      total: number
      isArchived: boolean
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shoppingList"]>
    composites: {}
  }

  type ShoppingListGetPayload<S extends boolean | null | undefined | ShoppingListDefaultArgs> = $Result.GetResult<Prisma.$ShoppingListPayload, S>

  type ShoppingListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShoppingListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShoppingListCountAggregateInputType | true
    }

  export interface ShoppingListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShoppingList'], meta: { name: 'ShoppingList' } }
    /**
     * Find zero or one ShoppingList that matches the filter.
     * @param {ShoppingListFindUniqueArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShoppingListFindUniqueArgs>(args: SelectSubset<T, ShoppingListFindUniqueArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShoppingList that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShoppingListFindUniqueOrThrowArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShoppingListFindUniqueOrThrowArgs>(args: SelectSubset<T, ShoppingListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShoppingList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindFirstArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShoppingListFindFirstArgs>(args?: SelectSubset<T, ShoppingListFindFirstArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShoppingList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindFirstOrThrowArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShoppingListFindFirstOrThrowArgs>(args?: SelectSubset<T, ShoppingListFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShoppingLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShoppingLists
     * const shoppingLists = await prisma.shoppingList.findMany()
     * 
     * // Get first 10 ShoppingLists
     * const shoppingLists = await prisma.shoppingList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shoppingListWithIdOnly = await prisma.shoppingList.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShoppingListFindManyArgs>(args?: SelectSubset<T, ShoppingListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShoppingList.
     * @param {ShoppingListCreateArgs} args - Arguments to create a ShoppingList.
     * @example
     * // Create one ShoppingList
     * const ShoppingList = await prisma.shoppingList.create({
     *   data: {
     *     // ... data to create a ShoppingList
     *   }
     * })
     * 
     */
    create<T extends ShoppingListCreateArgs>(args: SelectSubset<T, ShoppingListCreateArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShoppingLists.
     * @param {ShoppingListCreateManyArgs} args - Arguments to create many ShoppingLists.
     * @example
     * // Create many ShoppingLists
     * const shoppingList = await prisma.shoppingList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShoppingListCreateManyArgs>(args?: SelectSubset<T, ShoppingListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShoppingLists and returns the data saved in the database.
     * @param {ShoppingListCreateManyAndReturnArgs} args - Arguments to create many ShoppingLists.
     * @example
     * // Create many ShoppingLists
     * const shoppingList = await prisma.shoppingList.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShoppingLists and only return the `id`
     * const shoppingListWithIdOnly = await prisma.shoppingList.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShoppingListCreateManyAndReturnArgs>(args?: SelectSubset<T, ShoppingListCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShoppingList.
     * @param {ShoppingListDeleteArgs} args - Arguments to delete one ShoppingList.
     * @example
     * // Delete one ShoppingList
     * const ShoppingList = await prisma.shoppingList.delete({
     *   where: {
     *     // ... filter to delete one ShoppingList
     *   }
     * })
     * 
     */
    delete<T extends ShoppingListDeleteArgs>(args: SelectSubset<T, ShoppingListDeleteArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShoppingList.
     * @param {ShoppingListUpdateArgs} args - Arguments to update one ShoppingList.
     * @example
     * // Update one ShoppingList
     * const shoppingList = await prisma.shoppingList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShoppingListUpdateArgs>(args: SelectSubset<T, ShoppingListUpdateArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShoppingLists.
     * @param {ShoppingListDeleteManyArgs} args - Arguments to filter ShoppingLists to delete.
     * @example
     * // Delete a few ShoppingLists
     * const { count } = await prisma.shoppingList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShoppingListDeleteManyArgs>(args?: SelectSubset<T, ShoppingListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShoppingLists
     * const shoppingList = await prisma.shoppingList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShoppingListUpdateManyArgs>(args: SelectSubset<T, ShoppingListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingLists and returns the data updated in the database.
     * @param {ShoppingListUpdateManyAndReturnArgs} args - Arguments to update many ShoppingLists.
     * @example
     * // Update many ShoppingLists
     * const shoppingList = await prisma.shoppingList.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShoppingLists and only return the `id`
     * const shoppingListWithIdOnly = await prisma.shoppingList.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShoppingListUpdateManyAndReturnArgs>(args: SelectSubset<T, ShoppingListUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShoppingList.
     * @param {ShoppingListUpsertArgs} args - Arguments to update or create a ShoppingList.
     * @example
     * // Update or create a ShoppingList
     * const shoppingList = await prisma.shoppingList.upsert({
     *   create: {
     *     // ... data to create a ShoppingList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShoppingList we want to update
     *   }
     * })
     */
    upsert<T extends ShoppingListUpsertArgs>(args: SelectSubset<T, ShoppingListUpsertArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShoppingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListCountArgs} args - Arguments to filter ShoppingLists to count.
     * @example
     * // Count the number of ShoppingLists
     * const count = await prisma.shoppingList.count({
     *   where: {
     *     // ... the filter for the ShoppingLists we want to count
     *   }
     * })
    **/
    count<T extends ShoppingListCountArgs>(
      args?: Subset<T, ShoppingListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShoppingListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShoppingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShoppingListAggregateArgs>(args: Subset<T, ShoppingListAggregateArgs>): Prisma.PrismaPromise<GetShoppingListAggregateType<T>>

    /**
     * Group by ShoppingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShoppingListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShoppingListGroupByArgs['orderBy'] }
        : { orderBy?: ShoppingListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShoppingListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShoppingListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShoppingList model
   */
  readonly fields: ShoppingListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShoppingList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShoppingListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends ShoppingList$itemsArgs<ExtArgs> = {}>(args?: Subset<T, ShoppingList$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShoppingList model
   */
  interface ShoppingListFieldRefs {
    readonly id: FieldRef<"ShoppingList", 'String'>
    readonly name: FieldRef<"ShoppingList", 'String'>
    readonly total: FieldRef<"ShoppingList", 'Float'>
    readonly isArchived: FieldRef<"ShoppingList", 'Boolean'>
    readonly userId: FieldRef<"ShoppingList", 'String'>
    readonly createdAt: FieldRef<"ShoppingList", 'DateTime'>
    readonly updatedAt: FieldRef<"ShoppingList", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShoppingList findUnique
   */
  export type ShoppingListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList findUniqueOrThrow
   */
  export type ShoppingListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList findFirst
   */
  export type ShoppingListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingLists.
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingLists.
     */
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * ShoppingList findFirstOrThrow
   */
  export type ShoppingListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingLists.
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingLists.
     */
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * ShoppingList findMany
   */
  export type ShoppingListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingLists to fetch.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShoppingLists.
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * ShoppingList create
   */
  export type ShoppingListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * The data needed to create a ShoppingList.
     */
    data: XOR<ShoppingListCreateInput, ShoppingListUncheckedCreateInput>
  }

  /**
   * ShoppingList createMany
   */
  export type ShoppingListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShoppingLists.
     */
    data: ShoppingListCreateManyInput | ShoppingListCreateManyInput[]
  }

  /**
   * ShoppingList createManyAndReturn
   */
  export type ShoppingListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * The data used to create many ShoppingLists.
     */
    data: ShoppingListCreateManyInput | ShoppingListCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingList update
   */
  export type ShoppingListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * The data needed to update a ShoppingList.
     */
    data: XOR<ShoppingListUpdateInput, ShoppingListUncheckedUpdateInput>
    /**
     * Choose, which ShoppingList to update.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList updateMany
   */
  export type ShoppingListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShoppingLists.
     */
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingLists to update
     */
    where?: ShoppingListWhereInput
    /**
     * Limit how many ShoppingLists to update.
     */
    limit?: number
  }

  /**
   * ShoppingList updateManyAndReturn
   */
  export type ShoppingListUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * The data used to update ShoppingLists.
     */
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingLists to update
     */
    where?: ShoppingListWhereInput
    /**
     * Limit how many ShoppingLists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingList upsert
   */
  export type ShoppingListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * The filter to search for the ShoppingList to update in case it exists.
     */
    where: ShoppingListWhereUniqueInput
    /**
     * In case the ShoppingList found by the `where` argument doesn't exist, create a new ShoppingList with this data.
     */
    create: XOR<ShoppingListCreateInput, ShoppingListUncheckedCreateInput>
    /**
     * In case the ShoppingList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShoppingListUpdateInput, ShoppingListUncheckedUpdateInput>
  }

  /**
   * ShoppingList delete
   */
  export type ShoppingListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter which ShoppingList to delete.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList deleteMany
   */
  export type ShoppingListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingLists to delete
     */
    where?: ShoppingListWhereInput
    /**
     * Limit how many ShoppingLists to delete.
     */
    limit?: number
  }

  /**
   * ShoppingList.items
   */
  export type ShoppingList$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    where?: ShoppingItemWhereInput
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    cursor?: ShoppingItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingList without action
   */
  export type ShoppingListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
  }


  /**
   * Model GrupoFamiliar
   */

  export type AggregateGrupoFamiliar = {
    _count: GrupoFamiliarCountAggregateOutputType | null
    _min: GrupoFamiliarMinAggregateOutputType | null
    _max: GrupoFamiliarMaxAggregateOutputType | null
  }

  export type GrupoFamiliarMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    creadorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GrupoFamiliarMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    creadorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GrupoFamiliarCountAggregateOutputType = {
    id: number
    nombre: number
    creadorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GrupoFamiliarMinAggregateInputType = {
    id?: true
    nombre?: true
    creadorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GrupoFamiliarMaxAggregateInputType = {
    id?: true
    nombre?: true
    creadorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GrupoFamiliarCountAggregateInputType = {
    id?: true
    nombre?: true
    creadorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GrupoFamiliarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrupoFamiliar to aggregate.
     */
    where?: GrupoFamiliarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrupoFamiliars to fetch.
     */
    orderBy?: GrupoFamiliarOrderByWithRelationInput | GrupoFamiliarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrupoFamiliarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrupoFamiliars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrupoFamiliars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GrupoFamiliars
    **/
    _count?: true | GrupoFamiliarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrupoFamiliarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrupoFamiliarMaxAggregateInputType
  }

  export type GetGrupoFamiliarAggregateType<T extends GrupoFamiliarAggregateArgs> = {
        [P in keyof T & keyof AggregateGrupoFamiliar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrupoFamiliar[P]>
      : GetScalarType<T[P], AggregateGrupoFamiliar[P]>
  }




  export type GrupoFamiliarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrupoFamiliarWhereInput
    orderBy?: GrupoFamiliarOrderByWithAggregationInput | GrupoFamiliarOrderByWithAggregationInput[]
    by: GrupoFamiliarScalarFieldEnum[] | GrupoFamiliarScalarFieldEnum
    having?: GrupoFamiliarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrupoFamiliarCountAggregateInputType | true
    _min?: GrupoFamiliarMinAggregateInputType
    _max?: GrupoFamiliarMaxAggregateInputType
  }

  export type GrupoFamiliarGroupByOutputType = {
    id: string
    nombre: string
    creadorId: string
    createdAt: Date
    updatedAt: Date
    _count: GrupoFamiliarCountAggregateOutputType | null
    _min: GrupoFamiliarMinAggregateOutputType | null
    _max: GrupoFamiliarMaxAggregateOutputType | null
  }

  type GetGrupoFamiliarGroupByPayload<T extends GrupoFamiliarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrupoFamiliarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrupoFamiliarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrupoFamiliarGroupByOutputType[P]>
            : GetScalarType<T[P], GrupoFamiliarGroupByOutputType[P]>
        }
      >
    >


  export type GrupoFamiliarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    creadorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creador?: boolean | UserDefaultArgs<ExtArgs>
    integrantes?: boolean | GrupoFamiliar$integrantesArgs<ExtArgs>
    perfilesMenores?: boolean | GrupoFamiliar$perfilesMenoresArgs<ExtArgs>
    tomas?: boolean | GrupoFamiliar$tomasArgs<ExtArgs>
    _count?: boolean | GrupoFamiliarCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grupoFamiliar"]>

  export type GrupoFamiliarSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    creadorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creador?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grupoFamiliar"]>

  export type GrupoFamiliarSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    creadorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creador?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grupoFamiliar"]>

  export type GrupoFamiliarSelectScalar = {
    id?: boolean
    nombre?: boolean
    creadorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GrupoFamiliarOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "creadorId" | "createdAt" | "updatedAt", ExtArgs["result"]["grupoFamiliar"]>
  export type GrupoFamiliarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creador?: boolean | UserDefaultArgs<ExtArgs>
    integrantes?: boolean | GrupoFamiliar$integrantesArgs<ExtArgs>
    perfilesMenores?: boolean | GrupoFamiliar$perfilesMenoresArgs<ExtArgs>
    tomas?: boolean | GrupoFamiliar$tomasArgs<ExtArgs>
    _count?: boolean | GrupoFamiliarCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GrupoFamiliarIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creador?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GrupoFamiliarIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creador?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GrupoFamiliarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GrupoFamiliar"
    objects: {
      creador: Prisma.$UserPayload<ExtArgs>
      integrantes: Prisma.$UserPayload<ExtArgs>[]
      perfilesMenores: Prisma.$PerfilMenorPayload<ExtArgs>[]
      tomas: Prisma.$TomaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      creadorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["grupoFamiliar"]>
    composites: {}
  }

  type GrupoFamiliarGetPayload<S extends boolean | null | undefined | GrupoFamiliarDefaultArgs> = $Result.GetResult<Prisma.$GrupoFamiliarPayload, S>

  type GrupoFamiliarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GrupoFamiliarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GrupoFamiliarCountAggregateInputType | true
    }

  export interface GrupoFamiliarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GrupoFamiliar'], meta: { name: 'GrupoFamiliar' } }
    /**
     * Find zero or one GrupoFamiliar that matches the filter.
     * @param {GrupoFamiliarFindUniqueArgs} args - Arguments to find a GrupoFamiliar
     * @example
     * // Get one GrupoFamiliar
     * const grupoFamiliar = await prisma.grupoFamiliar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GrupoFamiliarFindUniqueArgs>(args: SelectSubset<T, GrupoFamiliarFindUniqueArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GrupoFamiliar that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GrupoFamiliarFindUniqueOrThrowArgs} args - Arguments to find a GrupoFamiliar
     * @example
     * // Get one GrupoFamiliar
     * const grupoFamiliar = await prisma.grupoFamiliar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GrupoFamiliarFindUniqueOrThrowArgs>(args: SelectSubset<T, GrupoFamiliarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GrupoFamiliar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoFamiliarFindFirstArgs} args - Arguments to find a GrupoFamiliar
     * @example
     * // Get one GrupoFamiliar
     * const grupoFamiliar = await prisma.grupoFamiliar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GrupoFamiliarFindFirstArgs>(args?: SelectSubset<T, GrupoFamiliarFindFirstArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GrupoFamiliar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoFamiliarFindFirstOrThrowArgs} args - Arguments to find a GrupoFamiliar
     * @example
     * // Get one GrupoFamiliar
     * const grupoFamiliar = await prisma.grupoFamiliar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GrupoFamiliarFindFirstOrThrowArgs>(args?: SelectSubset<T, GrupoFamiliarFindFirstOrThrowArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GrupoFamiliars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoFamiliarFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GrupoFamiliars
     * const grupoFamiliars = await prisma.grupoFamiliar.findMany()
     * 
     * // Get first 10 GrupoFamiliars
     * const grupoFamiliars = await prisma.grupoFamiliar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grupoFamiliarWithIdOnly = await prisma.grupoFamiliar.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GrupoFamiliarFindManyArgs>(args?: SelectSubset<T, GrupoFamiliarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GrupoFamiliar.
     * @param {GrupoFamiliarCreateArgs} args - Arguments to create a GrupoFamiliar.
     * @example
     * // Create one GrupoFamiliar
     * const GrupoFamiliar = await prisma.grupoFamiliar.create({
     *   data: {
     *     // ... data to create a GrupoFamiliar
     *   }
     * })
     * 
     */
    create<T extends GrupoFamiliarCreateArgs>(args: SelectSubset<T, GrupoFamiliarCreateArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GrupoFamiliars.
     * @param {GrupoFamiliarCreateManyArgs} args - Arguments to create many GrupoFamiliars.
     * @example
     * // Create many GrupoFamiliars
     * const grupoFamiliar = await prisma.grupoFamiliar.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GrupoFamiliarCreateManyArgs>(args?: SelectSubset<T, GrupoFamiliarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GrupoFamiliars and returns the data saved in the database.
     * @param {GrupoFamiliarCreateManyAndReturnArgs} args - Arguments to create many GrupoFamiliars.
     * @example
     * // Create many GrupoFamiliars
     * const grupoFamiliar = await prisma.grupoFamiliar.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GrupoFamiliars and only return the `id`
     * const grupoFamiliarWithIdOnly = await prisma.grupoFamiliar.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GrupoFamiliarCreateManyAndReturnArgs>(args?: SelectSubset<T, GrupoFamiliarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GrupoFamiliar.
     * @param {GrupoFamiliarDeleteArgs} args - Arguments to delete one GrupoFamiliar.
     * @example
     * // Delete one GrupoFamiliar
     * const GrupoFamiliar = await prisma.grupoFamiliar.delete({
     *   where: {
     *     // ... filter to delete one GrupoFamiliar
     *   }
     * })
     * 
     */
    delete<T extends GrupoFamiliarDeleteArgs>(args: SelectSubset<T, GrupoFamiliarDeleteArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GrupoFamiliar.
     * @param {GrupoFamiliarUpdateArgs} args - Arguments to update one GrupoFamiliar.
     * @example
     * // Update one GrupoFamiliar
     * const grupoFamiliar = await prisma.grupoFamiliar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GrupoFamiliarUpdateArgs>(args: SelectSubset<T, GrupoFamiliarUpdateArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GrupoFamiliars.
     * @param {GrupoFamiliarDeleteManyArgs} args - Arguments to filter GrupoFamiliars to delete.
     * @example
     * // Delete a few GrupoFamiliars
     * const { count } = await prisma.grupoFamiliar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GrupoFamiliarDeleteManyArgs>(args?: SelectSubset<T, GrupoFamiliarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GrupoFamiliars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoFamiliarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GrupoFamiliars
     * const grupoFamiliar = await prisma.grupoFamiliar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GrupoFamiliarUpdateManyArgs>(args: SelectSubset<T, GrupoFamiliarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GrupoFamiliars and returns the data updated in the database.
     * @param {GrupoFamiliarUpdateManyAndReturnArgs} args - Arguments to update many GrupoFamiliars.
     * @example
     * // Update many GrupoFamiliars
     * const grupoFamiliar = await prisma.grupoFamiliar.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GrupoFamiliars and only return the `id`
     * const grupoFamiliarWithIdOnly = await prisma.grupoFamiliar.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GrupoFamiliarUpdateManyAndReturnArgs>(args: SelectSubset<T, GrupoFamiliarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GrupoFamiliar.
     * @param {GrupoFamiliarUpsertArgs} args - Arguments to update or create a GrupoFamiliar.
     * @example
     * // Update or create a GrupoFamiliar
     * const grupoFamiliar = await prisma.grupoFamiliar.upsert({
     *   create: {
     *     // ... data to create a GrupoFamiliar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GrupoFamiliar we want to update
     *   }
     * })
     */
    upsert<T extends GrupoFamiliarUpsertArgs>(args: SelectSubset<T, GrupoFamiliarUpsertArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GrupoFamiliars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoFamiliarCountArgs} args - Arguments to filter GrupoFamiliars to count.
     * @example
     * // Count the number of GrupoFamiliars
     * const count = await prisma.grupoFamiliar.count({
     *   where: {
     *     // ... the filter for the GrupoFamiliars we want to count
     *   }
     * })
    **/
    count<T extends GrupoFamiliarCountArgs>(
      args?: Subset<T, GrupoFamiliarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrupoFamiliarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GrupoFamiliar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoFamiliarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrupoFamiliarAggregateArgs>(args: Subset<T, GrupoFamiliarAggregateArgs>): Prisma.PrismaPromise<GetGrupoFamiliarAggregateType<T>>

    /**
     * Group by GrupoFamiliar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoFamiliarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrupoFamiliarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrupoFamiliarGroupByArgs['orderBy'] }
        : { orderBy?: GrupoFamiliarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrupoFamiliarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrupoFamiliarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GrupoFamiliar model
   */
  readonly fields: GrupoFamiliarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GrupoFamiliar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrupoFamiliarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creador<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    integrantes<T extends GrupoFamiliar$integrantesArgs<ExtArgs> = {}>(args?: Subset<T, GrupoFamiliar$integrantesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    perfilesMenores<T extends GrupoFamiliar$perfilesMenoresArgs<ExtArgs> = {}>(args?: Subset<T, GrupoFamiliar$perfilesMenoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tomas<T extends GrupoFamiliar$tomasArgs<ExtArgs> = {}>(args?: Subset<T, GrupoFamiliar$tomasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GrupoFamiliar model
   */
  interface GrupoFamiliarFieldRefs {
    readonly id: FieldRef<"GrupoFamiliar", 'String'>
    readonly nombre: FieldRef<"GrupoFamiliar", 'String'>
    readonly creadorId: FieldRef<"GrupoFamiliar", 'String'>
    readonly createdAt: FieldRef<"GrupoFamiliar", 'DateTime'>
    readonly updatedAt: FieldRef<"GrupoFamiliar", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GrupoFamiliar findUnique
   */
  export type GrupoFamiliarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    /**
     * Filter, which GrupoFamiliar to fetch.
     */
    where: GrupoFamiliarWhereUniqueInput
  }

  /**
   * GrupoFamiliar findUniqueOrThrow
   */
  export type GrupoFamiliarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    /**
     * Filter, which GrupoFamiliar to fetch.
     */
    where: GrupoFamiliarWhereUniqueInput
  }

  /**
   * GrupoFamiliar findFirst
   */
  export type GrupoFamiliarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    /**
     * Filter, which GrupoFamiliar to fetch.
     */
    where?: GrupoFamiliarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrupoFamiliars to fetch.
     */
    orderBy?: GrupoFamiliarOrderByWithRelationInput | GrupoFamiliarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrupoFamiliars.
     */
    cursor?: GrupoFamiliarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrupoFamiliars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrupoFamiliars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrupoFamiliars.
     */
    distinct?: GrupoFamiliarScalarFieldEnum | GrupoFamiliarScalarFieldEnum[]
  }

  /**
   * GrupoFamiliar findFirstOrThrow
   */
  export type GrupoFamiliarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    /**
     * Filter, which GrupoFamiliar to fetch.
     */
    where?: GrupoFamiliarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrupoFamiliars to fetch.
     */
    orderBy?: GrupoFamiliarOrderByWithRelationInput | GrupoFamiliarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrupoFamiliars.
     */
    cursor?: GrupoFamiliarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrupoFamiliars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrupoFamiliars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrupoFamiliars.
     */
    distinct?: GrupoFamiliarScalarFieldEnum | GrupoFamiliarScalarFieldEnum[]
  }

  /**
   * GrupoFamiliar findMany
   */
  export type GrupoFamiliarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    /**
     * Filter, which GrupoFamiliars to fetch.
     */
    where?: GrupoFamiliarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrupoFamiliars to fetch.
     */
    orderBy?: GrupoFamiliarOrderByWithRelationInput | GrupoFamiliarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GrupoFamiliars.
     */
    cursor?: GrupoFamiliarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrupoFamiliars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrupoFamiliars.
     */
    skip?: number
    distinct?: GrupoFamiliarScalarFieldEnum | GrupoFamiliarScalarFieldEnum[]
  }

  /**
   * GrupoFamiliar create
   */
  export type GrupoFamiliarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    /**
     * The data needed to create a GrupoFamiliar.
     */
    data: XOR<GrupoFamiliarCreateInput, GrupoFamiliarUncheckedCreateInput>
  }

  /**
   * GrupoFamiliar createMany
   */
  export type GrupoFamiliarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GrupoFamiliars.
     */
    data: GrupoFamiliarCreateManyInput | GrupoFamiliarCreateManyInput[]
  }

  /**
   * GrupoFamiliar createManyAndReturn
   */
  export type GrupoFamiliarCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * The data used to create many GrupoFamiliars.
     */
    data: GrupoFamiliarCreateManyInput | GrupoFamiliarCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GrupoFamiliar update
   */
  export type GrupoFamiliarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    /**
     * The data needed to update a GrupoFamiliar.
     */
    data: XOR<GrupoFamiliarUpdateInput, GrupoFamiliarUncheckedUpdateInput>
    /**
     * Choose, which GrupoFamiliar to update.
     */
    where: GrupoFamiliarWhereUniqueInput
  }

  /**
   * GrupoFamiliar updateMany
   */
  export type GrupoFamiliarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GrupoFamiliars.
     */
    data: XOR<GrupoFamiliarUpdateManyMutationInput, GrupoFamiliarUncheckedUpdateManyInput>
    /**
     * Filter which GrupoFamiliars to update
     */
    where?: GrupoFamiliarWhereInput
    /**
     * Limit how many GrupoFamiliars to update.
     */
    limit?: number
  }

  /**
   * GrupoFamiliar updateManyAndReturn
   */
  export type GrupoFamiliarUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * The data used to update GrupoFamiliars.
     */
    data: XOR<GrupoFamiliarUpdateManyMutationInput, GrupoFamiliarUncheckedUpdateManyInput>
    /**
     * Filter which GrupoFamiliars to update
     */
    where?: GrupoFamiliarWhereInput
    /**
     * Limit how many GrupoFamiliars to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GrupoFamiliar upsert
   */
  export type GrupoFamiliarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    /**
     * The filter to search for the GrupoFamiliar to update in case it exists.
     */
    where: GrupoFamiliarWhereUniqueInput
    /**
     * In case the GrupoFamiliar found by the `where` argument doesn't exist, create a new GrupoFamiliar with this data.
     */
    create: XOR<GrupoFamiliarCreateInput, GrupoFamiliarUncheckedCreateInput>
    /**
     * In case the GrupoFamiliar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrupoFamiliarUpdateInput, GrupoFamiliarUncheckedUpdateInput>
  }

  /**
   * GrupoFamiliar delete
   */
  export type GrupoFamiliarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
    /**
     * Filter which GrupoFamiliar to delete.
     */
    where: GrupoFamiliarWhereUniqueInput
  }

  /**
   * GrupoFamiliar deleteMany
   */
  export type GrupoFamiliarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrupoFamiliars to delete
     */
    where?: GrupoFamiliarWhereInput
    /**
     * Limit how many GrupoFamiliars to delete.
     */
    limit?: number
  }

  /**
   * GrupoFamiliar.integrantes
   */
  export type GrupoFamiliar$integrantesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * GrupoFamiliar.perfilesMenores
   */
  export type GrupoFamiliar$perfilesMenoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    where?: PerfilMenorWhereInput
    orderBy?: PerfilMenorOrderByWithRelationInput | PerfilMenorOrderByWithRelationInput[]
    cursor?: PerfilMenorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerfilMenorScalarFieldEnum | PerfilMenorScalarFieldEnum[]
  }

  /**
   * GrupoFamiliar.tomas
   */
  export type GrupoFamiliar$tomasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    where?: TomaWhereInput
    orderBy?: TomaOrderByWithRelationInput | TomaOrderByWithRelationInput[]
    cursor?: TomaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TomaScalarFieldEnum | TomaScalarFieldEnum[]
  }

  /**
   * GrupoFamiliar without action
   */
  export type GrupoFamiliarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrupoFamiliar
     */
    select?: GrupoFamiliarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GrupoFamiliar
     */
    omit?: GrupoFamiliarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrupoFamiliarInclude<ExtArgs> | null
  }


  /**
   * Model PerfilMenor
   */

  export type AggregatePerfilMenor = {
    _count: PerfilMenorCountAggregateOutputType | null
    _min: PerfilMenorMinAggregateOutputType | null
    _max: PerfilMenorMaxAggregateOutputType | null
  }

  export type PerfilMenorMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    dni: string | null
    fechaNacimiento: Date | null
    foto: string | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PerfilMenorMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    dni: string | null
    fechaNacimiento: Date | null
    foto: string | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PerfilMenorCountAggregateOutputType = {
    id: number
    nombre: number
    dni: number
    fechaNacimiento: number
    foto: number
    grupoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PerfilMenorMinAggregateInputType = {
    id?: true
    nombre?: true
    dni?: true
    fechaNacimiento?: true
    foto?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PerfilMenorMaxAggregateInputType = {
    id?: true
    nombre?: true
    dni?: true
    fechaNacimiento?: true
    foto?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PerfilMenorCountAggregateInputType = {
    id?: true
    nombre?: true
    dni?: true
    fechaNacimiento?: true
    foto?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PerfilMenorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerfilMenor to aggregate.
     */
    where?: PerfilMenorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerfilMenors to fetch.
     */
    orderBy?: PerfilMenorOrderByWithRelationInput | PerfilMenorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerfilMenorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerfilMenors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerfilMenors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PerfilMenors
    **/
    _count?: true | PerfilMenorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerfilMenorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerfilMenorMaxAggregateInputType
  }

  export type GetPerfilMenorAggregateType<T extends PerfilMenorAggregateArgs> = {
        [P in keyof T & keyof AggregatePerfilMenor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerfilMenor[P]>
      : GetScalarType<T[P], AggregatePerfilMenor[P]>
  }




  export type PerfilMenorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerfilMenorWhereInput
    orderBy?: PerfilMenorOrderByWithAggregationInput | PerfilMenorOrderByWithAggregationInput[]
    by: PerfilMenorScalarFieldEnum[] | PerfilMenorScalarFieldEnum
    having?: PerfilMenorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerfilMenorCountAggregateInputType | true
    _min?: PerfilMenorMinAggregateInputType
    _max?: PerfilMenorMaxAggregateInputType
  }

  export type PerfilMenorGroupByOutputType = {
    id: string
    nombre: string
    dni: string
    fechaNacimiento: Date
    foto: string | null
    grupoId: string
    createdAt: Date
    updatedAt: Date
    _count: PerfilMenorCountAggregateOutputType | null
    _min: PerfilMenorMinAggregateOutputType | null
    _max: PerfilMenorMaxAggregateOutputType | null
  }

  type GetPerfilMenorGroupByPayload<T extends PerfilMenorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerfilMenorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerfilMenorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerfilMenorGroupByOutputType[P]>
            : GetScalarType<T[P], PerfilMenorGroupByOutputType[P]>
        }
      >
    >


  export type PerfilMenorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    dni?: boolean
    fechaNacimiento?: boolean
    foto?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
    tomas?: boolean | PerfilMenor$tomasArgs<ExtArgs>
    _count?: boolean | PerfilMenorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["perfilMenor"]>

  export type PerfilMenorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    dni?: boolean
    fechaNacimiento?: boolean
    foto?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["perfilMenor"]>

  export type PerfilMenorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    dni?: boolean
    fechaNacimiento?: boolean
    foto?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["perfilMenor"]>

  export type PerfilMenorSelectScalar = {
    id?: boolean
    nombre?: boolean
    dni?: boolean
    fechaNacimiento?: boolean
    foto?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PerfilMenorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "dni" | "fechaNacimiento" | "foto" | "grupoId" | "createdAt" | "updatedAt", ExtArgs["result"]["perfilMenor"]>
  export type PerfilMenorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
    tomas?: boolean | PerfilMenor$tomasArgs<ExtArgs>
    _count?: boolean | PerfilMenorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PerfilMenorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
  }
  export type PerfilMenorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
  }

  export type $PerfilMenorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PerfilMenor"
    objects: {
      grupo: Prisma.$GrupoFamiliarPayload<ExtArgs>
      tomas: Prisma.$TomaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      dni: string
      fechaNacimiento: Date
      foto: string | null
      grupoId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["perfilMenor"]>
    composites: {}
  }

  type PerfilMenorGetPayload<S extends boolean | null | undefined | PerfilMenorDefaultArgs> = $Result.GetResult<Prisma.$PerfilMenorPayload, S>

  type PerfilMenorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PerfilMenorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PerfilMenorCountAggregateInputType | true
    }

  export interface PerfilMenorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PerfilMenor'], meta: { name: 'PerfilMenor' } }
    /**
     * Find zero or one PerfilMenor that matches the filter.
     * @param {PerfilMenorFindUniqueArgs} args - Arguments to find a PerfilMenor
     * @example
     * // Get one PerfilMenor
     * const perfilMenor = await prisma.perfilMenor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerfilMenorFindUniqueArgs>(args: SelectSubset<T, PerfilMenorFindUniqueArgs<ExtArgs>>): Prisma__PerfilMenorClient<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PerfilMenor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PerfilMenorFindUniqueOrThrowArgs} args - Arguments to find a PerfilMenor
     * @example
     * // Get one PerfilMenor
     * const perfilMenor = await prisma.perfilMenor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerfilMenorFindUniqueOrThrowArgs>(args: SelectSubset<T, PerfilMenorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerfilMenorClient<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerfilMenor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerfilMenorFindFirstArgs} args - Arguments to find a PerfilMenor
     * @example
     * // Get one PerfilMenor
     * const perfilMenor = await prisma.perfilMenor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerfilMenorFindFirstArgs>(args?: SelectSubset<T, PerfilMenorFindFirstArgs<ExtArgs>>): Prisma__PerfilMenorClient<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerfilMenor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerfilMenorFindFirstOrThrowArgs} args - Arguments to find a PerfilMenor
     * @example
     * // Get one PerfilMenor
     * const perfilMenor = await prisma.perfilMenor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerfilMenorFindFirstOrThrowArgs>(args?: SelectSubset<T, PerfilMenorFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerfilMenorClient<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PerfilMenors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerfilMenorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PerfilMenors
     * const perfilMenors = await prisma.perfilMenor.findMany()
     * 
     * // Get first 10 PerfilMenors
     * const perfilMenors = await prisma.perfilMenor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const perfilMenorWithIdOnly = await prisma.perfilMenor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PerfilMenorFindManyArgs>(args?: SelectSubset<T, PerfilMenorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PerfilMenor.
     * @param {PerfilMenorCreateArgs} args - Arguments to create a PerfilMenor.
     * @example
     * // Create one PerfilMenor
     * const PerfilMenor = await prisma.perfilMenor.create({
     *   data: {
     *     // ... data to create a PerfilMenor
     *   }
     * })
     * 
     */
    create<T extends PerfilMenorCreateArgs>(args: SelectSubset<T, PerfilMenorCreateArgs<ExtArgs>>): Prisma__PerfilMenorClient<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PerfilMenors.
     * @param {PerfilMenorCreateManyArgs} args - Arguments to create many PerfilMenors.
     * @example
     * // Create many PerfilMenors
     * const perfilMenor = await prisma.perfilMenor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerfilMenorCreateManyArgs>(args?: SelectSubset<T, PerfilMenorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PerfilMenors and returns the data saved in the database.
     * @param {PerfilMenorCreateManyAndReturnArgs} args - Arguments to create many PerfilMenors.
     * @example
     * // Create many PerfilMenors
     * const perfilMenor = await prisma.perfilMenor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PerfilMenors and only return the `id`
     * const perfilMenorWithIdOnly = await prisma.perfilMenor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PerfilMenorCreateManyAndReturnArgs>(args?: SelectSubset<T, PerfilMenorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PerfilMenor.
     * @param {PerfilMenorDeleteArgs} args - Arguments to delete one PerfilMenor.
     * @example
     * // Delete one PerfilMenor
     * const PerfilMenor = await prisma.perfilMenor.delete({
     *   where: {
     *     // ... filter to delete one PerfilMenor
     *   }
     * })
     * 
     */
    delete<T extends PerfilMenorDeleteArgs>(args: SelectSubset<T, PerfilMenorDeleteArgs<ExtArgs>>): Prisma__PerfilMenorClient<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PerfilMenor.
     * @param {PerfilMenorUpdateArgs} args - Arguments to update one PerfilMenor.
     * @example
     * // Update one PerfilMenor
     * const perfilMenor = await prisma.perfilMenor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerfilMenorUpdateArgs>(args: SelectSubset<T, PerfilMenorUpdateArgs<ExtArgs>>): Prisma__PerfilMenorClient<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PerfilMenors.
     * @param {PerfilMenorDeleteManyArgs} args - Arguments to filter PerfilMenors to delete.
     * @example
     * // Delete a few PerfilMenors
     * const { count } = await prisma.perfilMenor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerfilMenorDeleteManyArgs>(args?: SelectSubset<T, PerfilMenorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerfilMenors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerfilMenorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PerfilMenors
     * const perfilMenor = await prisma.perfilMenor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerfilMenorUpdateManyArgs>(args: SelectSubset<T, PerfilMenorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerfilMenors and returns the data updated in the database.
     * @param {PerfilMenorUpdateManyAndReturnArgs} args - Arguments to update many PerfilMenors.
     * @example
     * // Update many PerfilMenors
     * const perfilMenor = await prisma.perfilMenor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PerfilMenors and only return the `id`
     * const perfilMenorWithIdOnly = await prisma.perfilMenor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PerfilMenorUpdateManyAndReturnArgs>(args: SelectSubset<T, PerfilMenorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PerfilMenor.
     * @param {PerfilMenorUpsertArgs} args - Arguments to update or create a PerfilMenor.
     * @example
     * // Update or create a PerfilMenor
     * const perfilMenor = await prisma.perfilMenor.upsert({
     *   create: {
     *     // ... data to create a PerfilMenor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PerfilMenor we want to update
     *   }
     * })
     */
    upsert<T extends PerfilMenorUpsertArgs>(args: SelectSubset<T, PerfilMenorUpsertArgs<ExtArgs>>): Prisma__PerfilMenorClient<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PerfilMenors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerfilMenorCountArgs} args - Arguments to filter PerfilMenors to count.
     * @example
     * // Count the number of PerfilMenors
     * const count = await prisma.perfilMenor.count({
     *   where: {
     *     // ... the filter for the PerfilMenors we want to count
     *   }
     * })
    **/
    count<T extends PerfilMenorCountArgs>(
      args?: Subset<T, PerfilMenorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerfilMenorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PerfilMenor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerfilMenorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerfilMenorAggregateArgs>(args: Subset<T, PerfilMenorAggregateArgs>): Prisma.PrismaPromise<GetPerfilMenorAggregateType<T>>

    /**
     * Group by PerfilMenor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerfilMenorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerfilMenorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerfilMenorGroupByArgs['orderBy'] }
        : { orderBy?: PerfilMenorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerfilMenorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerfilMenorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PerfilMenor model
   */
  readonly fields: PerfilMenorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PerfilMenor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerfilMenorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grupo<T extends GrupoFamiliarDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrupoFamiliarDefaultArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tomas<T extends PerfilMenor$tomasArgs<ExtArgs> = {}>(args?: Subset<T, PerfilMenor$tomasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PerfilMenor model
   */
  interface PerfilMenorFieldRefs {
    readonly id: FieldRef<"PerfilMenor", 'String'>
    readonly nombre: FieldRef<"PerfilMenor", 'String'>
    readonly dni: FieldRef<"PerfilMenor", 'String'>
    readonly fechaNacimiento: FieldRef<"PerfilMenor", 'DateTime'>
    readonly foto: FieldRef<"PerfilMenor", 'String'>
    readonly grupoId: FieldRef<"PerfilMenor", 'String'>
    readonly createdAt: FieldRef<"PerfilMenor", 'DateTime'>
    readonly updatedAt: FieldRef<"PerfilMenor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PerfilMenor findUnique
   */
  export type PerfilMenorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    /**
     * Filter, which PerfilMenor to fetch.
     */
    where: PerfilMenorWhereUniqueInput
  }

  /**
   * PerfilMenor findUniqueOrThrow
   */
  export type PerfilMenorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    /**
     * Filter, which PerfilMenor to fetch.
     */
    where: PerfilMenorWhereUniqueInput
  }

  /**
   * PerfilMenor findFirst
   */
  export type PerfilMenorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    /**
     * Filter, which PerfilMenor to fetch.
     */
    where?: PerfilMenorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerfilMenors to fetch.
     */
    orderBy?: PerfilMenorOrderByWithRelationInput | PerfilMenorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerfilMenors.
     */
    cursor?: PerfilMenorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerfilMenors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerfilMenors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerfilMenors.
     */
    distinct?: PerfilMenorScalarFieldEnum | PerfilMenorScalarFieldEnum[]
  }

  /**
   * PerfilMenor findFirstOrThrow
   */
  export type PerfilMenorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    /**
     * Filter, which PerfilMenor to fetch.
     */
    where?: PerfilMenorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerfilMenors to fetch.
     */
    orderBy?: PerfilMenorOrderByWithRelationInput | PerfilMenorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerfilMenors.
     */
    cursor?: PerfilMenorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerfilMenors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerfilMenors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerfilMenors.
     */
    distinct?: PerfilMenorScalarFieldEnum | PerfilMenorScalarFieldEnum[]
  }

  /**
   * PerfilMenor findMany
   */
  export type PerfilMenorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    /**
     * Filter, which PerfilMenors to fetch.
     */
    where?: PerfilMenorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerfilMenors to fetch.
     */
    orderBy?: PerfilMenorOrderByWithRelationInput | PerfilMenorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PerfilMenors.
     */
    cursor?: PerfilMenorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerfilMenors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerfilMenors.
     */
    skip?: number
    distinct?: PerfilMenorScalarFieldEnum | PerfilMenorScalarFieldEnum[]
  }

  /**
   * PerfilMenor create
   */
  export type PerfilMenorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    /**
     * The data needed to create a PerfilMenor.
     */
    data: XOR<PerfilMenorCreateInput, PerfilMenorUncheckedCreateInput>
  }

  /**
   * PerfilMenor createMany
   */
  export type PerfilMenorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PerfilMenors.
     */
    data: PerfilMenorCreateManyInput | PerfilMenorCreateManyInput[]
  }

  /**
   * PerfilMenor createManyAndReturn
   */
  export type PerfilMenorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * The data used to create many PerfilMenors.
     */
    data: PerfilMenorCreateManyInput | PerfilMenorCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerfilMenor update
   */
  export type PerfilMenorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    /**
     * The data needed to update a PerfilMenor.
     */
    data: XOR<PerfilMenorUpdateInput, PerfilMenorUncheckedUpdateInput>
    /**
     * Choose, which PerfilMenor to update.
     */
    where: PerfilMenorWhereUniqueInput
  }

  /**
   * PerfilMenor updateMany
   */
  export type PerfilMenorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PerfilMenors.
     */
    data: XOR<PerfilMenorUpdateManyMutationInput, PerfilMenorUncheckedUpdateManyInput>
    /**
     * Filter which PerfilMenors to update
     */
    where?: PerfilMenorWhereInput
    /**
     * Limit how many PerfilMenors to update.
     */
    limit?: number
  }

  /**
   * PerfilMenor updateManyAndReturn
   */
  export type PerfilMenorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * The data used to update PerfilMenors.
     */
    data: XOR<PerfilMenorUpdateManyMutationInput, PerfilMenorUncheckedUpdateManyInput>
    /**
     * Filter which PerfilMenors to update
     */
    where?: PerfilMenorWhereInput
    /**
     * Limit how many PerfilMenors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerfilMenor upsert
   */
  export type PerfilMenorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    /**
     * The filter to search for the PerfilMenor to update in case it exists.
     */
    where: PerfilMenorWhereUniqueInput
    /**
     * In case the PerfilMenor found by the `where` argument doesn't exist, create a new PerfilMenor with this data.
     */
    create: XOR<PerfilMenorCreateInput, PerfilMenorUncheckedCreateInput>
    /**
     * In case the PerfilMenor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerfilMenorUpdateInput, PerfilMenorUncheckedUpdateInput>
  }

  /**
   * PerfilMenor delete
   */
  export type PerfilMenorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    /**
     * Filter which PerfilMenor to delete.
     */
    where: PerfilMenorWhereUniqueInput
  }

  /**
   * PerfilMenor deleteMany
   */
  export type PerfilMenorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerfilMenors to delete
     */
    where?: PerfilMenorWhereInput
    /**
     * Limit how many PerfilMenors to delete.
     */
    limit?: number
  }

  /**
   * PerfilMenor.tomas
   */
  export type PerfilMenor$tomasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    where?: TomaWhereInput
    orderBy?: TomaOrderByWithRelationInput | TomaOrderByWithRelationInput[]
    cursor?: TomaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TomaScalarFieldEnum | TomaScalarFieldEnum[]
  }

  /**
   * PerfilMenor without action
   */
  export type PerfilMenorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
  }


  /**
   * Model Toma
   */

  export type AggregateToma = {
    _count: TomaCountAggregateOutputType | null
    _min: TomaMinAggregateOutputType | null
    _max: TomaMaxAggregateOutputType | null
  }

  export type TomaMinAggregateOutputType = {
    id: string | null
    medicamentoId: string | null
    consumidorUsuarioId: string | null
    consumidorPerfilId: string | null
    registranteId: string | null
    fechaHora: Date | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TomaMaxAggregateOutputType = {
    id: string | null
    medicamentoId: string | null
    consumidorUsuarioId: string | null
    consumidorPerfilId: string | null
    registranteId: string | null
    fechaHora: Date | null
    grupoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TomaCountAggregateOutputType = {
    id: number
    medicamentoId: number
    consumidorUsuarioId: number
    consumidorPerfilId: number
    registranteId: number
    fechaHora: number
    grupoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TomaMinAggregateInputType = {
    id?: true
    medicamentoId?: true
    consumidorUsuarioId?: true
    consumidorPerfilId?: true
    registranteId?: true
    fechaHora?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TomaMaxAggregateInputType = {
    id?: true
    medicamentoId?: true
    consumidorUsuarioId?: true
    consumidorPerfilId?: true
    registranteId?: true
    fechaHora?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TomaCountAggregateInputType = {
    id?: true
    medicamentoId?: true
    consumidorUsuarioId?: true
    consumidorPerfilId?: true
    registranteId?: true
    fechaHora?: true
    grupoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TomaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Toma to aggregate.
     */
    where?: TomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tomas to fetch.
     */
    orderBy?: TomaOrderByWithRelationInput | TomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tomas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tomas
    **/
    _count?: true | TomaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TomaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TomaMaxAggregateInputType
  }

  export type GetTomaAggregateType<T extends TomaAggregateArgs> = {
        [P in keyof T & keyof AggregateToma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToma[P]>
      : GetScalarType<T[P], AggregateToma[P]>
  }




  export type TomaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TomaWhereInput
    orderBy?: TomaOrderByWithAggregationInput | TomaOrderByWithAggregationInput[]
    by: TomaScalarFieldEnum[] | TomaScalarFieldEnum
    having?: TomaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TomaCountAggregateInputType | true
    _min?: TomaMinAggregateInputType
    _max?: TomaMaxAggregateInputType
  }

  export type TomaGroupByOutputType = {
    id: string
    medicamentoId: string
    consumidorUsuarioId: string | null
    consumidorPerfilId: string | null
    registranteId: string
    fechaHora: Date
    grupoId: string
    createdAt: Date
    updatedAt: Date
    _count: TomaCountAggregateOutputType | null
    _min: TomaMinAggregateOutputType | null
    _max: TomaMaxAggregateOutputType | null
  }

  type GetTomaGroupByPayload<T extends TomaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TomaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TomaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TomaGroupByOutputType[P]>
            : GetScalarType<T[P], TomaGroupByOutputType[P]>
        }
      >
    >


  export type TomaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicamentoId?: boolean
    consumidorUsuarioId?: boolean
    consumidorPerfilId?: boolean
    registranteId?: boolean
    fechaHora?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    medicamento?: boolean | MedicationDefaultArgs<ExtArgs>
    consumidorUsuario?: boolean | Toma$consumidorUsuarioArgs<ExtArgs>
    consumidorPerfil?: boolean | Toma$consumidorPerfilArgs<ExtArgs>
    registrante?: boolean | UserDefaultArgs<ExtArgs>
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["toma"]>

  export type TomaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicamentoId?: boolean
    consumidorUsuarioId?: boolean
    consumidorPerfilId?: boolean
    registranteId?: boolean
    fechaHora?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    medicamento?: boolean | MedicationDefaultArgs<ExtArgs>
    consumidorUsuario?: boolean | Toma$consumidorUsuarioArgs<ExtArgs>
    consumidorPerfil?: boolean | Toma$consumidorPerfilArgs<ExtArgs>
    registrante?: boolean | UserDefaultArgs<ExtArgs>
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["toma"]>

  export type TomaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicamentoId?: boolean
    consumidorUsuarioId?: boolean
    consumidorPerfilId?: boolean
    registranteId?: boolean
    fechaHora?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    medicamento?: boolean | MedicationDefaultArgs<ExtArgs>
    consumidorUsuario?: boolean | Toma$consumidorUsuarioArgs<ExtArgs>
    consumidorPerfil?: boolean | Toma$consumidorPerfilArgs<ExtArgs>
    registrante?: boolean | UserDefaultArgs<ExtArgs>
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["toma"]>

  export type TomaSelectScalar = {
    id?: boolean
    medicamentoId?: boolean
    consumidorUsuarioId?: boolean
    consumidorPerfilId?: boolean
    registranteId?: boolean
    fechaHora?: boolean
    grupoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TomaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "medicamentoId" | "consumidorUsuarioId" | "consumidorPerfilId" | "registranteId" | "fechaHora" | "grupoId" | "createdAt" | "updatedAt", ExtArgs["result"]["toma"]>
  export type TomaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicamento?: boolean | MedicationDefaultArgs<ExtArgs>
    consumidorUsuario?: boolean | Toma$consumidorUsuarioArgs<ExtArgs>
    consumidorPerfil?: boolean | Toma$consumidorPerfilArgs<ExtArgs>
    registrante?: boolean | UserDefaultArgs<ExtArgs>
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
  }
  export type TomaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicamento?: boolean | MedicationDefaultArgs<ExtArgs>
    consumidorUsuario?: boolean | Toma$consumidorUsuarioArgs<ExtArgs>
    consumidorPerfil?: boolean | Toma$consumidorPerfilArgs<ExtArgs>
    registrante?: boolean | UserDefaultArgs<ExtArgs>
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
  }
  export type TomaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicamento?: boolean | MedicationDefaultArgs<ExtArgs>
    consumidorUsuario?: boolean | Toma$consumidorUsuarioArgs<ExtArgs>
    consumidorPerfil?: boolean | Toma$consumidorPerfilArgs<ExtArgs>
    registrante?: boolean | UserDefaultArgs<ExtArgs>
    grupo?: boolean | GrupoFamiliarDefaultArgs<ExtArgs>
  }

  export type $TomaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Toma"
    objects: {
      medicamento: Prisma.$MedicationPayload<ExtArgs>
      consumidorUsuario: Prisma.$UserPayload<ExtArgs> | null
      consumidorPerfil: Prisma.$PerfilMenorPayload<ExtArgs> | null
      registrante: Prisma.$UserPayload<ExtArgs>
      grupo: Prisma.$GrupoFamiliarPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      medicamentoId: string
      consumidorUsuarioId: string | null
      consumidorPerfilId: string | null
      registranteId: string
      fechaHora: Date
      grupoId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["toma"]>
    composites: {}
  }

  type TomaGetPayload<S extends boolean | null | undefined | TomaDefaultArgs> = $Result.GetResult<Prisma.$TomaPayload, S>

  type TomaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TomaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TomaCountAggregateInputType | true
    }

  export interface TomaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Toma'], meta: { name: 'Toma' } }
    /**
     * Find zero or one Toma that matches the filter.
     * @param {TomaFindUniqueArgs} args - Arguments to find a Toma
     * @example
     * // Get one Toma
     * const toma = await prisma.toma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TomaFindUniqueArgs>(args: SelectSubset<T, TomaFindUniqueArgs<ExtArgs>>): Prisma__TomaClient<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Toma that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TomaFindUniqueOrThrowArgs} args - Arguments to find a Toma
     * @example
     * // Get one Toma
     * const toma = await prisma.toma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TomaFindUniqueOrThrowArgs>(args: SelectSubset<T, TomaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TomaClient<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Toma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TomaFindFirstArgs} args - Arguments to find a Toma
     * @example
     * // Get one Toma
     * const toma = await prisma.toma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TomaFindFirstArgs>(args?: SelectSubset<T, TomaFindFirstArgs<ExtArgs>>): Prisma__TomaClient<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Toma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TomaFindFirstOrThrowArgs} args - Arguments to find a Toma
     * @example
     * // Get one Toma
     * const toma = await prisma.toma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TomaFindFirstOrThrowArgs>(args?: SelectSubset<T, TomaFindFirstOrThrowArgs<ExtArgs>>): Prisma__TomaClient<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tomas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TomaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tomas
     * const tomas = await prisma.toma.findMany()
     * 
     * // Get first 10 Tomas
     * const tomas = await prisma.toma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tomaWithIdOnly = await prisma.toma.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TomaFindManyArgs>(args?: SelectSubset<T, TomaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Toma.
     * @param {TomaCreateArgs} args - Arguments to create a Toma.
     * @example
     * // Create one Toma
     * const Toma = await prisma.toma.create({
     *   data: {
     *     // ... data to create a Toma
     *   }
     * })
     * 
     */
    create<T extends TomaCreateArgs>(args: SelectSubset<T, TomaCreateArgs<ExtArgs>>): Prisma__TomaClient<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tomas.
     * @param {TomaCreateManyArgs} args - Arguments to create many Tomas.
     * @example
     * // Create many Tomas
     * const toma = await prisma.toma.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TomaCreateManyArgs>(args?: SelectSubset<T, TomaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tomas and returns the data saved in the database.
     * @param {TomaCreateManyAndReturnArgs} args - Arguments to create many Tomas.
     * @example
     * // Create many Tomas
     * const toma = await prisma.toma.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tomas and only return the `id`
     * const tomaWithIdOnly = await prisma.toma.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TomaCreateManyAndReturnArgs>(args?: SelectSubset<T, TomaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Toma.
     * @param {TomaDeleteArgs} args - Arguments to delete one Toma.
     * @example
     * // Delete one Toma
     * const Toma = await prisma.toma.delete({
     *   where: {
     *     // ... filter to delete one Toma
     *   }
     * })
     * 
     */
    delete<T extends TomaDeleteArgs>(args: SelectSubset<T, TomaDeleteArgs<ExtArgs>>): Prisma__TomaClient<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Toma.
     * @param {TomaUpdateArgs} args - Arguments to update one Toma.
     * @example
     * // Update one Toma
     * const toma = await prisma.toma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TomaUpdateArgs>(args: SelectSubset<T, TomaUpdateArgs<ExtArgs>>): Prisma__TomaClient<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tomas.
     * @param {TomaDeleteManyArgs} args - Arguments to filter Tomas to delete.
     * @example
     * // Delete a few Tomas
     * const { count } = await prisma.toma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TomaDeleteManyArgs>(args?: SelectSubset<T, TomaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tomas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TomaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tomas
     * const toma = await prisma.toma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TomaUpdateManyArgs>(args: SelectSubset<T, TomaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tomas and returns the data updated in the database.
     * @param {TomaUpdateManyAndReturnArgs} args - Arguments to update many Tomas.
     * @example
     * // Update many Tomas
     * const toma = await prisma.toma.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tomas and only return the `id`
     * const tomaWithIdOnly = await prisma.toma.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TomaUpdateManyAndReturnArgs>(args: SelectSubset<T, TomaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Toma.
     * @param {TomaUpsertArgs} args - Arguments to update or create a Toma.
     * @example
     * // Update or create a Toma
     * const toma = await prisma.toma.upsert({
     *   create: {
     *     // ... data to create a Toma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Toma we want to update
     *   }
     * })
     */
    upsert<T extends TomaUpsertArgs>(args: SelectSubset<T, TomaUpsertArgs<ExtArgs>>): Prisma__TomaClient<$Result.GetResult<Prisma.$TomaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tomas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TomaCountArgs} args - Arguments to filter Tomas to count.
     * @example
     * // Count the number of Tomas
     * const count = await prisma.toma.count({
     *   where: {
     *     // ... the filter for the Tomas we want to count
     *   }
     * })
    **/
    count<T extends TomaCountArgs>(
      args?: Subset<T, TomaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TomaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Toma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TomaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TomaAggregateArgs>(args: Subset<T, TomaAggregateArgs>): Prisma.PrismaPromise<GetTomaAggregateType<T>>

    /**
     * Group by Toma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TomaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TomaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TomaGroupByArgs['orderBy'] }
        : { orderBy?: TomaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TomaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTomaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Toma model
   */
  readonly fields: TomaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Toma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TomaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medicamento<T extends MedicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicationDefaultArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    consumidorUsuario<T extends Toma$consumidorUsuarioArgs<ExtArgs> = {}>(args?: Subset<T, Toma$consumidorUsuarioArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    consumidorPerfil<T extends Toma$consumidorPerfilArgs<ExtArgs> = {}>(args?: Subset<T, Toma$consumidorPerfilArgs<ExtArgs>>): Prisma__PerfilMenorClient<$Result.GetResult<Prisma.$PerfilMenorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    registrante<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grupo<T extends GrupoFamiliarDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrupoFamiliarDefaultArgs<ExtArgs>>): Prisma__GrupoFamiliarClient<$Result.GetResult<Prisma.$GrupoFamiliarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Toma model
   */
  interface TomaFieldRefs {
    readonly id: FieldRef<"Toma", 'String'>
    readonly medicamentoId: FieldRef<"Toma", 'String'>
    readonly consumidorUsuarioId: FieldRef<"Toma", 'String'>
    readonly consumidorPerfilId: FieldRef<"Toma", 'String'>
    readonly registranteId: FieldRef<"Toma", 'String'>
    readonly fechaHora: FieldRef<"Toma", 'DateTime'>
    readonly grupoId: FieldRef<"Toma", 'String'>
    readonly createdAt: FieldRef<"Toma", 'DateTime'>
    readonly updatedAt: FieldRef<"Toma", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Toma findUnique
   */
  export type TomaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    /**
     * Filter, which Toma to fetch.
     */
    where: TomaWhereUniqueInput
  }

  /**
   * Toma findUniqueOrThrow
   */
  export type TomaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    /**
     * Filter, which Toma to fetch.
     */
    where: TomaWhereUniqueInput
  }

  /**
   * Toma findFirst
   */
  export type TomaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    /**
     * Filter, which Toma to fetch.
     */
    where?: TomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tomas to fetch.
     */
    orderBy?: TomaOrderByWithRelationInput | TomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tomas.
     */
    cursor?: TomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tomas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tomas.
     */
    distinct?: TomaScalarFieldEnum | TomaScalarFieldEnum[]
  }

  /**
   * Toma findFirstOrThrow
   */
  export type TomaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    /**
     * Filter, which Toma to fetch.
     */
    where?: TomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tomas to fetch.
     */
    orderBy?: TomaOrderByWithRelationInput | TomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tomas.
     */
    cursor?: TomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tomas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tomas.
     */
    distinct?: TomaScalarFieldEnum | TomaScalarFieldEnum[]
  }

  /**
   * Toma findMany
   */
  export type TomaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    /**
     * Filter, which Tomas to fetch.
     */
    where?: TomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tomas to fetch.
     */
    orderBy?: TomaOrderByWithRelationInput | TomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tomas.
     */
    cursor?: TomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tomas.
     */
    skip?: number
    distinct?: TomaScalarFieldEnum | TomaScalarFieldEnum[]
  }

  /**
   * Toma create
   */
  export type TomaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    /**
     * The data needed to create a Toma.
     */
    data: XOR<TomaCreateInput, TomaUncheckedCreateInput>
  }

  /**
   * Toma createMany
   */
  export type TomaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tomas.
     */
    data: TomaCreateManyInput | TomaCreateManyInput[]
  }

  /**
   * Toma createManyAndReturn
   */
  export type TomaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * The data used to create many Tomas.
     */
    data: TomaCreateManyInput | TomaCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Toma update
   */
  export type TomaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    /**
     * The data needed to update a Toma.
     */
    data: XOR<TomaUpdateInput, TomaUncheckedUpdateInput>
    /**
     * Choose, which Toma to update.
     */
    where: TomaWhereUniqueInput
  }

  /**
   * Toma updateMany
   */
  export type TomaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tomas.
     */
    data: XOR<TomaUpdateManyMutationInput, TomaUncheckedUpdateManyInput>
    /**
     * Filter which Tomas to update
     */
    where?: TomaWhereInput
    /**
     * Limit how many Tomas to update.
     */
    limit?: number
  }

  /**
   * Toma updateManyAndReturn
   */
  export type TomaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * The data used to update Tomas.
     */
    data: XOR<TomaUpdateManyMutationInput, TomaUncheckedUpdateManyInput>
    /**
     * Filter which Tomas to update
     */
    where?: TomaWhereInput
    /**
     * Limit how many Tomas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Toma upsert
   */
  export type TomaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    /**
     * The filter to search for the Toma to update in case it exists.
     */
    where: TomaWhereUniqueInput
    /**
     * In case the Toma found by the `where` argument doesn't exist, create a new Toma with this data.
     */
    create: XOR<TomaCreateInput, TomaUncheckedCreateInput>
    /**
     * In case the Toma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TomaUpdateInput, TomaUncheckedUpdateInput>
  }

  /**
   * Toma delete
   */
  export type TomaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
    /**
     * Filter which Toma to delete.
     */
    where: TomaWhereUniqueInput
  }

  /**
   * Toma deleteMany
   */
  export type TomaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tomas to delete
     */
    where?: TomaWhereInput
    /**
     * Limit how many Tomas to delete.
     */
    limit?: number
  }

  /**
   * Toma.consumidorUsuario
   */
  export type Toma$consumidorUsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Toma.consumidorPerfil
   */
  export type Toma$consumidorPerfilArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerfilMenor
     */
    select?: PerfilMenorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerfilMenor
     */
    omit?: PerfilMenorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerfilMenorInclude<ExtArgs> | null
    where?: PerfilMenorWhereInput
  }

  /**
   * Toma without action
   */
  export type TomaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Toma
     */
    select?: TomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Toma
     */
    omit?: TomaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TomaInclude<ExtArgs> | null
  }


  /**
   * Model Historial
   */

  export type AggregateHistorial = {
    _count: HistorialCountAggregateOutputType | null
    _min: HistorialMinAggregateOutputType | null
    _max: HistorialMaxAggregateOutputType | null
  }

  export type HistorialMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    tipoAccion: string | null
    entidadTipo: string | null
    entidadId: string | null
    datosPrevios: string | null
    datosPosteriores: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type HistorialMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    tipoAccion: string | null
    entidadTipo: string | null
    entidadId: string | null
    datosPrevios: string | null
    datosPosteriores: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type HistorialCountAggregateOutputType = {
    id: number
    usuarioId: number
    tipoAccion: number
    entidadTipo: number
    entidadId: number
    datosPrevios: number
    datosPosteriores: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type HistorialMinAggregateInputType = {
    id?: true
    usuarioId?: true
    tipoAccion?: true
    entidadTipo?: true
    entidadId?: true
    datosPrevios?: true
    datosPosteriores?: true
    metadata?: true
    createdAt?: true
  }

  export type HistorialMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    tipoAccion?: true
    entidadTipo?: true
    entidadId?: true
    datosPrevios?: true
    datosPosteriores?: true
    metadata?: true
    createdAt?: true
  }

  export type HistorialCountAggregateInputType = {
    id?: true
    usuarioId?: true
    tipoAccion?: true
    entidadTipo?: true
    entidadId?: true
    datosPrevios?: true
    datosPosteriores?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type HistorialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Historial to aggregate.
     */
    where?: HistorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historials to fetch.
     */
    orderBy?: HistorialOrderByWithRelationInput | HistorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Historials
    **/
    _count?: true | HistorialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistorialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistorialMaxAggregateInputType
  }

  export type GetHistorialAggregateType<T extends HistorialAggregateArgs> = {
        [P in keyof T & keyof AggregateHistorial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistorial[P]>
      : GetScalarType<T[P], AggregateHistorial[P]>
  }




  export type HistorialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistorialWhereInput
    orderBy?: HistorialOrderByWithAggregationInput | HistorialOrderByWithAggregationInput[]
    by: HistorialScalarFieldEnum[] | HistorialScalarFieldEnum
    having?: HistorialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistorialCountAggregateInputType | true
    _min?: HistorialMinAggregateInputType
    _max?: HistorialMaxAggregateInputType
  }

  export type HistorialGroupByOutputType = {
    id: string
    usuarioId: string
    tipoAccion: string
    entidadTipo: string
    entidadId: string | null
    datosPrevios: string | null
    datosPosteriores: string | null
    metadata: string | null
    createdAt: Date
    _count: HistorialCountAggregateOutputType | null
    _min: HistorialMinAggregateOutputType | null
    _max: HistorialMaxAggregateOutputType | null
  }

  type GetHistorialGroupByPayload<T extends HistorialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistorialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistorialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistorialGroupByOutputType[P]>
            : GetScalarType<T[P], HistorialGroupByOutputType[P]>
        }
      >
    >


  export type HistorialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipoAccion?: boolean
    entidadTipo?: boolean
    entidadId?: boolean
    datosPrevios?: boolean
    datosPosteriores?: boolean
    metadata?: boolean
    createdAt?: boolean
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historial"]>

  export type HistorialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipoAccion?: boolean
    entidadTipo?: boolean
    entidadId?: boolean
    datosPrevios?: boolean
    datosPosteriores?: boolean
    metadata?: boolean
    createdAt?: boolean
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historial"]>

  export type HistorialSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipoAccion?: boolean
    entidadTipo?: boolean
    entidadId?: boolean
    datosPrevios?: boolean
    datosPosteriores?: boolean
    metadata?: boolean
    createdAt?: boolean
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historial"]>

  export type HistorialSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    tipoAccion?: boolean
    entidadTipo?: boolean
    entidadId?: boolean
    datosPrevios?: boolean
    datosPosteriores?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type HistorialOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "tipoAccion" | "entidadTipo" | "entidadId" | "datosPrevios" | "datosPosteriores" | "metadata" | "createdAt", ExtArgs["result"]["historial"]>
  export type HistorialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HistorialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HistorialIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HistorialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Historial"
    objects: {
      usuario: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      tipoAccion: string
      entidadTipo: string
      entidadId: string | null
      datosPrevios: string | null
      datosPosteriores: string | null
      metadata: string | null
      createdAt: Date
    }, ExtArgs["result"]["historial"]>
    composites: {}
  }

  type HistorialGetPayload<S extends boolean | null | undefined | HistorialDefaultArgs> = $Result.GetResult<Prisma.$HistorialPayload, S>

  type HistorialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HistorialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HistorialCountAggregateInputType | true
    }

  export interface HistorialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Historial'], meta: { name: 'Historial' } }
    /**
     * Find zero or one Historial that matches the filter.
     * @param {HistorialFindUniqueArgs} args - Arguments to find a Historial
     * @example
     * // Get one Historial
     * const historial = await prisma.historial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HistorialFindUniqueArgs>(args: SelectSubset<T, HistorialFindUniqueArgs<ExtArgs>>): Prisma__HistorialClient<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Historial that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HistorialFindUniqueOrThrowArgs} args - Arguments to find a Historial
     * @example
     * // Get one Historial
     * const historial = await prisma.historial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HistorialFindUniqueOrThrowArgs>(args: SelectSubset<T, HistorialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HistorialClient<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Historial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialFindFirstArgs} args - Arguments to find a Historial
     * @example
     * // Get one Historial
     * const historial = await prisma.historial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HistorialFindFirstArgs>(args?: SelectSubset<T, HistorialFindFirstArgs<ExtArgs>>): Prisma__HistorialClient<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Historial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialFindFirstOrThrowArgs} args - Arguments to find a Historial
     * @example
     * // Get one Historial
     * const historial = await prisma.historial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HistorialFindFirstOrThrowArgs>(args?: SelectSubset<T, HistorialFindFirstOrThrowArgs<ExtArgs>>): Prisma__HistorialClient<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Historials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Historials
     * const historials = await prisma.historial.findMany()
     * 
     * // Get first 10 Historials
     * const historials = await prisma.historial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historialWithIdOnly = await prisma.historial.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HistorialFindManyArgs>(args?: SelectSubset<T, HistorialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Historial.
     * @param {HistorialCreateArgs} args - Arguments to create a Historial.
     * @example
     * // Create one Historial
     * const Historial = await prisma.historial.create({
     *   data: {
     *     // ... data to create a Historial
     *   }
     * })
     * 
     */
    create<T extends HistorialCreateArgs>(args: SelectSubset<T, HistorialCreateArgs<ExtArgs>>): Prisma__HistorialClient<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Historials.
     * @param {HistorialCreateManyArgs} args - Arguments to create many Historials.
     * @example
     * // Create many Historials
     * const historial = await prisma.historial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HistorialCreateManyArgs>(args?: SelectSubset<T, HistorialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Historials and returns the data saved in the database.
     * @param {HistorialCreateManyAndReturnArgs} args - Arguments to create many Historials.
     * @example
     * // Create many Historials
     * const historial = await prisma.historial.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Historials and only return the `id`
     * const historialWithIdOnly = await prisma.historial.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HistorialCreateManyAndReturnArgs>(args?: SelectSubset<T, HistorialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Historial.
     * @param {HistorialDeleteArgs} args - Arguments to delete one Historial.
     * @example
     * // Delete one Historial
     * const Historial = await prisma.historial.delete({
     *   where: {
     *     // ... filter to delete one Historial
     *   }
     * })
     * 
     */
    delete<T extends HistorialDeleteArgs>(args: SelectSubset<T, HistorialDeleteArgs<ExtArgs>>): Prisma__HistorialClient<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Historial.
     * @param {HistorialUpdateArgs} args - Arguments to update one Historial.
     * @example
     * // Update one Historial
     * const historial = await prisma.historial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HistorialUpdateArgs>(args: SelectSubset<T, HistorialUpdateArgs<ExtArgs>>): Prisma__HistorialClient<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Historials.
     * @param {HistorialDeleteManyArgs} args - Arguments to filter Historials to delete.
     * @example
     * // Delete a few Historials
     * const { count } = await prisma.historial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HistorialDeleteManyArgs>(args?: SelectSubset<T, HistorialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Historials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Historials
     * const historial = await prisma.historial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HistorialUpdateManyArgs>(args: SelectSubset<T, HistorialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Historials and returns the data updated in the database.
     * @param {HistorialUpdateManyAndReturnArgs} args - Arguments to update many Historials.
     * @example
     * // Update many Historials
     * const historial = await prisma.historial.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Historials and only return the `id`
     * const historialWithIdOnly = await prisma.historial.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HistorialUpdateManyAndReturnArgs>(args: SelectSubset<T, HistorialUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Historial.
     * @param {HistorialUpsertArgs} args - Arguments to update or create a Historial.
     * @example
     * // Update or create a Historial
     * const historial = await prisma.historial.upsert({
     *   create: {
     *     // ... data to create a Historial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Historial we want to update
     *   }
     * })
     */
    upsert<T extends HistorialUpsertArgs>(args: SelectSubset<T, HistorialUpsertArgs<ExtArgs>>): Prisma__HistorialClient<$Result.GetResult<Prisma.$HistorialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Historials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCountArgs} args - Arguments to filter Historials to count.
     * @example
     * // Count the number of Historials
     * const count = await prisma.historial.count({
     *   where: {
     *     // ... the filter for the Historials we want to count
     *   }
     * })
    **/
    count<T extends HistorialCountArgs>(
      args?: Subset<T, HistorialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistorialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Historial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistorialAggregateArgs>(args: Subset<T, HistorialAggregateArgs>): Prisma.PrismaPromise<GetHistorialAggregateType<T>>

    /**
     * Group by Historial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistorialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistorialGroupByArgs['orderBy'] }
        : { orderBy?: HistorialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistorialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistorialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Historial model
   */
  readonly fields: HistorialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Historial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistorialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Historial model
   */
  interface HistorialFieldRefs {
    readonly id: FieldRef<"Historial", 'String'>
    readonly usuarioId: FieldRef<"Historial", 'String'>
    readonly tipoAccion: FieldRef<"Historial", 'String'>
    readonly entidadTipo: FieldRef<"Historial", 'String'>
    readonly entidadId: FieldRef<"Historial", 'String'>
    readonly datosPrevios: FieldRef<"Historial", 'String'>
    readonly datosPosteriores: FieldRef<"Historial", 'String'>
    readonly metadata: FieldRef<"Historial", 'String'>
    readonly createdAt: FieldRef<"Historial", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Historial findUnique
   */
  export type HistorialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
    /**
     * Filter, which Historial to fetch.
     */
    where: HistorialWhereUniqueInput
  }

  /**
   * Historial findUniqueOrThrow
   */
  export type HistorialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
    /**
     * Filter, which Historial to fetch.
     */
    where: HistorialWhereUniqueInput
  }

  /**
   * Historial findFirst
   */
  export type HistorialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
    /**
     * Filter, which Historial to fetch.
     */
    where?: HistorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historials to fetch.
     */
    orderBy?: HistorialOrderByWithRelationInput | HistorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Historials.
     */
    cursor?: HistorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Historials.
     */
    distinct?: HistorialScalarFieldEnum | HistorialScalarFieldEnum[]
  }

  /**
   * Historial findFirstOrThrow
   */
  export type HistorialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
    /**
     * Filter, which Historial to fetch.
     */
    where?: HistorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historials to fetch.
     */
    orderBy?: HistorialOrderByWithRelationInput | HistorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Historials.
     */
    cursor?: HistorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Historials.
     */
    distinct?: HistorialScalarFieldEnum | HistorialScalarFieldEnum[]
  }

  /**
   * Historial findMany
   */
  export type HistorialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
    /**
     * Filter, which Historials to fetch.
     */
    where?: HistorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historials to fetch.
     */
    orderBy?: HistorialOrderByWithRelationInput | HistorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Historials.
     */
    cursor?: HistorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historials.
     */
    skip?: number
    distinct?: HistorialScalarFieldEnum | HistorialScalarFieldEnum[]
  }

  /**
   * Historial create
   */
  export type HistorialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
    /**
     * The data needed to create a Historial.
     */
    data: XOR<HistorialCreateInput, HistorialUncheckedCreateInput>
  }

  /**
   * Historial createMany
   */
  export type HistorialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Historials.
     */
    data: HistorialCreateManyInput | HistorialCreateManyInput[]
  }

  /**
   * Historial createManyAndReturn
   */
  export type HistorialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * The data used to create many Historials.
     */
    data: HistorialCreateManyInput | HistorialCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Historial update
   */
  export type HistorialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
    /**
     * The data needed to update a Historial.
     */
    data: XOR<HistorialUpdateInput, HistorialUncheckedUpdateInput>
    /**
     * Choose, which Historial to update.
     */
    where: HistorialWhereUniqueInput
  }

  /**
   * Historial updateMany
   */
  export type HistorialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Historials.
     */
    data: XOR<HistorialUpdateManyMutationInput, HistorialUncheckedUpdateManyInput>
    /**
     * Filter which Historials to update
     */
    where?: HistorialWhereInput
    /**
     * Limit how many Historials to update.
     */
    limit?: number
  }

  /**
   * Historial updateManyAndReturn
   */
  export type HistorialUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * The data used to update Historials.
     */
    data: XOR<HistorialUpdateManyMutationInput, HistorialUncheckedUpdateManyInput>
    /**
     * Filter which Historials to update
     */
    where?: HistorialWhereInput
    /**
     * Limit how many Historials to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Historial upsert
   */
  export type HistorialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
    /**
     * The filter to search for the Historial to update in case it exists.
     */
    where: HistorialWhereUniqueInput
    /**
     * In case the Historial found by the `where` argument doesn't exist, create a new Historial with this data.
     */
    create: XOR<HistorialCreateInput, HistorialUncheckedCreateInput>
    /**
     * In case the Historial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistorialUpdateInput, HistorialUncheckedUpdateInput>
  }

  /**
   * Historial delete
   */
  export type HistorialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
    /**
     * Filter which Historial to delete.
     */
    where: HistorialWhereUniqueInput
  }

  /**
   * Historial deleteMany
   */
  export type HistorialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Historials to delete
     */
    where?: HistorialWhereInput
    /**
     * Limit how many Historials to delete.
     */
    limit?: number
  }

  /**
   * Historial without action
   */
  export type HistorialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historial
     */
    select?: HistorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Historial
     */
    omit?: HistorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    dni: 'dni',
    fechaNacimiento: 'fechaNacimiento',
    foto: 'foto',
    password: 'password',
    rol: 'rol',
    grupoId: 'grupoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MedicationScalarFieldEnum: {
    id: 'id',
    commercialName: 'commercialName',
    activeIngredient: 'activeIngredient',
    description: 'description',
    intakeRecommendations: 'intakeRecommendations',
    imageUrl: 'imageUrl',
    initialQuantity: 'initialQuantity',
    currentQuantity: 'currentQuantity',
    unit: 'unit',
    expirationDate: 'expirationDate',
    archived: 'archived',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type MedicationScalarFieldEnum = (typeof MedicationScalarFieldEnum)[keyof typeof MedicationScalarFieldEnum]


  export const NotificationSettingsScalarFieldEnum: {
    id: 'id',
    daysBeforeExpiration: 'daysBeforeExpiration',
    lowStockThreshold: 'lowStockThreshold',
    userId: 'userId'
  };

  export type NotificationSettingsScalarFieldEnum = (typeof NotificationSettingsScalarFieldEnum)[keyof typeof NotificationSettingsScalarFieldEnum]


  export const TreatmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    patient: 'patient',
    patientId: 'patientId',
    patientType: 'patientType',
    symptoms: 'symptoms',
    startDate: 'startDate',
    endDate: 'endDate',
    isActive: 'isActive',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TreatmentScalarFieldEnum = (typeof TreatmentScalarFieldEnum)[keyof typeof TreatmentScalarFieldEnum]


  export const TreatmentMedicationScalarFieldEnum: {
    id: 'id',
    treatmentId: 'treatmentId',
    medicationId: 'medicationId',
    frequencyHours: 'frequencyHours',
    durationDays: 'durationDays',
    dosage: 'dosage',
    startDate: 'startDate',
    endDate: 'endDate',
    startAtSpecificTime: 'startAtSpecificTime',
    specificStartTime: 'specificStartTime',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TreatmentMedicationScalarFieldEnum = (typeof TreatmentMedicationScalarFieldEnum)[keyof typeof TreatmentMedicationScalarFieldEnum]


  export const TreatmentImageScalarFieldEnum: {
    id: 'id',
    treatmentId: 'treatmentId',
    imageUrl: 'imageUrl',
    imageType: 'imageType',
    extractedText: 'extractedText',
    aiAnalysis: 'aiAnalysis',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TreatmentImageScalarFieldEnum = (typeof TreatmentImageScalarFieldEnum)[keyof typeof TreatmentImageScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    treatmentId: 'treatmentId',
    scheduledDate: 'scheduledDate',
    sent: 'sent',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const NotificationPreferencesScalarFieldEnum: {
    id: 'id',
    push: 'push',
    sound: 'sound',
    email: 'email',
    browser: 'browser',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationPreferencesScalarFieldEnum = (typeof NotificationPreferencesScalarFieldEnum)[keyof typeof NotificationPreferencesScalarFieldEnum]


  export const PushSubscriptionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    endpoint: 'endpoint',
    p256dhKey: 'p256dhKey',
    authKey: 'authKey',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PushSubscriptionScalarFieldEnum = (typeof PushSubscriptionScalarFieldEnum)[keyof typeof PushSubscriptionScalarFieldEnum]


  export const ShoppingItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    presentation: 'presentation',
    laboratory: 'laboratory',
    price: 'price',
    quantity: 'quantity',
    shoppingListId: 'shoppingListId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShoppingItemScalarFieldEnum = (typeof ShoppingItemScalarFieldEnum)[keyof typeof ShoppingItemScalarFieldEnum]


  export const ShoppingListScalarFieldEnum: {
    id: 'id',
    name: 'name',
    total: 'total',
    isArchived: 'isArchived',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShoppingListScalarFieldEnum = (typeof ShoppingListScalarFieldEnum)[keyof typeof ShoppingListScalarFieldEnum]


  export const GrupoFamiliarScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    creadorId: 'creadorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GrupoFamiliarScalarFieldEnum = (typeof GrupoFamiliarScalarFieldEnum)[keyof typeof GrupoFamiliarScalarFieldEnum]


  export const PerfilMenorScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    dni: 'dni',
    fechaNacimiento: 'fechaNacimiento',
    foto: 'foto',
    grupoId: 'grupoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PerfilMenorScalarFieldEnum = (typeof PerfilMenorScalarFieldEnum)[keyof typeof PerfilMenorScalarFieldEnum]


  export const TomaScalarFieldEnum: {
    id: 'id',
    medicamentoId: 'medicamentoId',
    consumidorUsuarioId: 'consumidorUsuarioId',
    consumidorPerfilId: 'consumidorPerfilId',
    registranteId: 'registranteId',
    fechaHora: 'fechaHora',
    grupoId: 'grupoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TomaScalarFieldEnum = (typeof TomaScalarFieldEnum)[keyof typeof TomaScalarFieldEnum]


  export const HistorialScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    tipoAccion: 'tipoAccion',
    entidadTipo: 'entidadTipo',
    entidadId: 'entidadId',
    datosPrevios: 'datosPrevios',
    datosPosteriores: 'datosPosteriores',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type HistorialScalarFieldEnum = (typeof HistorialScalarFieldEnum)[keyof typeof HistorialScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    dni?: StringFilter<"User"> | string
    fechaNacimiento?: DateTimeFilter<"User"> | Date | string
    foto?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    rol?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    grupoId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    grupo?: XOR<GrupoFamiliarNullableScalarRelationFilter, GrupoFamiliarWhereInput> | null
    medications?: MedicationListRelationFilter
    notificationSettings?: XOR<NotificationSettingsNullableScalarRelationFilter, NotificationSettingsWhereInput> | null
    treatments?: TreatmentListRelationFilter
    notificationPreferences?: XOR<NotificationPreferencesNullableScalarRelationFilter, NotificationPreferencesWhereInput> | null
    pushSubscriptions?: PushSubscriptionListRelationFilter
    shoppingLists?: ShoppingListListRelationFilter
    tomasRegistradas?: TomaListRelationFilter
    tomasConsumidas?: TomaListRelationFilter
    grupoCreado?: GrupoFamiliarListRelationFilter
    historial?: HistorialListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    dni?: SortOrder
    fechaNacimiento?: SortOrder
    foto?: SortOrderInput | SortOrder
    password?: SortOrder
    rol?: SortOrder
    grupoId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    grupo?: GrupoFamiliarOrderByWithRelationInput
    medications?: MedicationOrderByRelationAggregateInput
    notificationSettings?: NotificationSettingsOrderByWithRelationInput
    treatments?: TreatmentOrderByRelationAggregateInput
    notificationPreferences?: NotificationPreferencesOrderByWithRelationInput
    pushSubscriptions?: PushSubscriptionOrderByRelationAggregateInput
    shoppingLists?: ShoppingListOrderByRelationAggregateInput
    tomasRegistradas?: TomaOrderByRelationAggregateInput
    tomasConsumidas?: TomaOrderByRelationAggregateInput
    grupoCreado?: GrupoFamiliarOrderByRelationAggregateInput
    historial?: HistorialOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    dni?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    fechaNacimiento?: DateTimeFilter<"User"> | Date | string
    foto?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    rol?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    grupoId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    grupo?: XOR<GrupoFamiliarNullableScalarRelationFilter, GrupoFamiliarWhereInput> | null
    medications?: MedicationListRelationFilter
    notificationSettings?: XOR<NotificationSettingsNullableScalarRelationFilter, NotificationSettingsWhereInput> | null
    treatments?: TreatmentListRelationFilter
    notificationPreferences?: XOR<NotificationPreferencesNullableScalarRelationFilter, NotificationPreferencesWhereInput> | null
    pushSubscriptions?: PushSubscriptionListRelationFilter
    shoppingLists?: ShoppingListListRelationFilter
    tomasRegistradas?: TomaListRelationFilter
    tomasConsumidas?: TomaListRelationFilter
    grupoCreado?: GrupoFamiliarListRelationFilter
    historial?: HistorialListRelationFilter
  }, "id" | "email" | "dni">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    dni?: SortOrder
    fechaNacimiento?: SortOrder
    foto?: SortOrderInput | SortOrder
    password?: SortOrder
    rol?: SortOrder
    grupoId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    dni?: StringWithAggregatesFilter<"User"> | string
    fechaNacimiento?: DateTimeWithAggregatesFilter<"User"> | Date | string
    foto?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    rol?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    grupoId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MedicationWhereInput = {
    AND?: MedicationWhereInput | MedicationWhereInput[]
    OR?: MedicationWhereInput[]
    NOT?: MedicationWhereInput | MedicationWhereInput[]
    id?: StringFilter<"Medication"> | string
    commercialName?: StringFilter<"Medication"> | string
    activeIngredient?: StringNullableFilter<"Medication"> | string | null
    description?: StringNullableFilter<"Medication"> | string | null
    intakeRecommendations?: StringNullableFilter<"Medication"> | string | null
    imageUrl?: StringNullableFilter<"Medication"> | string | null
    initialQuantity?: FloatFilter<"Medication"> | number
    currentQuantity?: FloatFilter<"Medication"> | number
    unit?: StringFilter<"Medication"> | string
    expirationDate?: DateTimeFilter<"Medication"> | Date | string
    archived?: BoolFilter<"Medication"> | boolean
    createdAt?: DateTimeFilter<"Medication"> | Date | string
    updatedAt?: DateTimeFilter<"Medication"> | Date | string
    userId?: StringFilter<"Medication"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    treatmentMedications?: TreatmentMedicationListRelationFilter
    tomas?: TomaListRelationFilter
  }

  export type MedicationOrderByWithRelationInput = {
    id?: SortOrder
    commercialName?: SortOrder
    activeIngredient?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    intakeRecommendations?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    initialQuantity?: SortOrder
    currentQuantity?: SortOrder
    unit?: SortOrder
    expirationDate?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    treatmentMedications?: TreatmentMedicationOrderByRelationAggregateInput
    tomas?: TomaOrderByRelationAggregateInput
  }

  export type MedicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MedicationWhereInput | MedicationWhereInput[]
    OR?: MedicationWhereInput[]
    NOT?: MedicationWhereInput | MedicationWhereInput[]
    commercialName?: StringFilter<"Medication"> | string
    activeIngredient?: StringNullableFilter<"Medication"> | string | null
    description?: StringNullableFilter<"Medication"> | string | null
    intakeRecommendations?: StringNullableFilter<"Medication"> | string | null
    imageUrl?: StringNullableFilter<"Medication"> | string | null
    initialQuantity?: FloatFilter<"Medication"> | number
    currentQuantity?: FloatFilter<"Medication"> | number
    unit?: StringFilter<"Medication"> | string
    expirationDate?: DateTimeFilter<"Medication"> | Date | string
    archived?: BoolFilter<"Medication"> | boolean
    createdAt?: DateTimeFilter<"Medication"> | Date | string
    updatedAt?: DateTimeFilter<"Medication"> | Date | string
    userId?: StringFilter<"Medication"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    treatmentMedications?: TreatmentMedicationListRelationFilter
    tomas?: TomaListRelationFilter
  }, "id">

  export type MedicationOrderByWithAggregationInput = {
    id?: SortOrder
    commercialName?: SortOrder
    activeIngredient?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    intakeRecommendations?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    initialQuantity?: SortOrder
    currentQuantity?: SortOrder
    unit?: SortOrder
    expirationDate?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: MedicationCountOrderByAggregateInput
    _avg?: MedicationAvgOrderByAggregateInput
    _max?: MedicationMaxOrderByAggregateInput
    _min?: MedicationMinOrderByAggregateInput
    _sum?: MedicationSumOrderByAggregateInput
  }

  export type MedicationScalarWhereWithAggregatesInput = {
    AND?: MedicationScalarWhereWithAggregatesInput | MedicationScalarWhereWithAggregatesInput[]
    OR?: MedicationScalarWhereWithAggregatesInput[]
    NOT?: MedicationScalarWhereWithAggregatesInput | MedicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Medication"> | string
    commercialName?: StringWithAggregatesFilter<"Medication"> | string
    activeIngredient?: StringNullableWithAggregatesFilter<"Medication"> | string | null
    description?: StringNullableWithAggregatesFilter<"Medication"> | string | null
    intakeRecommendations?: StringNullableWithAggregatesFilter<"Medication"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Medication"> | string | null
    initialQuantity?: FloatWithAggregatesFilter<"Medication"> | number
    currentQuantity?: FloatWithAggregatesFilter<"Medication"> | number
    unit?: StringWithAggregatesFilter<"Medication"> | string
    expirationDate?: DateTimeWithAggregatesFilter<"Medication"> | Date | string
    archived?: BoolWithAggregatesFilter<"Medication"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Medication"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Medication"> | Date | string
    userId?: StringWithAggregatesFilter<"Medication"> | string
  }

  export type NotificationSettingsWhereInput = {
    AND?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    OR?: NotificationSettingsWhereInput[]
    NOT?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    id?: StringFilter<"NotificationSettings"> | string
    daysBeforeExpiration?: IntFilter<"NotificationSettings"> | number
    lowStockThreshold?: FloatFilter<"NotificationSettings"> | number
    userId?: StringFilter<"NotificationSettings"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationSettingsOrderByWithRelationInput = {
    id?: SortOrder
    daysBeforeExpiration?: SortOrder
    lowStockThreshold?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    OR?: NotificationSettingsWhereInput[]
    NOT?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    daysBeforeExpiration?: IntFilter<"NotificationSettings"> | number
    lowStockThreshold?: FloatFilter<"NotificationSettings"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type NotificationSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    daysBeforeExpiration?: SortOrder
    lowStockThreshold?: SortOrder
    userId?: SortOrder
    _count?: NotificationSettingsCountOrderByAggregateInput
    _avg?: NotificationSettingsAvgOrderByAggregateInput
    _max?: NotificationSettingsMaxOrderByAggregateInput
    _min?: NotificationSettingsMinOrderByAggregateInput
    _sum?: NotificationSettingsSumOrderByAggregateInput
  }

  export type NotificationSettingsScalarWhereWithAggregatesInput = {
    AND?: NotificationSettingsScalarWhereWithAggregatesInput | NotificationSettingsScalarWhereWithAggregatesInput[]
    OR?: NotificationSettingsScalarWhereWithAggregatesInput[]
    NOT?: NotificationSettingsScalarWhereWithAggregatesInput | NotificationSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationSettings"> | string
    daysBeforeExpiration?: IntWithAggregatesFilter<"NotificationSettings"> | number
    lowStockThreshold?: FloatWithAggregatesFilter<"NotificationSettings"> | number
    userId?: StringWithAggregatesFilter<"NotificationSettings"> | string
  }

  export type TreatmentWhereInput = {
    AND?: TreatmentWhereInput | TreatmentWhereInput[]
    OR?: TreatmentWhereInput[]
    NOT?: TreatmentWhereInput | TreatmentWhereInput[]
    id?: StringFilter<"Treatment"> | string
    name?: StringFilter<"Treatment"> | string
    patient?: StringFilter<"Treatment"> | string
    patientId?: StringNullableFilter<"Treatment"> | string | null
    patientType?: StringNullableFilter<"Treatment"> | string | null
    symptoms?: StringNullableFilter<"Treatment"> | string | null
    startDate?: DateTimeFilter<"Treatment"> | Date | string
    endDate?: DateTimeFilter<"Treatment"> | Date | string
    isActive?: BoolFilter<"Treatment"> | boolean
    userId?: StringFilter<"Treatment"> | string
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeFilter<"Treatment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    notifications?: NotificationListRelationFilter
    medications?: TreatmentMedicationListRelationFilter
    images?: TreatmentImageListRelationFilter
  }

  export type TreatmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    patient?: SortOrder
    patientId?: SortOrderInput | SortOrder
    patientType?: SortOrderInput | SortOrder
    symptoms?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    notifications?: NotificationOrderByRelationAggregateInput
    medications?: TreatmentMedicationOrderByRelationAggregateInput
    images?: TreatmentImageOrderByRelationAggregateInput
  }

  export type TreatmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TreatmentWhereInput | TreatmentWhereInput[]
    OR?: TreatmentWhereInput[]
    NOT?: TreatmentWhereInput | TreatmentWhereInput[]
    name?: StringFilter<"Treatment"> | string
    patient?: StringFilter<"Treatment"> | string
    patientId?: StringNullableFilter<"Treatment"> | string | null
    patientType?: StringNullableFilter<"Treatment"> | string | null
    symptoms?: StringNullableFilter<"Treatment"> | string | null
    startDate?: DateTimeFilter<"Treatment"> | Date | string
    endDate?: DateTimeFilter<"Treatment"> | Date | string
    isActive?: BoolFilter<"Treatment"> | boolean
    userId?: StringFilter<"Treatment"> | string
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeFilter<"Treatment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    notifications?: NotificationListRelationFilter
    medications?: TreatmentMedicationListRelationFilter
    images?: TreatmentImageListRelationFilter
  }, "id">

  export type TreatmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    patient?: SortOrder
    patientId?: SortOrderInput | SortOrder
    patientType?: SortOrderInput | SortOrder
    symptoms?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TreatmentCountOrderByAggregateInput
    _max?: TreatmentMaxOrderByAggregateInput
    _min?: TreatmentMinOrderByAggregateInput
  }

  export type TreatmentScalarWhereWithAggregatesInput = {
    AND?: TreatmentScalarWhereWithAggregatesInput | TreatmentScalarWhereWithAggregatesInput[]
    OR?: TreatmentScalarWhereWithAggregatesInput[]
    NOT?: TreatmentScalarWhereWithAggregatesInput | TreatmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Treatment"> | string
    name?: StringWithAggregatesFilter<"Treatment"> | string
    patient?: StringWithAggregatesFilter<"Treatment"> | string
    patientId?: StringNullableWithAggregatesFilter<"Treatment"> | string | null
    patientType?: StringNullableWithAggregatesFilter<"Treatment"> | string | null
    symptoms?: StringNullableWithAggregatesFilter<"Treatment"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Treatment"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Treatment"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Treatment"> | boolean
    userId?: StringWithAggregatesFilter<"Treatment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Treatment"> | Date | string
  }

  export type TreatmentMedicationWhereInput = {
    AND?: TreatmentMedicationWhereInput | TreatmentMedicationWhereInput[]
    OR?: TreatmentMedicationWhereInput[]
    NOT?: TreatmentMedicationWhereInput | TreatmentMedicationWhereInput[]
    id?: StringFilter<"TreatmentMedication"> | string
    treatmentId?: StringFilter<"TreatmentMedication"> | string
    medicationId?: StringFilter<"TreatmentMedication"> | string
    frequencyHours?: IntFilter<"TreatmentMedication"> | number
    durationDays?: IntFilter<"TreatmentMedication"> | number
    dosage?: StringFilter<"TreatmentMedication"> | string
    startDate?: DateTimeFilter<"TreatmentMedication"> | Date | string
    endDate?: DateTimeFilter<"TreatmentMedication"> | Date | string
    startAtSpecificTime?: BoolFilter<"TreatmentMedication"> | boolean
    specificStartTime?: DateTimeNullableFilter<"TreatmentMedication"> | Date | string | null
    isActive?: BoolFilter<"TreatmentMedication"> | boolean
    createdAt?: DateTimeFilter<"TreatmentMedication"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentMedication"> | Date | string
    treatment?: XOR<TreatmentScalarRelationFilter, TreatmentWhereInput>
    medication?: XOR<MedicationScalarRelationFilter, MedicationWhereInput>
  }

  export type TreatmentMedicationOrderByWithRelationInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    medicationId?: SortOrder
    frequencyHours?: SortOrder
    durationDays?: SortOrder
    dosage?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startAtSpecificTime?: SortOrder
    specificStartTime?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    treatment?: TreatmentOrderByWithRelationInput
    medication?: MedicationOrderByWithRelationInput
  }

  export type TreatmentMedicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TreatmentMedicationWhereInput | TreatmentMedicationWhereInput[]
    OR?: TreatmentMedicationWhereInput[]
    NOT?: TreatmentMedicationWhereInput | TreatmentMedicationWhereInput[]
    treatmentId?: StringFilter<"TreatmentMedication"> | string
    medicationId?: StringFilter<"TreatmentMedication"> | string
    frequencyHours?: IntFilter<"TreatmentMedication"> | number
    durationDays?: IntFilter<"TreatmentMedication"> | number
    dosage?: StringFilter<"TreatmentMedication"> | string
    startDate?: DateTimeFilter<"TreatmentMedication"> | Date | string
    endDate?: DateTimeFilter<"TreatmentMedication"> | Date | string
    startAtSpecificTime?: BoolFilter<"TreatmentMedication"> | boolean
    specificStartTime?: DateTimeNullableFilter<"TreatmentMedication"> | Date | string | null
    isActive?: BoolFilter<"TreatmentMedication"> | boolean
    createdAt?: DateTimeFilter<"TreatmentMedication"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentMedication"> | Date | string
    treatment?: XOR<TreatmentScalarRelationFilter, TreatmentWhereInput>
    medication?: XOR<MedicationScalarRelationFilter, MedicationWhereInput>
  }, "id">

  export type TreatmentMedicationOrderByWithAggregationInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    medicationId?: SortOrder
    frequencyHours?: SortOrder
    durationDays?: SortOrder
    dosage?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startAtSpecificTime?: SortOrder
    specificStartTime?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TreatmentMedicationCountOrderByAggregateInput
    _avg?: TreatmentMedicationAvgOrderByAggregateInput
    _max?: TreatmentMedicationMaxOrderByAggregateInput
    _min?: TreatmentMedicationMinOrderByAggregateInput
    _sum?: TreatmentMedicationSumOrderByAggregateInput
  }

  export type TreatmentMedicationScalarWhereWithAggregatesInput = {
    AND?: TreatmentMedicationScalarWhereWithAggregatesInput | TreatmentMedicationScalarWhereWithAggregatesInput[]
    OR?: TreatmentMedicationScalarWhereWithAggregatesInput[]
    NOT?: TreatmentMedicationScalarWhereWithAggregatesInput | TreatmentMedicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TreatmentMedication"> | string
    treatmentId?: StringWithAggregatesFilter<"TreatmentMedication"> | string
    medicationId?: StringWithAggregatesFilter<"TreatmentMedication"> | string
    frequencyHours?: IntWithAggregatesFilter<"TreatmentMedication"> | number
    durationDays?: IntWithAggregatesFilter<"TreatmentMedication"> | number
    dosage?: StringWithAggregatesFilter<"TreatmentMedication"> | string
    startDate?: DateTimeWithAggregatesFilter<"TreatmentMedication"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"TreatmentMedication"> | Date | string
    startAtSpecificTime?: BoolWithAggregatesFilter<"TreatmentMedication"> | boolean
    specificStartTime?: DateTimeNullableWithAggregatesFilter<"TreatmentMedication"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"TreatmentMedication"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TreatmentMedication"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TreatmentMedication"> | Date | string
  }

  export type TreatmentImageWhereInput = {
    AND?: TreatmentImageWhereInput | TreatmentImageWhereInput[]
    OR?: TreatmentImageWhereInput[]
    NOT?: TreatmentImageWhereInput | TreatmentImageWhereInput[]
    id?: StringFilter<"TreatmentImage"> | string
    treatmentId?: StringFilter<"TreatmentImage"> | string
    imageUrl?: StringFilter<"TreatmentImage"> | string
    imageType?: StringFilter<"TreatmentImage"> | string
    extractedText?: StringNullableFilter<"TreatmentImage"> | string | null
    aiAnalysis?: StringNullableFilter<"TreatmentImage"> | string | null
    createdAt?: DateTimeFilter<"TreatmentImage"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentImage"> | Date | string
    treatment?: XOR<TreatmentScalarRelationFilter, TreatmentWhereInput>
  }

  export type TreatmentImageOrderByWithRelationInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    imageUrl?: SortOrder
    imageType?: SortOrder
    extractedText?: SortOrderInput | SortOrder
    aiAnalysis?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    treatment?: TreatmentOrderByWithRelationInput
  }

  export type TreatmentImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TreatmentImageWhereInput | TreatmentImageWhereInput[]
    OR?: TreatmentImageWhereInput[]
    NOT?: TreatmentImageWhereInput | TreatmentImageWhereInput[]
    treatmentId?: StringFilter<"TreatmentImage"> | string
    imageUrl?: StringFilter<"TreatmentImage"> | string
    imageType?: StringFilter<"TreatmentImage"> | string
    extractedText?: StringNullableFilter<"TreatmentImage"> | string | null
    aiAnalysis?: StringNullableFilter<"TreatmentImage"> | string | null
    createdAt?: DateTimeFilter<"TreatmentImage"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentImage"> | Date | string
    treatment?: XOR<TreatmentScalarRelationFilter, TreatmentWhereInput>
  }, "id">

  export type TreatmentImageOrderByWithAggregationInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    imageUrl?: SortOrder
    imageType?: SortOrder
    extractedText?: SortOrderInput | SortOrder
    aiAnalysis?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TreatmentImageCountOrderByAggregateInput
    _max?: TreatmentImageMaxOrderByAggregateInput
    _min?: TreatmentImageMinOrderByAggregateInput
  }

  export type TreatmentImageScalarWhereWithAggregatesInput = {
    AND?: TreatmentImageScalarWhereWithAggregatesInput | TreatmentImageScalarWhereWithAggregatesInput[]
    OR?: TreatmentImageScalarWhereWithAggregatesInput[]
    NOT?: TreatmentImageScalarWhereWithAggregatesInput | TreatmentImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TreatmentImage"> | string
    treatmentId?: StringWithAggregatesFilter<"TreatmentImage"> | string
    imageUrl?: StringWithAggregatesFilter<"TreatmentImage"> | string
    imageType?: StringWithAggregatesFilter<"TreatmentImage"> | string
    extractedText?: StringNullableWithAggregatesFilter<"TreatmentImage"> | string | null
    aiAnalysis?: StringNullableWithAggregatesFilter<"TreatmentImage"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TreatmentImage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TreatmentImage"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    treatmentId?: StringFilter<"Notification"> | string
    scheduledDate?: DateTimeFilter<"Notification"> | Date | string
    sent?: BoolFilter<"Notification"> | boolean
    type?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    treatment?: XOR<TreatmentScalarRelationFilter, TreatmentWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    scheduledDate?: SortOrder
    sent?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    treatment?: TreatmentOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    treatmentId?: StringFilter<"Notification"> | string
    scheduledDate?: DateTimeFilter<"Notification"> | Date | string
    sent?: BoolFilter<"Notification"> | boolean
    type?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    treatment?: XOR<TreatmentScalarRelationFilter, TreatmentWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    scheduledDate?: SortOrder
    sent?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    treatmentId?: StringWithAggregatesFilter<"Notification"> | string
    scheduledDate?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    sent?: BoolWithAggregatesFilter<"Notification"> | boolean
    type?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type NotificationPreferencesWhereInput = {
    AND?: NotificationPreferencesWhereInput | NotificationPreferencesWhereInput[]
    OR?: NotificationPreferencesWhereInput[]
    NOT?: NotificationPreferencesWhereInput | NotificationPreferencesWhereInput[]
    id?: StringFilter<"NotificationPreferences"> | string
    push?: BoolFilter<"NotificationPreferences"> | boolean
    sound?: BoolFilter<"NotificationPreferences"> | boolean
    email?: BoolFilter<"NotificationPreferences"> | boolean
    browser?: BoolFilter<"NotificationPreferences"> | boolean
    userId?: StringFilter<"NotificationPreferences"> | string
    createdAt?: DateTimeFilter<"NotificationPreferences"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationPreferences"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationPreferencesOrderByWithRelationInput = {
    id?: SortOrder
    push?: SortOrder
    sound?: SortOrder
    email?: SortOrder
    browser?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationPreferencesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: NotificationPreferencesWhereInput | NotificationPreferencesWhereInput[]
    OR?: NotificationPreferencesWhereInput[]
    NOT?: NotificationPreferencesWhereInput | NotificationPreferencesWhereInput[]
    push?: BoolFilter<"NotificationPreferences"> | boolean
    sound?: BoolFilter<"NotificationPreferences"> | boolean
    email?: BoolFilter<"NotificationPreferences"> | boolean
    browser?: BoolFilter<"NotificationPreferences"> | boolean
    createdAt?: DateTimeFilter<"NotificationPreferences"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationPreferences"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type NotificationPreferencesOrderByWithAggregationInput = {
    id?: SortOrder
    push?: SortOrder
    sound?: SortOrder
    email?: SortOrder
    browser?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationPreferencesCountOrderByAggregateInput
    _max?: NotificationPreferencesMaxOrderByAggregateInput
    _min?: NotificationPreferencesMinOrderByAggregateInput
  }

  export type NotificationPreferencesScalarWhereWithAggregatesInput = {
    AND?: NotificationPreferencesScalarWhereWithAggregatesInput | NotificationPreferencesScalarWhereWithAggregatesInput[]
    OR?: NotificationPreferencesScalarWhereWithAggregatesInput[]
    NOT?: NotificationPreferencesScalarWhereWithAggregatesInput | NotificationPreferencesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationPreferences"> | string
    push?: BoolWithAggregatesFilter<"NotificationPreferences"> | boolean
    sound?: BoolWithAggregatesFilter<"NotificationPreferences"> | boolean
    email?: BoolWithAggregatesFilter<"NotificationPreferences"> | boolean
    browser?: BoolWithAggregatesFilter<"NotificationPreferences"> | boolean
    userId?: StringWithAggregatesFilter<"NotificationPreferences"> | string
    createdAt?: DateTimeWithAggregatesFilter<"NotificationPreferences"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationPreferences"> | Date | string
  }

  export type PushSubscriptionWhereInput = {
    AND?: PushSubscriptionWhereInput | PushSubscriptionWhereInput[]
    OR?: PushSubscriptionWhereInput[]
    NOT?: PushSubscriptionWhereInput | PushSubscriptionWhereInput[]
    id?: StringFilter<"PushSubscription"> | string
    userId?: StringFilter<"PushSubscription"> | string
    endpoint?: StringFilter<"PushSubscription"> | string
    p256dhKey?: StringFilter<"PushSubscription"> | string
    authKey?: StringFilter<"PushSubscription"> | string
    createdAt?: DateTimeFilter<"PushSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"PushSubscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PushSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    p256dhKey?: SortOrder
    authKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PushSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_endpoint?: PushSubscriptionUserIdEndpointCompoundUniqueInput
    AND?: PushSubscriptionWhereInput | PushSubscriptionWhereInput[]
    OR?: PushSubscriptionWhereInput[]
    NOT?: PushSubscriptionWhereInput | PushSubscriptionWhereInput[]
    userId?: StringFilter<"PushSubscription"> | string
    endpoint?: StringFilter<"PushSubscription"> | string
    p256dhKey?: StringFilter<"PushSubscription"> | string
    authKey?: StringFilter<"PushSubscription"> | string
    createdAt?: DateTimeFilter<"PushSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"PushSubscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_endpoint">

  export type PushSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    p256dhKey?: SortOrder
    authKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PushSubscriptionCountOrderByAggregateInput
    _max?: PushSubscriptionMaxOrderByAggregateInput
    _min?: PushSubscriptionMinOrderByAggregateInput
  }

  export type PushSubscriptionScalarWhereWithAggregatesInput = {
    AND?: PushSubscriptionScalarWhereWithAggregatesInput | PushSubscriptionScalarWhereWithAggregatesInput[]
    OR?: PushSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: PushSubscriptionScalarWhereWithAggregatesInput | PushSubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PushSubscription"> | string
    userId?: StringWithAggregatesFilter<"PushSubscription"> | string
    endpoint?: StringWithAggregatesFilter<"PushSubscription"> | string
    p256dhKey?: StringWithAggregatesFilter<"PushSubscription"> | string
    authKey?: StringWithAggregatesFilter<"PushSubscription"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PushSubscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PushSubscription"> | Date | string
  }

  export type ShoppingItemWhereInput = {
    AND?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    OR?: ShoppingItemWhereInput[]
    NOT?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    id?: StringFilter<"ShoppingItem"> | string
    name?: StringFilter<"ShoppingItem"> | string
    presentation?: StringNullableFilter<"ShoppingItem"> | string | null
    laboratory?: StringNullableFilter<"ShoppingItem"> | string | null
    price?: FloatFilter<"ShoppingItem"> | number
    quantity?: IntFilter<"ShoppingItem"> | number
    shoppingListId?: StringFilter<"ShoppingItem"> | string
    createdAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    shoppingList?: XOR<ShoppingListScalarRelationFilter, ShoppingListWhereInput>
  }

  export type ShoppingItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    presentation?: SortOrderInput | SortOrder
    laboratory?: SortOrderInput | SortOrder
    price?: SortOrder
    quantity?: SortOrder
    shoppingListId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shoppingList?: ShoppingListOrderByWithRelationInput
  }

  export type ShoppingItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    OR?: ShoppingItemWhereInput[]
    NOT?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    name?: StringFilter<"ShoppingItem"> | string
    presentation?: StringNullableFilter<"ShoppingItem"> | string | null
    laboratory?: StringNullableFilter<"ShoppingItem"> | string | null
    price?: FloatFilter<"ShoppingItem"> | number
    quantity?: IntFilter<"ShoppingItem"> | number
    shoppingListId?: StringFilter<"ShoppingItem"> | string
    createdAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    shoppingList?: XOR<ShoppingListScalarRelationFilter, ShoppingListWhereInput>
  }, "id">

  export type ShoppingItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    presentation?: SortOrderInput | SortOrder
    laboratory?: SortOrderInput | SortOrder
    price?: SortOrder
    quantity?: SortOrder
    shoppingListId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShoppingItemCountOrderByAggregateInput
    _avg?: ShoppingItemAvgOrderByAggregateInput
    _max?: ShoppingItemMaxOrderByAggregateInput
    _min?: ShoppingItemMinOrderByAggregateInput
    _sum?: ShoppingItemSumOrderByAggregateInput
  }

  export type ShoppingItemScalarWhereWithAggregatesInput = {
    AND?: ShoppingItemScalarWhereWithAggregatesInput | ShoppingItemScalarWhereWithAggregatesInput[]
    OR?: ShoppingItemScalarWhereWithAggregatesInput[]
    NOT?: ShoppingItemScalarWhereWithAggregatesInput | ShoppingItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShoppingItem"> | string
    name?: StringWithAggregatesFilter<"ShoppingItem"> | string
    presentation?: StringNullableWithAggregatesFilter<"ShoppingItem"> | string | null
    laboratory?: StringNullableWithAggregatesFilter<"ShoppingItem"> | string | null
    price?: FloatWithAggregatesFilter<"ShoppingItem"> | number
    quantity?: IntWithAggregatesFilter<"ShoppingItem"> | number
    shoppingListId?: StringWithAggregatesFilter<"ShoppingItem"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShoppingItem"> | Date | string
  }

  export type ShoppingListWhereInput = {
    AND?: ShoppingListWhereInput | ShoppingListWhereInput[]
    OR?: ShoppingListWhereInput[]
    NOT?: ShoppingListWhereInput | ShoppingListWhereInput[]
    id?: StringFilter<"ShoppingList"> | string
    name?: StringFilter<"ShoppingList"> | string
    total?: FloatFilter<"ShoppingList"> | number
    isArchived?: BoolFilter<"ShoppingList"> | boolean
    userId?: StringFilter<"ShoppingList"> | string
    createdAt?: DateTimeFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingList"> | Date | string
    items?: ShoppingItemListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ShoppingListOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    total?: SortOrder
    isArchived?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    items?: ShoppingItemOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type ShoppingListWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShoppingListWhereInput | ShoppingListWhereInput[]
    OR?: ShoppingListWhereInput[]
    NOT?: ShoppingListWhereInput | ShoppingListWhereInput[]
    name?: StringFilter<"ShoppingList"> | string
    total?: FloatFilter<"ShoppingList"> | number
    isArchived?: BoolFilter<"ShoppingList"> | boolean
    userId?: StringFilter<"ShoppingList"> | string
    createdAt?: DateTimeFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingList"> | Date | string
    items?: ShoppingItemListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ShoppingListOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    total?: SortOrder
    isArchived?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShoppingListCountOrderByAggregateInput
    _avg?: ShoppingListAvgOrderByAggregateInput
    _max?: ShoppingListMaxOrderByAggregateInput
    _min?: ShoppingListMinOrderByAggregateInput
    _sum?: ShoppingListSumOrderByAggregateInput
  }

  export type ShoppingListScalarWhereWithAggregatesInput = {
    AND?: ShoppingListScalarWhereWithAggregatesInput | ShoppingListScalarWhereWithAggregatesInput[]
    OR?: ShoppingListScalarWhereWithAggregatesInput[]
    NOT?: ShoppingListScalarWhereWithAggregatesInput | ShoppingListScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShoppingList"> | string
    name?: StringWithAggregatesFilter<"ShoppingList"> | string
    total?: FloatWithAggregatesFilter<"ShoppingList"> | number
    isArchived?: BoolWithAggregatesFilter<"ShoppingList"> | boolean
    userId?: StringWithAggregatesFilter<"ShoppingList"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShoppingList"> | Date | string
  }

  export type GrupoFamiliarWhereInput = {
    AND?: GrupoFamiliarWhereInput | GrupoFamiliarWhereInput[]
    OR?: GrupoFamiliarWhereInput[]
    NOT?: GrupoFamiliarWhereInput | GrupoFamiliarWhereInput[]
    id?: StringFilter<"GrupoFamiliar"> | string
    nombre?: StringFilter<"GrupoFamiliar"> | string
    creadorId?: StringFilter<"GrupoFamiliar"> | string
    createdAt?: DateTimeFilter<"GrupoFamiliar"> | Date | string
    updatedAt?: DateTimeFilter<"GrupoFamiliar"> | Date | string
    creador?: XOR<UserScalarRelationFilter, UserWhereInput>
    integrantes?: UserListRelationFilter
    perfilesMenores?: PerfilMenorListRelationFilter
    tomas?: TomaListRelationFilter
  }

  export type GrupoFamiliarOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    creadorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creador?: UserOrderByWithRelationInput
    integrantes?: UserOrderByRelationAggregateInput
    perfilesMenores?: PerfilMenorOrderByRelationAggregateInput
    tomas?: TomaOrderByRelationAggregateInput
  }

  export type GrupoFamiliarWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GrupoFamiliarWhereInput | GrupoFamiliarWhereInput[]
    OR?: GrupoFamiliarWhereInput[]
    NOT?: GrupoFamiliarWhereInput | GrupoFamiliarWhereInput[]
    nombre?: StringFilter<"GrupoFamiliar"> | string
    creadorId?: StringFilter<"GrupoFamiliar"> | string
    createdAt?: DateTimeFilter<"GrupoFamiliar"> | Date | string
    updatedAt?: DateTimeFilter<"GrupoFamiliar"> | Date | string
    creador?: XOR<UserScalarRelationFilter, UserWhereInput>
    integrantes?: UserListRelationFilter
    perfilesMenores?: PerfilMenorListRelationFilter
    tomas?: TomaListRelationFilter
  }, "id">

  export type GrupoFamiliarOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    creadorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GrupoFamiliarCountOrderByAggregateInput
    _max?: GrupoFamiliarMaxOrderByAggregateInput
    _min?: GrupoFamiliarMinOrderByAggregateInput
  }

  export type GrupoFamiliarScalarWhereWithAggregatesInput = {
    AND?: GrupoFamiliarScalarWhereWithAggregatesInput | GrupoFamiliarScalarWhereWithAggregatesInput[]
    OR?: GrupoFamiliarScalarWhereWithAggregatesInput[]
    NOT?: GrupoFamiliarScalarWhereWithAggregatesInput | GrupoFamiliarScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GrupoFamiliar"> | string
    nombre?: StringWithAggregatesFilter<"GrupoFamiliar"> | string
    creadorId?: StringWithAggregatesFilter<"GrupoFamiliar"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GrupoFamiliar"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GrupoFamiliar"> | Date | string
  }

  export type PerfilMenorWhereInput = {
    AND?: PerfilMenorWhereInput | PerfilMenorWhereInput[]
    OR?: PerfilMenorWhereInput[]
    NOT?: PerfilMenorWhereInput | PerfilMenorWhereInput[]
    id?: StringFilter<"PerfilMenor"> | string
    nombre?: StringFilter<"PerfilMenor"> | string
    dni?: StringFilter<"PerfilMenor"> | string
    fechaNacimiento?: DateTimeFilter<"PerfilMenor"> | Date | string
    foto?: StringNullableFilter<"PerfilMenor"> | string | null
    grupoId?: StringFilter<"PerfilMenor"> | string
    createdAt?: DateTimeFilter<"PerfilMenor"> | Date | string
    updatedAt?: DateTimeFilter<"PerfilMenor"> | Date | string
    grupo?: XOR<GrupoFamiliarScalarRelationFilter, GrupoFamiliarWhereInput>
    tomas?: TomaListRelationFilter
  }

  export type PerfilMenorOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    fechaNacimiento?: SortOrder
    foto?: SortOrderInput | SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    grupo?: GrupoFamiliarOrderByWithRelationInput
    tomas?: TomaOrderByRelationAggregateInput
  }

  export type PerfilMenorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    dni?: string
    AND?: PerfilMenorWhereInput | PerfilMenorWhereInput[]
    OR?: PerfilMenorWhereInput[]
    NOT?: PerfilMenorWhereInput | PerfilMenorWhereInput[]
    nombre?: StringFilter<"PerfilMenor"> | string
    fechaNacimiento?: DateTimeFilter<"PerfilMenor"> | Date | string
    foto?: StringNullableFilter<"PerfilMenor"> | string | null
    grupoId?: StringFilter<"PerfilMenor"> | string
    createdAt?: DateTimeFilter<"PerfilMenor"> | Date | string
    updatedAt?: DateTimeFilter<"PerfilMenor"> | Date | string
    grupo?: XOR<GrupoFamiliarScalarRelationFilter, GrupoFamiliarWhereInput>
    tomas?: TomaListRelationFilter
  }, "id" | "dni">

  export type PerfilMenorOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    fechaNacimiento?: SortOrder
    foto?: SortOrderInput | SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PerfilMenorCountOrderByAggregateInput
    _max?: PerfilMenorMaxOrderByAggregateInput
    _min?: PerfilMenorMinOrderByAggregateInput
  }

  export type PerfilMenorScalarWhereWithAggregatesInput = {
    AND?: PerfilMenorScalarWhereWithAggregatesInput | PerfilMenorScalarWhereWithAggregatesInput[]
    OR?: PerfilMenorScalarWhereWithAggregatesInput[]
    NOT?: PerfilMenorScalarWhereWithAggregatesInput | PerfilMenorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PerfilMenor"> | string
    nombre?: StringWithAggregatesFilter<"PerfilMenor"> | string
    dni?: StringWithAggregatesFilter<"PerfilMenor"> | string
    fechaNacimiento?: DateTimeWithAggregatesFilter<"PerfilMenor"> | Date | string
    foto?: StringNullableWithAggregatesFilter<"PerfilMenor"> | string | null
    grupoId?: StringWithAggregatesFilter<"PerfilMenor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PerfilMenor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PerfilMenor"> | Date | string
  }

  export type TomaWhereInput = {
    AND?: TomaWhereInput | TomaWhereInput[]
    OR?: TomaWhereInput[]
    NOT?: TomaWhereInput | TomaWhereInput[]
    id?: StringFilter<"Toma"> | string
    medicamentoId?: StringFilter<"Toma"> | string
    consumidorUsuarioId?: StringNullableFilter<"Toma"> | string | null
    consumidorPerfilId?: StringNullableFilter<"Toma"> | string | null
    registranteId?: StringFilter<"Toma"> | string
    fechaHora?: DateTimeFilter<"Toma"> | Date | string
    grupoId?: StringFilter<"Toma"> | string
    createdAt?: DateTimeFilter<"Toma"> | Date | string
    updatedAt?: DateTimeFilter<"Toma"> | Date | string
    medicamento?: XOR<MedicationScalarRelationFilter, MedicationWhereInput>
    consumidorUsuario?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    consumidorPerfil?: XOR<PerfilMenorNullableScalarRelationFilter, PerfilMenorWhereInput> | null
    registrante?: XOR<UserScalarRelationFilter, UserWhereInput>
    grupo?: XOR<GrupoFamiliarScalarRelationFilter, GrupoFamiliarWhereInput>
  }

  export type TomaOrderByWithRelationInput = {
    id?: SortOrder
    medicamentoId?: SortOrder
    consumidorUsuarioId?: SortOrderInput | SortOrder
    consumidorPerfilId?: SortOrderInput | SortOrder
    registranteId?: SortOrder
    fechaHora?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    medicamento?: MedicationOrderByWithRelationInput
    consumidorUsuario?: UserOrderByWithRelationInput
    consumidorPerfil?: PerfilMenorOrderByWithRelationInput
    registrante?: UserOrderByWithRelationInput
    grupo?: GrupoFamiliarOrderByWithRelationInput
  }

  export type TomaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TomaWhereInput | TomaWhereInput[]
    OR?: TomaWhereInput[]
    NOT?: TomaWhereInput | TomaWhereInput[]
    medicamentoId?: StringFilter<"Toma"> | string
    consumidorUsuarioId?: StringNullableFilter<"Toma"> | string | null
    consumidorPerfilId?: StringNullableFilter<"Toma"> | string | null
    registranteId?: StringFilter<"Toma"> | string
    fechaHora?: DateTimeFilter<"Toma"> | Date | string
    grupoId?: StringFilter<"Toma"> | string
    createdAt?: DateTimeFilter<"Toma"> | Date | string
    updatedAt?: DateTimeFilter<"Toma"> | Date | string
    medicamento?: XOR<MedicationScalarRelationFilter, MedicationWhereInput>
    consumidorUsuario?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    consumidorPerfil?: XOR<PerfilMenorNullableScalarRelationFilter, PerfilMenorWhereInput> | null
    registrante?: XOR<UserScalarRelationFilter, UserWhereInput>
    grupo?: XOR<GrupoFamiliarScalarRelationFilter, GrupoFamiliarWhereInput>
  }, "id">

  export type TomaOrderByWithAggregationInput = {
    id?: SortOrder
    medicamentoId?: SortOrder
    consumidorUsuarioId?: SortOrderInput | SortOrder
    consumidorPerfilId?: SortOrderInput | SortOrder
    registranteId?: SortOrder
    fechaHora?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TomaCountOrderByAggregateInput
    _max?: TomaMaxOrderByAggregateInput
    _min?: TomaMinOrderByAggregateInput
  }

  export type TomaScalarWhereWithAggregatesInput = {
    AND?: TomaScalarWhereWithAggregatesInput | TomaScalarWhereWithAggregatesInput[]
    OR?: TomaScalarWhereWithAggregatesInput[]
    NOT?: TomaScalarWhereWithAggregatesInput | TomaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Toma"> | string
    medicamentoId?: StringWithAggregatesFilter<"Toma"> | string
    consumidorUsuarioId?: StringNullableWithAggregatesFilter<"Toma"> | string | null
    consumidorPerfilId?: StringNullableWithAggregatesFilter<"Toma"> | string | null
    registranteId?: StringWithAggregatesFilter<"Toma"> | string
    fechaHora?: DateTimeWithAggregatesFilter<"Toma"> | Date | string
    grupoId?: StringWithAggregatesFilter<"Toma"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Toma"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Toma"> | Date | string
  }

  export type HistorialWhereInput = {
    AND?: HistorialWhereInput | HistorialWhereInput[]
    OR?: HistorialWhereInput[]
    NOT?: HistorialWhereInput | HistorialWhereInput[]
    id?: StringFilter<"Historial"> | string
    usuarioId?: StringFilter<"Historial"> | string
    tipoAccion?: StringFilter<"Historial"> | string
    entidadTipo?: StringFilter<"Historial"> | string
    entidadId?: StringNullableFilter<"Historial"> | string | null
    datosPrevios?: StringNullableFilter<"Historial"> | string | null
    datosPosteriores?: StringNullableFilter<"Historial"> | string | null
    metadata?: StringNullableFilter<"Historial"> | string | null
    createdAt?: DateTimeFilter<"Historial"> | Date | string
    usuario?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type HistorialOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoAccion?: SortOrder
    entidadTipo?: SortOrder
    entidadId?: SortOrderInput | SortOrder
    datosPrevios?: SortOrderInput | SortOrder
    datosPosteriores?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    usuario?: UserOrderByWithRelationInput
  }

  export type HistorialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HistorialWhereInput | HistorialWhereInput[]
    OR?: HistorialWhereInput[]
    NOT?: HistorialWhereInput | HistorialWhereInput[]
    usuarioId?: StringFilter<"Historial"> | string
    tipoAccion?: StringFilter<"Historial"> | string
    entidadTipo?: StringFilter<"Historial"> | string
    entidadId?: StringNullableFilter<"Historial"> | string | null
    datosPrevios?: StringNullableFilter<"Historial"> | string | null
    datosPosteriores?: StringNullableFilter<"Historial"> | string | null
    metadata?: StringNullableFilter<"Historial"> | string | null
    createdAt?: DateTimeFilter<"Historial"> | Date | string
    usuario?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type HistorialOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoAccion?: SortOrder
    entidadTipo?: SortOrder
    entidadId?: SortOrderInput | SortOrder
    datosPrevios?: SortOrderInput | SortOrder
    datosPosteriores?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: HistorialCountOrderByAggregateInput
    _max?: HistorialMaxOrderByAggregateInput
    _min?: HistorialMinOrderByAggregateInput
  }

  export type HistorialScalarWhereWithAggregatesInput = {
    AND?: HistorialScalarWhereWithAggregatesInput | HistorialScalarWhereWithAggregatesInput[]
    OR?: HistorialScalarWhereWithAggregatesInput[]
    NOT?: HistorialScalarWhereWithAggregatesInput | HistorialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Historial"> | string
    usuarioId?: StringWithAggregatesFilter<"Historial"> | string
    tipoAccion?: StringWithAggregatesFilter<"Historial"> | string
    entidadTipo?: StringWithAggregatesFilter<"Historial"> | string
    entidadId?: StringNullableWithAggregatesFilter<"Historial"> | string | null
    datosPrevios?: StringNullableWithAggregatesFilter<"Historial"> | string | null
    datosPosteriores?: StringNullableWithAggregatesFilter<"Historial"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"Historial"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Historial"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    medications?: MedicationCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    medications?: MedicationUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicationCreateInput = {
    id?: string
    commercialName: string
    activeIngredient?: string | null
    description?: string | null
    intakeRecommendations?: string | null
    imageUrl?: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date | string
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMedicationsInput
    treatmentMedications?: TreatmentMedicationCreateNestedManyWithoutMedicationInput
    tomas?: TomaCreateNestedManyWithoutMedicamentoInput
  }

  export type MedicationUncheckedCreateInput = {
    id?: string
    commercialName: string
    activeIngredient?: string | null
    description?: string | null
    intakeRecommendations?: string | null
    imageUrl?: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date | string
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    treatmentMedications?: TreatmentMedicationUncheckedCreateNestedManyWithoutMedicationInput
    tomas?: TomaUncheckedCreateNestedManyWithoutMedicamentoInput
  }

  export type MedicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMedicationsNestedInput
    treatmentMedications?: TreatmentMedicationUpdateManyWithoutMedicationNestedInput
    tomas?: TomaUpdateManyWithoutMedicamentoNestedInput
  }

  export type MedicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    treatmentMedications?: TreatmentMedicationUncheckedUpdateManyWithoutMedicationNestedInput
    tomas?: TomaUncheckedUpdateManyWithoutMedicamentoNestedInput
  }

  export type MedicationCreateManyInput = {
    id?: string
    commercialName: string
    activeIngredient?: string | null
    description?: string | null
    intakeRecommendations?: string | null
    imageUrl?: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date | string
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type MedicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationSettingsCreateInput = {
    id?: string
    daysBeforeExpiration?: number
    lowStockThreshold?: number
    user: UserCreateNestedOneWithoutNotificationSettingsInput
  }

  export type NotificationSettingsUncheckedCreateInput = {
    id?: string
    daysBeforeExpiration?: number
    lowStockThreshold?: number
    userId: string
  }

  export type NotificationSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    daysBeforeExpiration?: IntFieldUpdateOperationsInput | number
    lowStockThreshold?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutNotificationSettingsNestedInput
  }

  export type NotificationSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    daysBeforeExpiration?: IntFieldUpdateOperationsInput | number
    lowStockThreshold?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationSettingsCreateManyInput = {
    id?: string
    daysBeforeExpiration?: number
    lowStockThreshold?: number
    userId: string
  }

  export type NotificationSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    daysBeforeExpiration?: IntFieldUpdateOperationsInput | number
    lowStockThreshold?: FloatFieldUpdateOperationsInput | number
  }

  export type NotificationSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    daysBeforeExpiration?: IntFieldUpdateOperationsInput | number
    lowStockThreshold?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TreatmentCreateInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTreatmentsInput
    notifications?: NotificationCreateNestedManyWithoutTreatmentInput
    medications?: TreatmentMedicationCreateNestedManyWithoutTreatmentInput
    images?: TreatmentImageCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutTreatmentInput
    medications?: TreatmentMedicationUncheckedCreateNestedManyWithoutTreatmentInput
    images?: TreatmentImageUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTreatmentsNestedInput
    notifications?: NotificationUpdateManyWithoutTreatmentNestedInput
    medications?: TreatmentMedicationUpdateManyWithoutTreatmentNestedInput
    images?: TreatmentImageUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutTreatmentNestedInput
    medications?: TreatmentMedicationUncheckedUpdateManyWithoutTreatmentNestedInput
    images?: TreatmentImageUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentCreateManyInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentMedicationCreateInput = {
    id?: string
    frequencyHours: number
    durationDays: number
    dosage: string
    startDate: Date | string
    endDate: Date | string
    startAtSpecificTime?: boolean
    specificStartTime?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    treatment: TreatmentCreateNestedOneWithoutMedicationsInput
    medication: MedicationCreateNestedOneWithoutTreatmentMedicationsInput
  }

  export type TreatmentMedicationUncheckedCreateInput = {
    id?: string
    treatmentId: string
    medicationId: string
    frequencyHours: number
    durationDays: number
    dosage: string
    startDate: Date | string
    endDate: Date | string
    startAtSpecificTime?: boolean
    specificStartTime?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentMedicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    frequencyHours?: IntFieldUpdateOperationsInput | number
    durationDays?: IntFieldUpdateOperationsInput | number
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startAtSpecificTime?: BoolFieldUpdateOperationsInput | boolean
    specificStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatment?: TreatmentUpdateOneRequiredWithoutMedicationsNestedInput
    medication?: MedicationUpdateOneRequiredWithoutTreatmentMedicationsNestedInput
  }

  export type TreatmentMedicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentId?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    frequencyHours?: IntFieldUpdateOperationsInput | number
    durationDays?: IntFieldUpdateOperationsInput | number
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startAtSpecificTime?: BoolFieldUpdateOperationsInput | boolean
    specificStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentMedicationCreateManyInput = {
    id?: string
    treatmentId: string
    medicationId: string
    frequencyHours: number
    durationDays: number
    dosage: string
    startDate: Date | string
    endDate: Date | string
    startAtSpecificTime?: boolean
    specificStartTime?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentMedicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    frequencyHours?: IntFieldUpdateOperationsInput | number
    durationDays?: IntFieldUpdateOperationsInput | number
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startAtSpecificTime?: BoolFieldUpdateOperationsInput | boolean
    specificStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentMedicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentId?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    frequencyHours?: IntFieldUpdateOperationsInput | number
    durationDays?: IntFieldUpdateOperationsInput | number
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startAtSpecificTime?: BoolFieldUpdateOperationsInput | boolean
    specificStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentImageCreateInput = {
    id?: string
    imageUrl: string
    imageType: string
    extractedText?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    treatment: TreatmentCreateNestedOneWithoutImagesInput
  }

  export type TreatmentImageUncheckedCreateInput = {
    id?: string
    treatmentId: string
    imageUrl: string
    imageType: string
    extractedText?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageType?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatment?: TreatmentUpdateOneRequiredWithoutImagesNestedInput
  }

  export type TreatmentImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentId?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageType?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentImageCreateManyInput = {
    id?: string
    treatmentId: string
    imageUrl: string
    imageType: string
    extractedText?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageType?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentId?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageType?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    scheduledDate: Date | string
    sent?: boolean
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
    treatment: TreatmentCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    treatmentId: string
    scheduledDate: Date | string
    sent?: boolean
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatment?: TreatmentUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    treatmentId: string
    scheduledDate: Date | string
    sent?: boolean
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferencesCreateInput = {
    id?: string
    push?: boolean
    sound?: boolean
    email?: boolean
    browser?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationPreferencesInput
  }

  export type NotificationPreferencesUncheckedCreateInput = {
    id?: string
    push?: boolean
    sound?: boolean
    email?: boolean
    browser?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferencesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    push?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    browser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationPreferencesNestedInput
  }

  export type NotificationPreferencesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    push?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    browser?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferencesCreateManyInput = {
    id?: string
    push?: boolean
    sound?: boolean
    email?: boolean
    browser?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferencesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    push?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    browser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferencesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    push?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    browser?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionCreateInput = {
    id?: string
    endpoint: string
    p256dhKey: string
    authKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPushSubscriptionsInput
  }

  export type PushSubscriptionUncheckedCreateInput = {
    id?: string
    userId: string
    endpoint: string
    p256dhKey: string
    authKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushSubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dhKey?: StringFieldUpdateOperationsInput | string
    authKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPushSubscriptionsNestedInput
  }

  export type PushSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dhKey?: StringFieldUpdateOperationsInput | string
    authKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionCreateManyInput = {
    id?: string
    userId: string
    endpoint: string
    p256dhKey: string
    authKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushSubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dhKey?: StringFieldUpdateOperationsInput | string
    authKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dhKey?: StringFieldUpdateOperationsInput | string
    authKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemCreateInput = {
    id?: string
    name: string
    presentation?: string | null
    laboratory?: string | null
    price: number
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    shoppingList: ShoppingListCreateNestedOneWithoutItemsInput
  }

  export type ShoppingItemUncheckedCreateInput = {
    id?: string
    name: string
    presentation?: string | null
    laboratory?: string | null
    price: number
    quantity?: number
    shoppingListId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    laboratory?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shoppingList?: ShoppingListUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ShoppingItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    laboratory?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    shoppingListId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemCreateManyInput = {
    id?: string
    name: string
    presentation?: string | null
    laboratory?: string | null
    price: number
    quantity?: number
    shoppingListId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    laboratory?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    laboratory?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    shoppingListId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListCreateInput = {
    id?: string
    name: string
    total: number
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ShoppingItemCreateNestedManyWithoutShoppingListInput
    user: UserCreateNestedOneWithoutShoppingListsInput
  }

  export type ShoppingListUncheckedCreateInput = {
    id?: string
    name: string
    total: number
    isArchived?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ShoppingItemUncheckedCreateNestedManyWithoutShoppingListInput
  }

  export type ShoppingListUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ShoppingItemUpdateManyWithoutShoppingListNestedInput
    user?: UserUpdateOneRequiredWithoutShoppingListsNestedInput
  }

  export type ShoppingListUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ShoppingItemUncheckedUpdateManyWithoutShoppingListNestedInput
  }

  export type ShoppingListCreateManyInput = {
    id?: string
    name: string
    total: number
    isArchived?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingListUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoFamiliarCreateInput = {
    id?: string
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creador: UserCreateNestedOneWithoutGrupoCreadoInput
    integrantes?: UserCreateNestedManyWithoutGrupoInput
    perfilesMenores?: PerfilMenorCreateNestedManyWithoutGrupoInput
    tomas?: TomaCreateNestedManyWithoutGrupoInput
  }

  export type GrupoFamiliarUncheckedCreateInput = {
    id?: string
    nombre: string
    creadorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    integrantes?: UserUncheckedCreateNestedManyWithoutGrupoInput
    perfilesMenores?: PerfilMenorUncheckedCreateNestedManyWithoutGrupoInput
    tomas?: TomaUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GrupoFamiliarUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creador?: UserUpdateOneRequiredWithoutGrupoCreadoNestedInput
    integrantes?: UserUpdateManyWithoutGrupoNestedInput
    perfilesMenores?: PerfilMenorUpdateManyWithoutGrupoNestedInput
    tomas?: TomaUpdateManyWithoutGrupoNestedInput
  }

  export type GrupoFamiliarUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    creadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrantes?: UserUncheckedUpdateManyWithoutGrupoNestedInput
    perfilesMenores?: PerfilMenorUncheckedUpdateManyWithoutGrupoNestedInput
    tomas?: TomaUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type GrupoFamiliarCreateManyInput = {
    id?: string
    nombre: string
    creadorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrupoFamiliarUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoFamiliarUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    creadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerfilMenorCreateInput = {
    id?: string
    nombre: string
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GrupoFamiliarCreateNestedOneWithoutPerfilesMenoresInput
    tomas?: TomaCreateNestedManyWithoutConsumidorPerfilInput
  }

  export type PerfilMenorUncheckedCreateInput = {
    id?: string
    nombre: string
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tomas?: TomaUncheckedCreateNestedManyWithoutConsumidorPerfilInput
  }

  export type PerfilMenorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneRequiredWithoutPerfilesMenoresNestedInput
    tomas?: TomaUpdateManyWithoutConsumidorPerfilNestedInput
  }

  export type PerfilMenorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tomas?: TomaUncheckedUpdateManyWithoutConsumidorPerfilNestedInput
  }

  export type PerfilMenorCreateManyInput = {
    id?: string
    nombre: string
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerfilMenorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerfilMenorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaCreateInput = {
    id?: string
    fechaHora?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    medicamento: MedicationCreateNestedOneWithoutTomasInput
    consumidorUsuario?: UserCreateNestedOneWithoutTomasConsumidasInput
    consumidorPerfil?: PerfilMenorCreateNestedOneWithoutTomasInput
    registrante: UserCreateNestedOneWithoutTomasRegistradasInput
    grupo: GrupoFamiliarCreateNestedOneWithoutTomasInput
  }

  export type TomaUncheckedCreateInput = {
    id?: string
    medicamentoId: string
    consumidorUsuarioId?: string | null
    consumidorPerfilId?: string | null
    registranteId: string
    fechaHora?: Date | string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicamento?: MedicationUpdateOneRequiredWithoutTomasNestedInput
    consumidorUsuario?: UserUpdateOneWithoutTomasConsumidasNestedInput
    consumidorPerfil?: PerfilMenorUpdateOneWithoutTomasNestedInput
    registrante?: UserUpdateOneRequiredWithoutTomasRegistradasNestedInput
    grupo?: GrupoFamiliarUpdateOneRequiredWithoutTomasNestedInput
  }

  export type TomaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicamentoId?: StringFieldUpdateOperationsInput | string
    consumidorUsuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    consumidorPerfilId?: NullableStringFieldUpdateOperationsInput | string | null
    registranteId?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaCreateManyInput = {
    id?: string
    medicamentoId: string
    consumidorUsuarioId?: string | null
    consumidorPerfilId?: string | null
    registranteId: string
    fechaHora?: Date | string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicamentoId?: StringFieldUpdateOperationsInput | string
    consumidorUsuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    consumidorPerfilId?: NullableStringFieldUpdateOperationsInput | string | null
    registranteId?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistorialCreateInput = {
    id?: string
    tipoAccion: string
    entidadTipo: string
    entidadId?: string | null
    datosPrevios?: string | null
    datosPosteriores?: string | null
    metadata?: string | null
    createdAt?: Date | string
    usuario: UserCreateNestedOneWithoutHistorialInput
  }

  export type HistorialUncheckedCreateInput = {
    id?: string
    usuarioId: string
    tipoAccion: string
    entidadTipo: string
    entidadId?: string | null
    datosPrevios?: string | null
    datosPosteriores?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type HistorialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    entidadTipo?: StringFieldUpdateOperationsInput | string
    entidadId?: NullableStringFieldUpdateOperationsInput | string | null
    datosPrevios?: NullableStringFieldUpdateOperationsInput | string | null
    datosPosteriores?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UserUpdateOneRequiredWithoutHistorialNestedInput
  }

  export type HistorialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    entidadTipo?: StringFieldUpdateOperationsInput | string
    entidadId?: NullableStringFieldUpdateOperationsInput | string | null
    datosPrevios?: NullableStringFieldUpdateOperationsInput | string | null
    datosPosteriores?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistorialCreateManyInput = {
    id?: string
    usuarioId: string
    tipoAccion: string
    entidadTipo: string
    entidadId?: string | null
    datosPrevios?: string | null
    datosPosteriores?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type HistorialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    entidadTipo?: StringFieldUpdateOperationsInput | string
    entidadId?: NullableStringFieldUpdateOperationsInput | string | null
    datosPrevios?: NullableStringFieldUpdateOperationsInput | string | null
    datosPosteriores?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistorialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    entidadTipo?: StringFieldUpdateOperationsInput | string
    entidadId?: NullableStringFieldUpdateOperationsInput | string | null
    datosPrevios?: NullableStringFieldUpdateOperationsInput | string | null
    datosPosteriores?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type GrupoFamiliarNullableScalarRelationFilter = {
    is?: GrupoFamiliarWhereInput | null
    isNot?: GrupoFamiliarWhereInput | null
  }

  export type MedicationListRelationFilter = {
    every?: MedicationWhereInput
    some?: MedicationWhereInput
    none?: MedicationWhereInput
  }

  export type NotificationSettingsNullableScalarRelationFilter = {
    is?: NotificationSettingsWhereInput | null
    isNot?: NotificationSettingsWhereInput | null
  }

  export type TreatmentListRelationFilter = {
    every?: TreatmentWhereInput
    some?: TreatmentWhereInput
    none?: TreatmentWhereInput
  }

  export type NotificationPreferencesNullableScalarRelationFilter = {
    is?: NotificationPreferencesWhereInput | null
    isNot?: NotificationPreferencesWhereInput | null
  }

  export type PushSubscriptionListRelationFilter = {
    every?: PushSubscriptionWhereInput
    some?: PushSubscriptionWhereInput
    none?: PushSubscriptionWhereInput
  }

  export type ShoppingListListRelationFilter = {
    every?: ShoppingListWhereInput
    some?: ShoppingListWhereInput
    none?: ShoppingListWhereInput
  }

  export type TomaListRelationFilter = {
    every?: TomaWhereInput
    some?: TomaWhereInput
    none?: TomaWhereInput
  }

  export type GrupoFamiliarListRelationFilter = {
    every?: GrupoFamiliarWhereInput
    some?: GrupoFamiliarWhereInput
    none?: GrupoFamiliarWhereInput
  }

  export type HistorialListRelationFilter = {
    every?: HistorialWhereInput
    some?: HistorialWhereInput
    none?: HistorialWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MedicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TreatmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PushSubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShoppingListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TomaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GrupoFamiliarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistorialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    dni?: SortOrder
    fechaNacimiento?: SortOrder
    foto?: SortOrder
    password?: SortOrder
    rol?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    dni?: SortOrder
    fechaNacimiento?: SortOrder
    foto?: SortOrder
    password?: SortOrder
    rol?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    dni?: SortOrder
    fechaNacimiento?: SortOrder
    foto?: SortOrder
    password?: SortOrder
    rol?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TreatmentMedicationListRelationFilter = {
    every?: TreatmentMedicationWhereInput
    some?: TreatmentMedicationWhereInput
    none?: TreatmentMedicationWhereInput
  }

  export type TreatmentMedicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicationCountOrderByAggregateInput = {
    id?: SortOrder
    commercialName?: SortOrder
    activeIngredient?: SortOrder
    description?: SortOrder
    intakeRecommendations?: SortOrder
    imageUrl?: SortOrder
    initialQuantity?: SortOrder
    currentQuantity?: SortOrder
    unit?: SortOrder
    expirationDate?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type MedicationAvgOrderByAggregateInput = {
    initialQuantity?: SortOrder
    currentQuantity?: SortOrder
  }

  export type MedicationMaxOrderByAggregateInput = {
    id?: SortOrder
    commercialName?: SortOrder
    activeIngredient?: SortOrder
    description?: SortOrder
    intakeRecommendations?: SortOrder
    imageUrl?: SortOrder
    initialQuantity?: SortOrder
    currentQuantity?: SortOrder
    unit?: SortOrder
    expirationDate?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type MedicationMinOrderByAggregateInput = {
    id?: SortOrder
    commercialName?: SortOrder
    activeIngredient?: SortOrder
    description?: SortOrder
    intakeRecommendations?: SortOrder
    imageUrl?: SortOrder
    initialQuantity?: SortOrder
    currentQuantity?: SortOrder
    unit?: SortOrder
    expirationDate?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type MedicationSumOrderByAggregateInput = {
    initialQuantity?: SortOrder
    currentQuantity?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NotificationSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    daysBeforeExpiration?: SortOrder
    lowStockThreshold?: SortOrder
    userId?: SortOrder
  }

  export type NotificationSettingsAvgOrderByAggregateInput = {
    daysBeforeExpiration?: SortOrder
    lowStockThreshold?: SortOrder
  }

  export type NotificationSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    daysBeforeExpiration?: SortOrder
    lowStockThreshold?: SortOrder
    userId?: SortOrder
  }

  export type NotificationSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    daysBeforeExpiration?: SortOrder
    lowStockThreshold?: SortOrder
    userId?: SortOrder
  }

  export type NotificationSettingsSumOrderByAggregateInput = {
    daysBeforeExpiration?: SortOrder
    lowStockThreshold?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type TreatmentImageListRelationFilter = {
    every?: TreatmentImageWhereInput
    some?: TreatmentImageWhereInput
    none?: TreatmentImageWhereInput
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TreatmentImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TreatmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    patient?: SortOrder
    patientId?: SortOrder
    patientType?: SortOrder
    symptoms?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    patient?: SortOrder
    patientId?: SortOrder
    patientType?: SortOrder
    symptoms?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    patient?: SortOrder
    patientId?: SortOrder
    patientType?: SortOrder
    symptoms?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type TreatmentScalarRelationFilter = {
    is?: TreatmentWhereInput
    isNot?: TreatmentWhereInput
  }

  export type MedicationScalarRelationFilter = {
    is?: MedicationWhereInput
    isNot?: MedicationWhereInput
  }

  export type TreatmentMedicationCountOrderByAggregateInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    medicationId?: SortOrder
    frequencyHours?: SortOrder
    durationDays?: SortOrder
    dosage?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startAtSpecificTime?: SortOrder
    specificStartTime?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentMedicationAvgOrderByAggregateInput = {
    frequencyHours?: SortOrder
    durationDays?: SortOrder
  }

  export type TreatmentMedicationMaxOrderByAggregateInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    medicationId?: SortOrder
    frequencyHours?: SortOrder
    durationDays?: SortOrder
    dosage?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startAtSpecificTime?: SortOrder
    specificStartTime?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentMedicationMinOrderByAggregateInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    medicationId?: SortOrder
    frequencyHours?: SortOrder
    durationDays?: SortOrder
    dosage?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startAtSpecificTime?: SortOrder
    specificStartTime?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentMedicationSumOrderByAggregateInput = {
    frequencyHours?: SortOrder
    durationDays?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type TreatmentImageCountOrderByAggregateInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    imageUrl?: SortOrder
    imageType?: SortOrder
    extractedText?: SortOrder
    aiAnalysis?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentImageMaxOrderByAggregateInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    imageUrl?: SortOrder
    imageType?: SortOrder
    extractedText?: SortOrder
    aiAnalysis?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentImageMinOrderByAggregateInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    imageUrl?: SortOrder
    imageType?: SortOrder
    extractedText?: SortOrder
    aiAnalysis?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    scheduledDate?: SortOrder
    sent?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    scheduledDate?: SortOrder
    sent?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    treatmentId?: SortOrder
    scheduledDate?: SortOrder
    sent?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationPreferencesCountOrderByAggregateInput = {
    id?: SortOrder
    push?: SortOrder
    sound?: SortOrder
    email?: SortOrder
    browser?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationPreferencesMaxOrderByAggregateInput = {
    id?: SortOrder
    push?: SortOrder
    sound?: SortOrder
    email?: SortOrder
    browser?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationPreferencesMinOrderByAggregateInput = {
    id?: SortOrder
    push?: SortOrder
    sound?: SortOrder
    email?: SortOrder
    browser?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PushSubscriptionUserIdEndpointCompoundUniqueInput = {
    userId: string
    endpoint: string
  }

  export type PushSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    p256dhKey?: SortOrder
    authKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PushSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    p256dhKey?: SortOrder
    authKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PushSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    p256dhKey?: SortOrder
    authKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingListScalarRelationFilter = {
    is?: ShoppingListWhereInput
    isNot?: ShoppingListWhereInput
  }

  export type ShoppingItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    presentation?: SortOrder
    laboratory?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    shoppingListId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingItemAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
  }

  export type ShoppingItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    presentation?: SortOrder
    laboratory?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    shoppingListId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    presentation?: SortOrder
    laboratory?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    shoppingListId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingItemSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
  }

  export type ShoppingItemListRelationFilter = {
    every?: ShoppingItemWhereInput
    some?: ShoppingItemWhereInput
    none?: ShoppingItemWhereInput
  }

  export type ShoppingItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShoppingListCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    total?: SortOrder
    isArchived?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingListAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type ShoppingListMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    total?: SortOrder
    isArchived?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingListMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    total?: SortOrder
    isArchived?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingListSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type PerfilMenorListRelationFilter = {
    every?: PerfilMenorWhereInput
    some?: PerfilMenorWhereInput
    none?: PerfilMenorWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PerfilMenorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GrupoFamiliarCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    creadorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrupoFamiliarMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    creadorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrupoFamiliarMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    creadorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrupoFamiliarScalarRelationFilter = {
    is?: GrupoFamiliarWhereInput
    isNot?: GrupoFamiliarWhereInput
  }

  export type PerfilMenorCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    fechaNacimiento?: SortOrder
    foto?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PerfilMenorMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    fechaNacimiento?: SortOrder
    foto?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PerfilMenorMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    dni?: SortOrder
    fechaNacimiento?: SortOrder
    foto?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type PerfilMenorNullableScalarRelationFilter = {
    is?: PerfilMenorWhereInput | null
    isNot?: PerfilMenorWhereInput | null
  }

  export type TomaCountOrderByAggregateInput = {
    id?: SortOrder
    medicamentoId?: SortOrder
    consumidorUsuarioId?: SortOrder
    consumidorPerfilId?: SortOrder
    registranteId?: SortOrder
    fechaHora?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TomaMaxOrderByAggregateInput = {
    id?: SortOrder
    medicamentoId?: SortOrder
    consumidorUsuarioId?: SortOrder
    consumidorPerfilId?: SortOrder
    registranteId?: SortOrder
    fechaHora?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TomaMinOrderByAggregateInput = {
    id?: SortOrder
    medicamentoId?: SortOrder
    consumidorUsuarioId?: SortOrder
    consumidorPerfilId?: SortOrder
    registranteId?: SortOrder
    fechaHora?: SortOrder
    grupoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HistorialCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoAccion?: SortOrder
    entidadTipo?: SortOrder
    entidadId?: SortOrder
    datosPrevios?: SortOrder
    datosPosteriores?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type HistorialMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoAccion?: SortOrder
    entidadTipo?: SortOrder
    entidadId?: SortOrder
    datosPrevios?: SortOrder
    datosPosteriores?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type HistorialMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoAccion?: SortOrder
    entidadTipo?: SortOrder
    entidadId?: SortOrder
    datosPrevios?: SortOrder
    datosPosteriores?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type GrupoFamiliarCreateNestedOneWithoutIntegrantesInput = {
    create?: XOR<GrupoFamiliarCreateWithoutIntegrantesInput, GrupoFamiliarUncheckedCreateWithoutIntegrantesInput>
    connectOrCreate?: GrupoFamiliarCreateOrConnectWithoutIntegrantesInput
    connect?: GrupoFamiliarWhereUniqueInput
  }

  export type MedicationCreateNestedManyWithoutUserInput = {
    create?: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput> | MedicationCreateWithoutUserInput[] | MedicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutUserInput | MedicationCreateOrConnectWithoutUserInput[]
    createMany?: MedicationCreateManyUserInputEnvelope
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
  }

  export type NotificationSettingsCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutUserInput
    connect?: NotificationSettingsWhereUniqueInput
  }

  export type TreatmentCreateNestedManyWithoutUserInput = {
    create?: XOR<TreatmentCreateWithoutUserInput, TreatmentUncheckedCreateWithoutUserInput> | TreatmentCreateWithoutUserInput[] | TreatmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutUserInput | TreatmentCreateOrConnectWithoutUserInput[]
    createMany?: TreatmentCreateManyUserInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type NotificationPreferencesCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationPreferencesCreateWithoutUserInput, NotificationPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationPreferencesCreateOrConnectWithoutUserInput
    connect?: NotificationPreferencesWhereUniqueInput
  }

  export type PushSubscriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<PushSubscriptionCreateWithoutUserInput, PushSubscriptionUncheckedCreateWithoutUserInput> | PushSubscriptionCreateWithoutUserInput[] | PushSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PushSubscriptionCreateOrConnectWithoutUserInput | PushSubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: PushSubscriptionCreateManyUserInputEnvelope
    connect?: PushSubscriptionWhereUniqueInput | PushSubscriptionWhereUniqueInput[]
  }

  export type ShoppingListCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
  }

  export type TomaCreateNestedManyWithoutRegistranteInput = {
    create?: XOR<TomaCreateWithoutRegistranteInput, TomaUncheckedCreateWithoutRegistranteInput> | TomaCreateWithoutRegistranteInput[] | TomaUncheckedCreateWithoutRegistranteInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutRegistranteInput | TomaCreateOrConnectWithoutRegistranteInput[]
    createMany?: TomaCreateManyRegistranteInputEnvelope
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
  }

  export type TomaCreateNestedManyWithoutConsumidorUsuarioInput = {
    create?: XOR<TomaCreateWithoutConsumidorUsuarioInput, TomaUncheckedCreateWithoutConsumidorUsuarioInput> | TomaCreateWithoutConsumidorUsuarioInput[] | TomaUncheckedCreateWithoutConsumidorUsuarioInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutConsumidorUsuarioInput | TomaCreateOrConnectWithoutConsumidorUsuarioInput[]
    createMany?: TomaCreateManyConsumidorUsuarioInputEnvelope
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
  }

  export type GrupoFamiliarCreateNestedManyWithoutCreadorInput = {
    create?: XOR<GrupoFamiliarCreateWithoutCreadorInput, GrupoFamiliarUncheckedCreateWithoutCreadorInput> | GrupoFamiliarCreateWithoutCreadorInput[] | GrupoFamiliarUncheckedCreateWithoutCreadorInput[]
    connectOrCreate?: GrupoFamiliarCreateOrConnectWithoutCreadorInput | GrupoFamiliarCreateOrConnectWithoutCreadorInput[]
    createMany?: GrupoFamiliarCreateManyCreadorInputEnvelope
    connect?: GrupoFamiliarWhereUniqueInput | GrupoFamiliarWhereUniqueInput[]
  }

  export type HistorialCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<HistorialCreateWithoutUsuarioInput, HistorialUncheckedCreateWithoutUsuarioInput> | HistorialCreateWithoutUsuarioInput[] | HistorialUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCreateOrConnectWithoutUsuarioInput | HistorialCreateOrConnectWithoutUsuarioInput[]
    createMany?: HistorialCreateManyUsuarioInputEnvelope
    connect?: HistorialWhereUniqueInput | HistorialWhereUniqueInput[]
  }

  export type MedicationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput> | MedicationCreateWithoutUserInput[] | MedicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutUserInput | MedicationCreateOrConnectWithoutUserInput[]
    createMany?: MedicationCreateManyUserInputEnvelope
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
  }

  export type NotificationSettingsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutUserInput
    connect?: NotificationSettingsWhereUniqueInput
  }

  export type TreatmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TreatmentCreateWithoutUserInput, TreatmentUncheckedCreateWithoutUserInput> | TreatmentCreateWithoutUserInput[] | TreatmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutUserInput | TreatmentCreateOrConnectWithoutUserInput[]
    createMany?: TreatmentCreateManyUserInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationPreferencesCreateWithoutUserInput, NotificationPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationPreferencesCreateOrConnectWithoutUserInput
    connect?: NotificationPreferencesWhereUniqueInput
  }

  export type PushSubscriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PushSubscriptionCreateWithoutUserInput, PushSubscriptionUncheckedCreateWithoutUserInput> | PushSubscriptionCreateWithoutUserInput[] | PushSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PushSubscriptionCreateOrConnectWithoutUserInput | PushSubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: PushSubscriptionCreateManyUserInputEnvelope
    connect?: PushSubscriptionWhereUniqueInput | PushSubscriptionWhereUniqueInput[]
  }

  export type ShoppingListUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
  }

  export type TomaUncheckedCreateNestedManyWithoutRegistranteInput = {
    create?: XOR<TomaCreateWithoutRegistranteInput, TomaUncheckedCreateWithoutRegistranteInput> | TomaCreateWithoutRegistranteInput[] | TomaUncheckedCreateWithoutRegistranteInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutRegistranteInput | TomaCreateOrConnectWithoutRegistranteInput[]
    createMany?: TomaCreateManyRegistranteInputEnvelope
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
  }

  export type TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput = {
    create?: XOR<TomaCreateWithoutConsumidorUsuarioInput, TomaUncheckedCreateWithoutConsumidorUsuarioInput> | TomaCreateWithoutConsumidorUsuarioInput[] | TomaUncheckedCreateWithoutConsumidorUsuarioInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutConsumidorUsuarioInput | TomaCreateOrConnectWithoutConsumidorUsuarioInput[]
    createMany?: TomaCreateManyConsumidorUsuarioInputEnvelope
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
  }

  export type GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput = {
    create?: XOR<GrupoFamiliarCreateWithoutCreadorInput, GrupoFamiliarUncheckedCreateWithoutCreadorInput> | GrupoFamiliarCreateWithoutCreadorInput[] | GrupoFamiliarUncheckedCreateWithoutCreadorInput[]
    connectOrCreate?: GrupoFamiliarCreateOrConnectWithoutCreadorInput | GrupoFamiliarCreateOrConnectWithoutCreadorInput[]
    createMany?: GrupoFamiliarCreateManyCreadorInputEnvelope
    connect?: GrupoFamiliarWhereUniqueInput | GrupoFamiliarWhereUniqueInput[]
  }

  export type HistorialUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<HistorialCreateWithoutUsuarioInput, HistorialUncheckedCreateWithoutUsuarioInput> | HistorialCreateWithoutUsuarioInput[] | HistorialUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCreateOrConnectWithoutUsuarioInput | HistorialCreateOrConnectWithoutUsuarioInput[]
    createMany?: HistorialCreateManyUsuarioInputEnvelope
    connect?: HistorialWhereUniqueInput | HistorialWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput = {
    create?: XOR<GrupoFamiliarCreateWithoutIntegrantesInput, GrupoFamiliarUncheckedCreateWithoutIntegrantesInput>
    connectOrCreate?: GrupoFamiliarCreateOrConnectWithoutIntegrantesInput
    upsert?: GrupoFamiliarUpsertWithoutIntegrantesInput
    disconnect?: GrupoFamiliarWhereInput | boolean
    delete?: GrupoFamiliarWhereInput | boolean
    connect?: GrupoFamiliarWhereUniqueInput
    update?: XOR<XOR<GrupoFamiliarUpdateToOneWithWhereWithoutIntegrantesInput, GrupoFamiliarUpdateWithoutIntegrantesInput>, GrupoFamiliarUncheckedUpdateWithoutIntegrantesInput>
  }

  export type MedicationUpdateManyWithoutUserNestedInput = {
    create?: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput> | MedicationCreateWithoutUserInput[] | MedicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutUserInput | MedicationCreateOrConnectWithoutUserInput[]
    upsert?: MedicationUpsertWithWhereUniqueWithoutUserInput | MedicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MedicationCreateManyUserInputEnvelope
    set?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    disconnect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    delete?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    update?: MedicationUpdateWithWhereUniqueWithoutUserInput | MedicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MedicationUpdateManyWithWhereWithoutUserInput | MedicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
  }

  export type NotificationSettingsUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutUserInput
    upsert?: NotificationSettingsUpsertWithoutUserInput
    disconnect?: NotificationSettingsWhereInput | boolean
    delete?: NotificationSettingsWhereInput | boolean
    connect?: NotificationSettingsWhereUniqueInput
    update?: XOR<XOR<NotificationSettingsUpdateToOneWithWhereWithoutUserInput, NotificationSettingsUpdateWithoutUserInput>, NotificationSettingsUncheckedUpdateWithoutUserInput>
  }

  export type TreatmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<TreatmentCreateWithoutUserInput, TreatmentUncheckedCreateWithoutUserInput> | TreatmentCreateWithoutUserInput[] | TreatmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutUserInput | TreatmentCreateOrConnectWithoutUserInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutUserInput | TreatmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TreatmentCreateManyUserInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutUserInput | TreatmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutUserInput | TreatmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type NotificationPreferencesUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationPreferencesCreateWithoutUserInput, NotificationPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationPreferencesCreateOrConnectWithoutUserInput
    upsert?: NotificationPreferencesUpsertWithoutUserInput
    disconnect?: NotificationPreferencesWhereInput | boolean
    delete?: NotificationPreferencesWhereInput | boolean
    connect?: NotificationPreferencesWhereUniqueInput
    update?: XOR<XOR<NotificationPreferencesUpdateToOneWithWhereWithoutUserInput, NotificationPreferencesUpdateWithoutUserInput>, NotificationPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type PushSubscriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<PushSubscriptionCreateWithoutUserInput, PushSubscriptionUncheckedCreateWithoutUserInput> | PushSubscriptionCreateWithoutUserInput[] | PushSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PushSubscriptionCreateOrConnectWithoutUserInput | PushSubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: PushSubscriptionUpsertWithWhereUniqueWithoutUserInput | PushSubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PushSubscriptionCreateManyUserInputEnvelope
    set?: PushSubscriptionWhereUniqueInput | PushSubscriptionWhereUniqueInput[]
    disconnect?: PushSubscriptionWhereUniqueInput | PushSubscriptionWhereUniqueInput[]
    delete?: PushSubscriptionWhereUniqueInput | PushSubscriptionWhereUniqueInput[]
    connect?: PushSubscriptionWhereUniqueInput | PushSubscriptionWhereUniqueInput[]
    update?: PushSubscriptionUpdateWithWhereUniqueWithoutUserInput | PushSubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PushSubscriptionUpdateManyWithWhereWithoutUserInput | PushSubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PushSubscriptionScalarWhereInput | PushSubscriptionScalarWhereInput[]
  }

  export type ShoppingListUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingListUpsertWithWhereUniqueWithoutUserInput | ShoppingListUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    set?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    disconnect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    delete?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    update?: ShoppingListUpdateWithWhereUniqueWithoutUserInput | ShoppingListUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingListUpdateManyWithWhereWithoutUserInput | ShoppingListUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
  }

  export type TomaUpdateManyWithoutRegistranteNestedInput = {
    create?: XOR<TomaCreateWithoutRegistranteInput, TomaUncheckedCreateWithoutRegistranteInput> | TomaCreateWithoutRegistranteInput[] | TomaUncheckedCreateWithoutRegistranteInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutRegistranteInput | TomaCreateOrConnectWithoutRegistranteInput[]
    upsert?: TomaUpsertWithWhereUniqueWithoutRegistranteInput | TomaUpsertWithWhereUniqueWithoutRegistranteInput[]
    createMany?: TomaCreateManyRegistranteInputEnvelope
    set?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    disconnect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    delete?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    update?: TomaUpdateWithWhereUniqueWithoutRegistranteInput | TomaUpdateWithWhereUniqueWithoutRegistranteInput[]
    updateMany?: TomaUpdateManyWithWhereWithoutRegistranteInput | TomaUpdateManyWithWhereWithoutRegistranteInput[]
    deleteMany?: TomaScalarWhereInput | TomaScalarWhereInput[]
  }

  export type TomaUpdateManyWithoutConsumidorUsuarioNestedInput = {
    create?: XOR<TomaCreateWithoutConsumidorUsuarioInput, TomaUncheckedCreateWithoutConsumidorUsuarioInput> | TomaCreateWithoutConsumidorUsuarioInput[] | TomaUncheckedCreateWithoutConsumidorUsuarioInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutConsumidorUsuarioInput | TomaCreateOrConnectWithoutConsumidorUsuarioInput[]
    upsert?: TomaUpsertWithWhereUniqueWithoutConsumidorUsuarioInput | TomaUpsertWithWhereUniqueWithoutConsumidorUsuarioInput[]
    createMany?: TomaCreateManyConsumidorUsuarioInputEnvelope
    set?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    disconnect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    delete?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    update?: TomaUpdateWithWhereUniqueWithoutConsumidorUsuarioInput | TomaUpdateWithWhereUniqueWithoutConsumidorUsuarioInput[]
    updateMany?: TomaUpdateManyWithWhereWithoutConsumidorUsuarioInput | TomaUpdateManyWithWhereWithoutConsumidorUsuarioInput[]
    deleteMany?: TomaScalarWhereInput | TomaScalarWhereInput[]
  }

  export type GrupoFamiliarUpdateManyWithoutCreadorNestedInput = {
    create?: XOR<GrupoFamiliarCreateWithoutCreadorInput, GrupoFamiliarUncheckedCreateWithoutCreadorInput> | GrupoFamiliarCreateWithoutCreadorInput[] | GrupoFamiliarUncheckedCreateWithoutCreadorInput[]
    connectOrCreate?: GrupoFamiliarCreateOrConnectWithoutCreadorInput | GrupoFamiliarCreateOrConnectWithoutCreadorInput[]
    upsert?: GrupoFamiliarUpsertWithWhereUniqueWithoutCreadorInput | GrupoFamiliarUpsertWithWhereUniqueWithoutCreadorInput[]
    createMany?: GrupoFamiliarCreateManyCreadorInputEnvelope
    set?: GrupoFamiliarWhereUniqueInput | GrupoFamiliarWhereUniqueInput[]
    disconnect?: GrupoFamiliarWhereUniqueInput | GrupoFamiliarWhereUniqueInput[]
    delete?: GrupoFamiliarWhereUniqueInput | GrupoFamiliarWhereUniqueInput[]
    connect?: GrupoFamiliarWhereUniqueInput | GrupoFamiliarWhereUniqueInput[]
    update?: GrupoFamiliarUpdateWithWhereUniqueWithoutCreadorInput | GrupoFamiliarUpdateWithWhereUniqueWithoutCreadorInput[]
    updateMany?: GrupoFamiliarUpdateManyWithWhereWithoutCreadorInput | GrupoFamiliarUpdateManyWithWhereWithoutCreadorInput[]
    deleteMany?: GrupoFamiliarScalarWhereInput | GrupoFamiliarScalarWhereInput[]
  }

  export type HistorialUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<HistorialCreateWithoutUsuarioInput, HistorialUncheckedCreateWithoutUsuarioInput> | HistorialCreateWithoutUsuarioInput[] | HistorialUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCreateOrConnectWithoutUsuarioInput | HistorialCreateOrConnectWithoutUsuarioInput[]
    upsert?: HistorialUpsertWithWhereUniqueWithoutUsuarioInput | HistorialUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: HistorialCreateManyUsuarioInputEnvelope
    set?: HistorialWhereUniqueInput | HistorialWhereUniqueInput[]
    disconnect?: HistorialWhereUniqueInput | HistorialWhereUniqueInput[]
    delete?: HistorialWhereUniqueInput | HistorialWhereUniqueInput[]
    connect?: HistorialWhereUniqueInput | HistorialWhereUniqueInput[]
    update?: HistorialUpdateWithWhereUniqueWithoutUsuarioInput | HistorialUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: HistorialUpdateManyWithWhereWithoutUsuarioInput | HistorialUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: HistorialScalarWhereInput | HistorialScalarWhereInput[]
  }

  export type MedicationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput> | MedicationCreateWithoutUserInput[] | MedicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutUserInput | MedicationCreateOrConnectWithoutUserInput[]
    upsert?: MedicationUpsertWithWhereUniqueWithoutUserInput | MedicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MedicationCreateManyUserInputEnvelope
    set?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    disconnect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    delete?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    update?: MedicationUpdateWithWhereUniqueWithoutUserInput | MedicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MedicationUpdateManyWithWhereWithoutUserInput | MedicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
  }

  export type NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutUserInput
    upsert?: NotificationSettingsUpsertWithoutUserInput
    disconnect?: NotificationSettingsWhereInput | boolean
    delete?: NotificationSettingsWhereInput | boolean
    connect?: NotificationSettingsWhereUniqueInput
    update?: XOR<XOR<NotificationSettingsUpdateToOneWithWhereWithoutUserInput, NotificationSettingsUpdateWithoutUserInput>, NotificationSettingsUncheckedUpdateWithoutUserInput>
  }

  export type TreatmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TreatmentCreateWithoutUserInput, TreatmentUncheckedCreateWithoutUserInput> | TreatmentCreateWithoutUserInput[] | TreatmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutUserInput | TreatmentCreateOrConnectWithoutUserInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutUserInput | TreatmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TreatmentCreateManyUserInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutUserInput | TreatmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutUserInput | TreatmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationPreferencesCreateWithoutUserInput, NotificationPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationPreferencesCreateOrConnectWithoutUserInput
    upsert?: NotificationPreferencesUpsertWithoutUserInput
    disconnect?: NotificationPreferencesWhereInput | boolean
    delete?: NotificationPreferencesWhereInput | boolean
    connect?: NotificationPreferencesWhereUniqueInput
    update?: XOR<XOR<NotificationPreferencesUpdateToOneWithWhereWithoutUserInput, NotificationPreferencesUpdateWithoutUserInput>, NotificationPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PushSubscriptionCreateWithoutUserInput, PushSubscriptionUncheckedCreateWithoutUserInput> | PushSubscriptionCreateWithoutUserInput[] | PushSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PushSubscriptionCreateOrConnectWithoutUserInput | PushSubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: PushSubscriptionUpsertWithWhereUniqueWithoutUserInput | PushSubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PushSubscriptionCreateManyUserInputEnvelope
    set?: PushSubscriptionWhereUniqueInput | PushSubscriptionWhereUniqueInput[]
    disconnect?: PushSubscriptionWhereUniqueInput | PushSubscriptionWhereUniqueInput[]
    delete?: PushSubscriptionWhereUniqueInput | PushSubscriptionWhereUniqueInput[]
    connect?: PushSubscriptionWhereUniqueInput | PushSubscriptionWhereUniqueInput[]
    update?: PushSubscriptionUpdateWithWhereUniqueWithoutUserInput | PushSubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PushSubscriptionUpdateManyWithWhereWithoutUserInput | PushSubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PushSubscriptionScalarWhereInput | PushSubscriptionScalarWhereInput[]
  }

  export type ShoppingListUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingListUpsertWithWhereUniqueWithoutUserInput | ShoppingListUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    set?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    disconnect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    delete?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    update?: ShoppingListUpdateWithWhereUniqueWithoutUserInput | ShoppingListUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingListUpdateManyWithWhereWithoutUserInput | ShoppingListUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
  }

  export type TomaUncheckedUpdateManyWithoutRegistranteNestedInput = {
    create?: XOR<TomaCreateWithoutRegistranteInput, TomaUncheckedCreateWithoutRegistranteInput> | TomaCreateWithoutRegistranteInput[] | TomaUncheckedCreateWithoutRegistranteInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutRegistranteInput | TomaCreateOrConnectWithoutRegistranteInput[]
    upsert?: TomaUpsertWithWhereUniqueWithoutRegistranteInput | TomaUpsertWithWhereUniqueWithoutRegistranteInput[]
    createMany?: TomaCreateManyRegistranteInputEnvelope
    set?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    disconnect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    delete?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    update?: TomaUpdateWithWhereUniqueWithoutRegistranteInput | TomaUpdateWithWhereUniqueWithoutRegistranteInput[]
    updateMany?: TomaUpdateManyWithWhereWithoutRegistranteInput | TomaUpdateManyWithWhereWithoutRegistranteInput[]
    deleteMany?: TomaScalarWhereInput | TomaScalarWhereInput[]
  }

  export type TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput = {
    create?: XOR<TomaCreateWithoutConsumidorUsuarioInput, TomaUncheckedCreateWithoutConsumidorUsuarioInput> | TomaCreateWithoutConsumidorUsuarioInput[] | TomaUncheckedCreateWithoutConsumidorUsuarioInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutConsumidorUsuarioInput | TomaCreateOrConnectWithoutConsumidorUsuarioInput[]
    upsert?: TomaUpsertWithWhereUniqueWithoutConsumidorUsuarioInput | TomaUpsertWithWhereUniqueWithoutConsumidorUsuarioInput[]
    createMany?: TomaCreateManyConsumidorUsuarioInputEnvelope
    set?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    disconnect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    delete?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    update?: TomaUpdateWithWhereUniqueWithoutConsumidorUsuarioInput | TomaUpdateWithWhereUniqueWithoutConsumidorUsuarioInput[]
    updateMany?: TomaUpdateManyWithWhereWithoutConsumidorUsuarioInput | TomaUpdateManyWithWhereWithoutConsumidorUsuarioInput[]
    deleteMany?: TomaScalarWhereInput | TomaScalarWhereInput[]
  }

  export type GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput = {
    create?: XOR<GrupoFamiliarCreateWithoutCreadorInput, GrupoFamiliarUncheckedCreateWithoutCreadorInput> | GrupoFamiliarCreateWithoutCreadorInput[] | GrupoFamiliarUncheckedCreateWithoutCreadorInput[]
    connectOrCreate?: GrupoFamiliarCreateOrConnectWithoutCreadorInput | GrupoFamiliarCreateOrConnectWithoutCreadorInput[]
    upsert?: GrupoFamiliarUpsertWithWhereUniqueWithoutCreadorInput | GrupoFamiliarUpsertWithWhereUniqueWithoutCreadorInput[]
    createMany?: GrupoFamiliarCreateManyCreadorInputEnvelope
    set?: GrupoFamiliarWhereUniqueInput | GrupoFamiliarWhereUniqueInput[]
    disconnect?: GrupoFamiliarWhereUniqueInput | GrupoFamiliarWhereUniqueInput[]
    delete?: GrupoFamiliarWhereUniqueInput | GrupoFamiliarWhereUniqueInput[]
    connect?: GrupoFamiliarWhereUniqueInput | GrupoFamiliarWhereUniqueInput[]
    update?: GrupoFamiliarUpdateWithWhereUniqueWithoutCreadorInput | GrupoFamiliarUpdateWithWhereUniqueWithoutCreadorInput[]
    updateMany?: GrupoFamiliarUpdateManyWithWhereWithoutCreadorInput | GrupoFamiliarUpdateManyWithWhereWithoutCreadorInput[]
    deleteMany?: GrupoFamiliarScalarWhereInput | GrupoFamiliarScalarWhereInput[]
  }

  export type HistorialUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<HistorialCreateWithoutUsuarioInput, HistorialUncheckedCreateWithoutUsuarioInput> | HistorialCreateWithoutUsuarioInput[] | HistorialUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: HistorialCreateOrConnectWithoutUsuarioInput | HistorialCreateOrConnectWithoutUsuarioInput[]
    upsert?: HistorialUpsertWithWhereUniqueWithoutUsuarioInput | HistorialUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: HistorialCreateManyUsuarioInputEnvelope
    set?: HistorialWhereUniqueInput | HistorialWhereUniqueInput[]
    disconnect?: HistorialWhereUniqueInput | HistorialWhereUniqueInput[]
    delete?: HistorialWhereUniqueInput | HistorialWhereUniqueInput[]
    connect?: HistorialWhereUniqueInput | HistorialWhereUniqueInput[]
    update?: HistorialUpdateWithWhereUniqueWithoutUsuarioInput | HistorialUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: HistorialUpdateManyWithWhereWithoutUsuarioInput | HistorialUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: HistorialScalarWhereInput | HistorialScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMedicationsInput = {
    create?: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMedicationsInput
    connect?: UserWhereUniqueInput
  }

  export type TreatmentMedicationCreateNestedManyWithoutMedicationInput = {
    create?: XOR<TreatmentMedicationCreateWithoutMedicationInput, TreatmentMedicationUncheckedCreateWithoutMedicationInput> | TreatmentMedicationCreateWithoutMedicationInput[] | TreatmentMedicationUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: TreatmentMedicationCreateOrConnectWithoutMedicationInput | TreatmentMedicationCreateOrConnectWithoutMedicationInput[]
    createMany?: TreatmentMedicationCreateManyMedicationInputEnvelope
    connect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
  }

  export type TomaCreateNestedManyWithoutMedicamentoInput = {
    create?: XOR<TomaCreateWithoutMedicamentoInput, TomaUncheckedCreateWithoutMedicamentoInput> | TomaCreateWithoutMedicamentoInput[] | TomaUncheckedCreateWithoutMedicamentoInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutMedicamentoInput | TomaCreateOrConnectWithoutMedicamentoInput[]
    createMany?: TomaCreateManyMedicamentoInputEnvelope
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
  }

  export type TreatmentMedicationUncheckedCreateNestedManyWithoutMedicationInput = {
    create?: XOR<TreatmentMedicationCreateWithoutMedicationInput, TreatmentMedicationUncheckedCreateWithoutMedicationInput> | TreatmentMedicationCreateWithoutMedicationInput[] | TreatmentMedicationUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: TreatmentMedicationCreateOrConnectWithoutMedicationInput | TreatmentMedicationCreateOrConnectWithoutMedicationInput[]
    createMany?: TreatmentMedicationCreateManyMedicationInputEnvelope
    connect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
  }

  export type TomaUncheckedCreateNestedManyWithoutMedicamentoInput = {
    create?: XOR<TomaCreateWithoutMedicamentoInput, TomaUncheckedCreateWithoutMedicamentoInput> | TomaCreateWithoutMedicamentoInput[] | TomaUncheckedCreateWithoutMedicamentoInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutMedicamentoInput | TomaCreateOrConnectWithoutMedicamentoInput[]
    createMany?: TomaCreateManyMedicamentoInputEnvelope
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutMedicationsNestedInput = {
    create?: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMedicationsInput
    upsert?: UserUpsertWithoutMedicationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMedicationsInput, UserUpdateWithoutMedicationsInput>, UserUncheckedUpdateWithoutMedicationsInput>
  }

  export type TreatmentMedicationUpdateManyWithoutMedicationNestedInput = {
    create?: XOR<TreatmentMedicationCreateWithoutMedicationInput, TreatmentMedicationUncheckedCreateWithoutMedicationInput> | TreatmentMedicationCreateWithoutMedicationInput[] | TreatmentMedicationUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: TreatmentMedicationCreateOrConnectWithoutMedicationInput | TreatmentMedicationCreateOrConnectWithoutMedicationInput[]
    upsert?: TreatmentMedicationUpsertWithWhereUniqueWithoutMedicationInput | TreatmentMedicationUpsertWithWhereUniqueWithoutMedicationInput[]
    createMany?: TreatmentMedicationCreateManyMedicationInputEnvelope
    set?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    disconnect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    delete?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    connect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    update?: TreatmentMedicationUpdateWithWhereUniqueWithoutMedicationInput | TreatmentMedicationUpdateWithWhereUniqueWithoutMedicationInput[]
    updateMany?: TreatmentMedicationUpdateManyWithWhereWithoutMedicationInput | TreatmentMedicationUpdateManyWithWhereWithoutMedicationInput[]
    deleteMany?: TreatmentMedicationScalarWhereInput | TreatmentMedicationScalarWhereInput[]
  }

  export type TomaUpdateManyWithoutMedicamentoNestedInput = {
    create?: XOR<TomaCreateWithoutMedicamentoInput, TomaUncheckedCreateWithoutMedicamentoInput> | TomaCreateWithoutMedicamentoInput[] | TomaUncheckedCreateWithoutMedicamentoInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutMedicamentoInput | TomaCreateOrConnectWithoutMedicamentoInput[]
    upsert?: TomaUpsertWithWhereUniqueWithoutMedicamentoInput | TomaUpsertWithWhereUniqueWithoutMedicamentoInput[]
    createMany?: TomaCreateManyMedicamentoInputEnvelope
    set?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    disconnect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    delete?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    update?: TomaUpdateWithWhereUniqueWithoutMedicamentoInput | TomaUpdateWithWhereUniqueWithoutMedicamentoInput[]
    updateMany?: TomaUpdateManyWithWhereWithoutMedicamentoInput | TomaUpdateManyWithWhereWithoutMedicamentoInput[]
    deleteMany?: TomaScalarWhereInput | TomaScalarWhereInput[]
  }

  export type TreatmentMedicationUncheckedUpdateManyWithoutMedicationNestedInput = {
    create?: XOR<TreatmentMedicationCreateWithoutMedicationInput, TreatmentMedicationUncheckedCreateWithoutMedicationInput> | TreatmentMedicationCreateWithoutMedicationInput[] | TreatmentMedicationUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: TreatmentMedicationCreateOrConnectWithoutMedicationInput | TreatmentMedicationCreateOrConnectWithoutMedicationInput[]
    upsert?: TreatmentMedicationUpsertWithWhereUniqueWithoutMedicationInput | TreatmentMedicationUpsertWithWhereUniqueWithoutMedicationInput[]
    createMany?: TreatmentMedicationCreateManyMedicationInputEnvelope
    set?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    disconnect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    delete?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    connect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    update?: TreatmentMedicationUpdateWithWhereUniqueWithoutMedicationInput | TreatmentMedicationUpdateWithWhereUniqueWithoutMedicationInput[]
    updateMany?: TreatmentMedicationUpdateManyWithWhereWithoutMedicationInput | TreatmentMedicationUpdateManyWithWhereWithoutMedicationInput[]
    deleteMany?: TreatmentMedicationScalarWhereInput | TreatmentMedicationScalarWhereInput[]
  }

  export type TomaUncheckedUpdateManyWithoutMedicamentoNestedInput = {
    create?: XOR<TomaCreateWithoutMedicamentoInput, TomaUncheckedCreateWithoutMedicamentoInput> | TomaCreateWithoutMedicamentoInput[] | TomaUncheckedCreateWithoutMedicamentoInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutMedicamentoInput | TomaCreateOrConnectWithoutMedicamentoInput[]
    upsert?: TomaUpsertWithWhereUniqueWithoutMedicamentoInput | TomaUpsertWithWhereUniqueWithoutMedicamentoInput[]
    createMany?: TomaCreateManyMedicamentoInputEnvelope
    set?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    disconnect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    delete?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    update?: TomaUpdateWithWhereUniqueWithoutMedicamentoInput | TomaUpdateWithWhereUniqueWithoutMedicamentoInput[]
    updateMany?: TomaUpdateManyWithWhereWithoutMedicamentoInput | TomaUpdateManyWithWhereWithoutMedicamentoInput[]
    deleteMany?: TomaScalarWhereInput | TomaScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationSettingsInput = {
    create?: XOR<UserCreateWithoutNotificationSettingsInput, UserUncheckedCreateWithoutNotificationSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutNotificationSettingsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationSettingsInput, UserUncheckedCreateWithoutNotificationSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationSettingsInput
    upsert?: UserUpsertWithoutNotificationSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationSettingsInput, UserUpdateWithoutNotificationSettingsInput>, UserUncheckedUpdateWithoutNotificationSettingsInput>
  }

  export type UserCreateNestedOneWithoutTreatmentsInput = {
    create?: XOR<UserCreateWithoutTreatmentsInput, UserUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTreatmentsInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<NotificationCreateWithoutTreatmentInput, NotificationUncheckedCreateWithoutTreatmentInput> | NotificationCreateWithoutTreatmentInput[] | NotificationUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTreatmentInput | NotificationCreateOrConnectWithoutTreatmentInput[]
    createMany?: NotificationCreateManyTreatmentInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type TreatmentMedicationCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<TreatmentMedicationCreateWithoutTreatmentInput, TreatmentMedicationUncheckedCreateWithoutTreatmentInput> | TreatmentMedicationCreateWithoutTreatmentInput[] | TreatmentMedicationUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: TreatmentMedicationCreateOrConnectWithoutTreatmentInput | TreatmentMedicationCreateOrConnectWithoutTreatmentInput[]
    createMany?: TreatmentMedicationCreateManyTreatmentInputEnvelope
    connect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
  }

  export type TreatmentImageCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<TreatmentImageCreateWithoutTreatmentInput, TreatmentImageUncheckedCreateWithoutTreatmentInput> | TreatmentImageCreateWithoutTreatmentInput[] | TreatmentImageUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: TreatmentImageCreateOrConnectWithoutTreatmentInput | TreatmentImageCreateOrConnectWithoutTreatmentInput[]
    createMany?: TreatmentImageCreateManyTreatmentInputEnvelope
    connect?: TreatmentImageWhereUniqueInput | TreatmentImageWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<NotificationCreateWithoutTreatmentInput, NotificationUncheckedCreateWithoutTreatmentInput> | NotificationCreateWithoutTreatmentInput[] | NotificationUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTreatmentInput | NotificationCreateOrConnectWithoutTreatmentInput[]
    createMany?: NotificationCreateManyTreatmentInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type TreatmentMedicationUncheckedCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<TreatmentMedicationCreateWithoutTreatmentInput, TreatmentMedicationUncheckedCreateWithoutTreatmentInput> | TreatmentMedicationCreateWithoutTreatmentInput[] | TreatmentMedicationUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: TreatmentMedicationCreateOrConnectWithoutTreatmentInput | TreatmentMedicationCreateOrConnectWithoutTreatmentInput[]
    createMany?: TreatmentMedicationCreateManyTreatmentInputEnvelope
    connect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
  }

  export type TreatmentImageUncheckedCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<TreatmentImageCreateWithoutTreatmentInput, TreatmentImageUncheckedCreateWithoutTreatmentInput> | TreatmentImageCreateWithoutTreatmentInput[] | TreatmentImageUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: TreatmentImageCreateOrConnectWithoutTreatmentInput | TreatmentImageCreateOrConnectWithoutTreatmentInput[]
    createMany?: TreatmentImageCreateManyTreatmentInputEnvelope
    connect?: TreatmentImageWhereUniqueInput | TreatmentImageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutTreatmentsNestedInput = {
    create?: XOR<UserCreateWithoutTreatmentsInput, UserUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTreatmentsInput
    upsert?: UserUpsertWithoutTreatmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTreatmentsInput, UserUpdateWithoutTreatmentsInput>, UserUncheckedUpdateWithoutTreatmentsInput>
  }

  export type NotificationUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<NotificationCreateWithoutTreatmentInput, NotificationUncheckedCreateWithoutTreatmentInput> | NotificationCreateWithoutTreatmentInput[] | NotificationUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTreatmentInput | NotificationCreateOrConnectWithoutTreatmentInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTreatmentInput | NotificationUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: NotificationCreateManyTreatmentInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTreatmentInput | NotificationUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTreatmentInput | NotificationUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type TreatmentMedicationUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<TreatmentMedicationCreateWithoutTreatmentInput, TreatmentMedicationUncheckedCreateWithoutTreatmentInput> | TreatmentMedicationCreateWithoutTreatmentInput[] | TreatmentMedicationUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: TreatmentMedicationCreateOrConnectWithoutTreatmentInput | TreatmentMedicationCreateOrConnectWithoutTreatmentInput[]
    upsert?: TreatmentMedicationUpsertWithWhereUniqueWithoutTreatmentInput | TreatmentMedicationUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: TreatmentMedicationCreateManyTreatmentInputEnvelope
    set?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    disconnect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    delete?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    connect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    update?: TreatmentMedicationUpdateWithWhereUniqueWithoutTreatmentInput | TreatmentMedicationUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: TreatmentMedicationUpdateManyWithWhereWithoutTreatmentInput | TreatmentMedicationUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: TreatmentMedicationScalarWhereInput | TreatmentMedicationScalarWhereInput[]
  }

  export type TreatmentImageUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<TreatmentImageCreateWithoutTreatmentInput, TreatmentImageUncheckedCreateWithoutTreatmentInput> | TreatmentImageCreateWithoutTreatmentInput[] | TreatmentImageUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: TreatmentImageCreateOrConnectWithoutTreatmentInput | TreatmentImageCreateOrConnectWithoutTreatmentInput[]
    upsert?: TreatmentImageUpsertWithWhereUniqueWithoutTreatmentInput | TreatmentImageUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: TreatmentImageCreateManyTreatmentInputEnvelope
    set?: TreatmentImageWhereUniqueInput | TreatmentImageWhereUniqueInput[]
    disconnect?: TreatmentImageWhereUniqueInput | TreatmentImageWhereUniqueInput[]
    delete?: TreatmentImageWhereUniqueInput | TreatmentImageWhereUniqueInput[]
    connect?: TreatmentImageWhereUniqueInput | TreatmentImageWhereUniqueInput[]
    update?: TreatmentImageUpdateWithWhereUniqueWithoutTreatmentInput | TreatmentImageUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: TreatmentImageUpdateManyWithWhereWithoutTreatmentInput | TreatmentImageUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: TreatmentImageScalarWhereInput | TreatmentImageScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<NotificationCreateWithoutTreatmentInput, NotificationUncheckedCreateWithoutTreatmentInput> | NotificationCreateWithoutTreatmentInput[] | NotificationUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTreatmentInput | NotificationCreateOrConnectWithoutTreatmentInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTreatmentInput | NotificationUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: NotificationCreateManyTreatmentInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTreatmentInput | NotificationUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTreatmentInput | NotificationUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type TreatmentMedicationUncheckedUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<TreatmentMedicationCreateWithoutTreatmentInput, TreatmentMedicationUncheckedCreateWithoutTreatmentInput> | TreatmentMedicationCreateWithoutTreatmentInput[] | TreatmentMedicationUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: TreatmentMedicationCreateOrConnectWithoutTreatmentInput | TreatmentMedicationCreateOrConnectWithoutTreatmentInput[]
    upsert?: TreatmentMedicationUpsertWithWhereUniqueWithoutTreatmentInput | TreatmentMedicationUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: TreatmentMedicationCreateManyTreatmentInputEnvelope
    set?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    disconnect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    delete?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    connect?: TreatmentMedicationWhereUniqueInput | TreatmentMedicationWhereUniqueInput[]
    update?: TreatmentMedicationUpdateWithWhereUniqueWithoutTreatmentInput | TreatmentMedicationUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: TreatmentMedicationUpdateManyWithWhereWithoutTreatmentInput | TreatmentMedicationUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: TreatmentMedicationScalarWhereInput | TreatmentMedicationScalarWhereInput[]
  }

  export type TreatmentImageUncheckedUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<TreatmentImageCreateWithoutTreatmentInput, TreatmentImageUncheckedCreateWithoutTreatmentInput> | TreatmentImageCreateWithoutTreatmentInput[] | TreatmentImageUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: TreatmentImageCreateOrConnectWithoutTreatmentInput | TreatmentImageCreateOrConnectWithoutTreatmentInput[]
    upsert?: TreatmentImageUpsertWithWhereUniqueWithoutTreatmentInput | TreatmentImageUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: TreatmentImageCreateManyTreatmentInputEnvelope
    set?: TreatmentImageWhereUniqueInput | TreatmentImageWhereUniqueInput[]
    disconnect?: TreatmentImageWhereUniqueInput | TreatmentImageWhereUniqueInput[]
    delete?: TreatmentImageWhereUniqueInput | TreatmentImageWhereUniqueInput[]
    connect?: TreatmentImageWhereUniqueInput | TreatmentImageWhereUniqueInput[]
    update?: TreatmentImageUpdateWithWhereUniqueWithoutTreatmentInput | TreatmentImageUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: TreatmentImageUpdateManyWithWhereWithoutTreatmentInput | TreatmentImageUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: TreatmentImageScalarWhereInput | TreatmentImageScalarWhereInput[]
  }

  export type TreatmentCreateNestedOneWithoutMedicationsInput = {
    create?: XOR<TreatmentCreateWithoutMedicationsInput, TreatmentUncheckedCreateWithoutMedicationsInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutMedicationsInput
    connect?: TreatmentWhereUniqueInput
  }

  export type MedicationCreateNestedOneWithoutTreatmentMedicationsInput = {
    create?: XOR<MedicationCreateWithoutTreatmentMedicationsInput, MedicationUncheckedCreateWithoutTreatmentMedicationsInput>
    connectOrCreate?: MedicationCreateOrConnectWithoutTreatmentMedicationsInput
    connect?: MedicationWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type TreatmentUpdateOneRequiredWithoutMedicationsNestedInput = {
    create?: XOR<TreatmentCreateWithoutMedicationsInput, TreatmentUncheckedCreateWithoutMedicationsInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutMedicationsInput
    upsert?: TreatmentUpsertWithoutMedicationsInput
    connect?: TreatmentWhereUniqueInput
    update?: XOR<XOR<TreatmentUpdateToOneWithWhereWithoutMedicationsInput, TreatmentUpdateWithoutMedicationsInput>, TreatmentUncheckedUpdateWithoutMedicationsInput>
  }

  export type MedicationUpdateOneRequiredWithoutTreatmentMedicationsNestedInput = {
    create?: XOR<MedicationCreateWithoutTreatmentMedicationsInput, MedicationUncheckedCreateWithoutTreatmentMedicationsInput>
    connectOrCreate?: MedicationCreateOrConnectWithoutTreatmentMedicationsInput
    upsert?: MedicationUpsertWithoutTreatmentMedicationsInput
    connect?: MedicationWhereUniqueInput
    update?: XOR<XOR<MedicationUpdateToOneWithWhereWithoutTreatmentMedicationsInput, MedicationUpdateWithoutTreatmentMedicationsInput>, MedicationUncheckedUpdateWithoutTreatmentMedicationsInput>
  }

  export type TreatmentCreateNestedOneWithoutImagesInput = {
    create?: XOR<TreatmentCreateWithoutImagesInput, TreatmentUncheckedCreateWithoutImagesInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutImagesInput
    connect?: TreatmentWhereUniqueInput
  }

  export type TreatmentUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<TreatmentCreateWithoutImagesInput, TreatmentUncheckedCreateWithoutImagesInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutImagesInput
    upsert?: TreatmentUpsertWithoutImagesInput
    connect?: TreatmentWhereUniqueInput
    update?: XOR<XOR<TreatmentUpdateToOneWithWhereWithoutImagesInput, TreatmentUpdateWithoutImagesInput>, TreatmentUncheckedUpdateWithoutImagesInput>
  }

  export type TreatmentCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<TreatmentCreateWithoutNotificationsInput, TreatmentUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutNotificationsInput
    connect?: TreatmentWhereUniqueInput
  }

  export type TreatmentUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<TreatmentCreateWithoutNotificationsInput, TreatmentUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutNotificationsInput
    upsert?: TreatmentUpsertWithoutNotificationsInput
    connect?: TreatmentWhereUniqueInput
    update?: XOR<XOR<TreatmentUpdateToOneWithWhereWithoutNotificationsInput, TreatmentUpdateWithoutNotificationsInput>, TreatmentUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutNotificationPreferencesInput = {
    create?: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationPreferencesInput
    upsert?: UserUpsertWithoutNotificationPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationPreferencesInput, UserUpdateWithoutNotificationPreferencesInput>, UserUncheckedUpdateWithoutNotificationPreferencesInput>
  }

  export type UserCreateNestedOneWithoutPushSubscriptionsInput = {
    create?: XOR<UserCreateWithoutPushSubscriptionsInput, UserUncheckedCreateWithoutPushSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPushSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPushSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutPushSubscriptionsInput, UserUncheckedCreateWithoutPushSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPushSubscriptionsInput
    upsert?: UserUpsertWithoutPushSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPushSubscriptionsInput, UserUpdateWithoutPushSubscriptionsInput>, UserUncheckedUpdateWithoutPushSubscriptionsInput>
  }

  export type ShoppingListCreateNestedOneWithoutItemsInput = {
    create?: XOR<ShoppingListCreateWithoutItemsInput, ShoppingListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ShoppingListCreateOrConnectWithoutItemsInput
    connect?: ShoppingListWhereUniqueInput
  }

  export type ShoppingListUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ShoppingListCreateWithoutItemsInput, ShoppingListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ShoppingListCreateOrConnectWithoutItemsInput
    upsert?: ShoppingListUpsertWithoutItemsInput
    connect?: ShoppingListWhereUniqueInput
    update?: XOR<XOR<ShoppingListUpdateToOneWithWhereWithoutItemsInput, ShoppingListUpdateWithoutItemsInput>, ShoppingListUncheckedUpdateWithoutItemsInput>
  }

  export type ShoppingItemCreateNestedManyWithoutShoppingListInput = {
    create?: XOR<ShoppingItemCreateWithoutShoppingListInput, ShoppingItemUncheckedCreateWithoutShoppingListInput> | ShoppingItemCreateWithoutShoppingListInput[] | ShoppingItemUncheckedCreateWithoutShoppingListInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutShoppingListInput | ShoppingItemCreateOrConnectWithoutShoppingListInput[]
    createMany?: ShoppingItemCreateManyShoppingListInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutShoppingListsInput = {
    create?: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingListsInput
    connect?: UserWhereUniqueInput
  }

  export type ShoppingItemUncheckedCreateNestedManyWithoutShoppingListInput = {
    create?: XOR<ShoppingItemCreateWithoutShoppingListInput, ShoppingItemUncheckedCreateWithoutShoppingListInput> | ShoppingItemCreateWithoutShoppingListInput[] | ShoppingItemUncheckedCreateWithoutShoppingListInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutShoppingListInput | ShoppingItemCreateOrConnectWithoutShoppingListInput[]
    createMany?: ShoppingItemCreateManyShoppingListInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type ShoppingItemUpdateManyWithoutShoppingListNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutShoppingListInput, ShoppingItemUncheckedCreateWithoutShoppingListInput> | ShoppingItemCreateWithoutShoppingListInput[] | ShoppingItemUncheckedCreateWithoutShoppingListInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutShoppingListInput | ShoppingItemCreateOrConnectWithoutShoppingListInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutShoppingListInput | ShoppingItemUpsertWithWhereUniqueWithoutShoppingListInput[]
    createMany?: ShoppingItemCreateManyShoppingListInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutShoppingListInput | ShoppingItemUpdateWithWhereUniqueWithoutShoppingListInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutShoppingListInput | ShoppingItemUpdateManyWithWhereWithoutShoppingListInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutShoppingListsNestedInput = {
    create?: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingListsInput
    upsert?: UserUpsertWithoutShoppingListsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShoppingListsInput, UserUpdateWithoutShoppingListsInput>, UserUncheckedUpdateWithoutShoppingListsInput>
  }

  export type ShoppingItemUncheckedUpdateManyWithoutShoppingListNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutShoppingListInput, ShoppingItemUncheckedCreateWithoutShoppingListInput> | ShoppingItemCreateWithoutShoppingListInput[] | ShoppingItemUncheckedCreateWithoutShoppingListInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutShoppingListInput | ShoppingItemCreateOrConnectWithoutShoppingListInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutShoppingListInput | ShoppingItemUpsertWithWhereUniqueWithoutShoppingListInput[]
    createMany?: ShoppingItemCreateManyShoppingListInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutShoppingListInput | ShoppingItemUpdateWithWhereUniqueWithoutShoppingListInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutShoppingListInput | ShoppingItemUpdateManyWithWhereWithoutShoppingListInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutGrupoCreadoInput = {
    create?: XOR<UserCreateWithoutGrupoCreadoInput, UserUncheckedCreateWithoutGrupoCreadoInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrupoCreadoInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutGrupoInput = {
    create?: XOR<UserCreateWithoutGrupoInput, UserUncheckedCreateWithoutGrupoInput> | UserCreateWithoutGrupoInput[] | UserUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGrupoInput | UserCreateOrConnectWithoutGrupoInput[]
    createMany?: UserCreateManyGrupoInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PerfilMenorCreateNestedManyWithoutGrupoInput = {
    create?: XOR<PerfilMenorCreateWithoutGrupoInput, PerfilMenorUncheckedCreateWithoutGrupoInput> | PerfilMenorCreateWithoutGrupoInput[] | PerfilMenorUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PerfilMenorCreateOrConnectWithoutGrupoInput | PerfilMenorCreateOrConnectWithoutGrupoInput[]
    createMany?: PerfilMenorCreateManyGrupoInputEnvelope
    connect?: PerfilMenorWhereUniqueInput | PerfilMenorWhereUniqueInput[]
  }

  export type TomaCreateNestedManyWithoutGrupoInput = {
    create?: XOR<TomaCreateWithoutGrupoInput, TomaUncheckedCreateWithoutGrupoInput> | TomaCreateWithoutGrupoInput[] | TomaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutGrupoInput | TomaCreateOrConnectWithoutGrupoInput[]
    createMany?: TomaCreateManyGrupoInputEnvelope
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<UserCreateWithoutGrupoInput, UserUncheckedCreateWithoutGrupoInput> | UserCreateWithoutGrupoInput[] | UserUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGrupoInput | UserCreateOrConnectWithoutGrupoInput[]
    createMany?: UserCreateManyGrupoInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PerfilMenorUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<PerfilMenorCreateWithoutGrupoInput, PerfilMenorUncheckedCreateWithoutGrupoInput> | PerfilMenorCreateWithoutGrupoInput[] | PerfilMenorUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PerfilMenorCreateOrConnectWithoutGrupoInput | PerfilMenorCreateOrConnectWithoutGrupoInput[]
    createMany?: PerfilMenorCreateManyGrupoInputEnvelope
    connect?: PerfilMenorWhereUniqueInput | PerfilMenorWhereUniqueInput[]
  }

  export type TomaUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<TomaCreateWithoutGrupoInput, TomaUncheckedCreateWithoutGrupoInput> | TomaCreateWithoutGrupoInput[] | TomaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutGrupoInput | TomaCreateOrConnectWithoutGrupoInput[]
    createMany?: TomaCreateManyGrupoInputEnvelope
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutGrupoCreadoNestedInput = {
    create?: XOR<UserCreateWithoutGrupoCreadoInput, UserUncheckedCreateWithoutGrupoCreadoInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrupoCreadoInput
    upsert?: UserUpsertWithoutGrupoCreadoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGrupoCreadoInput, UserUpdateWithoutGrupoCreadoInput>, UserUncheckedUpdateWithoutGrupoCreadoInput>
  }

  export type UserUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<UserCreateWithoutGrupoInput, UserUncheckedCreateWithoutGrupoInput> | UserCreateWithoutGrupoInput[] | UserUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGrupoInput | UserCreateOrConnectWithoutGrupoInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGrupoInput | UserUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: UserCreateManyGrupoInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGrupoInput | UserUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGrupoInput | UserUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PerfilMenorUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<PerfilMenorCreateWithoutGrupoInput, PerfilMenorUncheckedCreateWithoutGrupoInput> | PerfilMenorCreateWithoutGrupoInput[] | PerfilMenorUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PerfilMenorCreateOrConnectWithoutGrupoInput | PerfilMenorCreateOrConnectWithoutGrupoInput[]
    upsert?: PerfilMenorUpsertWithWhereUniqueWithoutGrupoInput | PerfilMenorUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: PerfilMenorCreateManyGrupoInputEnvelope
    set?: PerfilMenorWhereUniqueInput | PerfilMenorWhereUniqueInput[]
    disconnect?: PerfilMenorWhereUniqueInput | PerfilMenorWhereUniqueInput[]
    delete?: PerfilMenorWhereUniqueInput | PerfilMenorWhereUniqueInput[]
    connect?: PerfilMenorWhereUniqueInput | PerfilMenorWhereUniqueInput[]
    update?: PerfilMenorUpdateWithWhereUniqueWithoutGrupoInput | PerfilMenorUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: PerfilMenorUpdateManyWithWhereWithoutGrupoInput | PerfilMenorUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: PerfilMenorScalarWhereInput | PerfilMenorScalarWhereInput[]
  }

  export type TomaUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<TomaCreateWithoutGrupoInput, TomaUncheckedCreateWithoutGrupoInput> | TomaCreateWithoutGrupoInput[] | TomaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutGrupoInput | TomaCreateOrConnectWithoutGrupoInput[]
    upsert?: TomaUpsertWithWhereUniqueWithoutGrupoInput | TomaUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: TomaCreateManyGrupoInputEnvelope
    set?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    disconnect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    delete?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    update?: TomaUpdateWithWhereUniqueWithoutGrupoInput | TomaUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: TomaUpdateManyWithWhereWithoutGrupoInput | TomaUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: TomaScalarWhereInput | TomaScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<UserCreateWithoutGrupoInput, UserUncheckedCreateWithoutGrupoInput> | UserCreateWithoutGrupoInput[] | UserUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGrupoInput | UserCreateOrConnectWithoutGrupoInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGrupoInput | UserUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: UserCreateManyGrupoInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGrupoInput | UserUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGrupoInput | UserUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PerfilMenorUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<PerfilMenorCreateWithoutGrupoInput, PerfilMenorUncheckedCreateWithoutGrupoInput> | PerfilMenorCreateWithoutGrupoInput[] | PerfilMenorUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: PerfilMenorCreateOrConnectWithoutGrupoInput | PerfilMenorCreateOrConnectWithoutGrupoInput[]
    upsert?: PerfilMenorUpsertWithWhereUniqueWithoutGrupoInput | PerfilMenorUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: PerfilMenorCreateManyGrupoInputEnvelope
    set?: PerfilMenorWhereUniqueInput | PerfilMenorWhereUniqueInput[]
    disconnect?: PerfilMenorWhereUniqueInput | PerfilMenorWhereUniqueInput[]
    delete?: PerfilMenorWhereUniqueInput | PerfilMenorWhereUniqueInput[]
    connect?: PerfilMenorWhereUniqueInput | PerfilMenorWhereUniqueInput[]
    update?: PerfilMenorUpdateWithWhereUniqueWithoutGrupoInput | PerfilMenorUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: PerfilMenorUpdateManyWithWhereWithoutGrupoInput | PerfilMenorUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: PerfilMenorScalarWhereInput | PerfilMenorScalarWhereInput[]
  }

  export type TomaUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<TomaCreateWithoutGrupoInput, TomaUncheckedCreateWithoutGrupoInput> | TomaCreateWithoutGrupoInput[] | TomaUncheckedCreateWithoutGrupoInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutGrupoInput | TomaCreateOrConnectWithoutGrupoInput[]
    upsert?: TomaUpsertWithWhereUniqueWithoutGrupoInput | TomaUpsertWithWhereUniqueWithoutGrupoInput[]
    createMany?: TomaCreateManyGrupoInputEnvelope
    set?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    disconnect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    delete?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    update?: TomaUpdateWithWhereUniqueWithoutGrupoInput | TomaUpdateWithWhereUniqueWithoutGrupoInput[]
    updateMany?: TomaUpdateManyWithWhereWithoutGrupoInput | TomaUpdateManyWithWhereWithoutGrupoInput[]
    deleteMany?: TomaScalarWhereInput | TomaScalarWhereInput[]
  }

  export type GrupoFamiliarCreateNestedOneWithoutPerfilesMenoresInput = {
    create?: XOR<GrupoFamiliarCreateWithoutPerfilesMenoresInput, GrupoFamiliarUncheckedCreateWithoutPerfilesMenoresInput>
    connectOrCreate?: GrupoFamiliarCreateOrConnectWithoutPerfilesMenoresInput
    connect?: GrupoFamiliarWhereUniqueInput
  }

  export type TomaCreateNestedManyWithoutConsumidorPerfilInput = {
    create?: XOR<TomaCreateWithoutConsumidorPerfilInput, TomaUncheckedCreateWithoutConsumidorPerfilInput> | TomaCreateWithoutConsumidorPerfilInput[] | TomaUncheckedCreateWithoutConsumidorPerfilInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutConsumidorPerfilInput | TomaCreateOrConnectWithoutConsumidorPerfilInput[]
    createMany?: TomaCreateManyConsumidorPerfilInputEnvelope
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
  }

  export type TomaUncheckedCreateNestedManyWithoutConsumidorPerfilInput = {
    create?: XOR<TomaCreateWithoutConsumidorPerfilInput, TomaUncheckedCreateWithoutConsumidorPerfilInput> | TomaCreateWithoutConsumidorPerfilInput[] | TomaUncheckedCreateWithoutConsumidorPerfilInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutConsumidorPerfilInput | TomaCreateOrConnectWithoutConsumidorPerfilInput[]
    createMany?: TomaCreateManyConsumidorPerfilInputEnvelope
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
  }

  export type GrupoFamiliarUpdateOneRequiredWithoutPerfilesMenoresNestedInput = {
    create?: XOR<GrupoFamiliarCreateWithoutPerfilesMenoresInput, GrupoFamiliarUncheckedCreateWithoutPerfilesMenoresInput>
    connectOrCreate?: GrupoFamiliarCreateOrConnectWithoutPerfilesMenoresInput
    upsert?: GrupoFamiliarUpsertWithoutPerfilesMenoresInput
    connect?: GrupoFamiliarWhereUniqueInput
    update?: XOR<XOR<GrupoFamiliarUpdateToOneWithWhereWithoutPerfilesMenoresInput, GrupoFamiliarUpdateWithoutPerfilesMenoresInput>, GrupoFamiliarUncheckedUpdateWithoutPerfilesMenoresInput>
  }

  export type TomaUpdateManyWithoutConsumidorPerfilNestedInput = {
    create?: XOR<TomaCreateWithoutConsumidorPerfilInput, TomaUncheckedCreateWithoutConsumidorPerfilInput> | TomaCreateWithoutConsumidorPerfilInput[] | TomaUncheckedCreateWithoutConsumidorPerfilInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutConsumidorPerfilInput | TomaCreateOrConnectWithoutConsumidorPerfilInput[]
    upsert?: TomaUpsertWithWhereUniqueWithoutConsumidorPerfilInput | TomaUpsertWithWhereUniqueWithoutConsumidorPerfilInput[]
    createMany?: TomaCreateManyConsumidorPerfilInputEnvelope
    set?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    disconnect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    delete?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    update?: TomaUpdateWithWhereUniqueWithoutConsumidorPerfilInput | TomaUpdateWithWhereUniqueWithoutConsumidorPerfilInput[]
    updateMany?: TomaUpdateManyWithWhereWithoutConsumidorPerfilInput | TomaUpdateManyWithWhereWithoutConsumidorPerfilInput[]
    deleteMany?: TomaScalarWhereInput | TomaScalarWhereInput[]
  }

  export type TomaUncheckedUpdateManyWithoutConsumidorPerfilNestedInput = {
    create?: XOR<TomaCreateWithoutConsumidorPerfilInput, TomaUncheckedCreateWithoutConsumidorPerfilInput> | TomaCreateWithoutConsumidorPerfilInput[] | TomaUncheckedCreateWithoutConsumidorPerfilInput[]
    connectOrCreate?: TomaCreateOrConnectWithoutConsumidorPerfilInput | TomaCreateOrConnectWithoutConsumidorPerfilInput[]
    upsert?: TomaUpsertWithWhereUniqueWithoutConsumidorPerfilInput | TomaUpsertWithWhereUniqueWithoutConsumidorPerfilInput[]
    createMany?: TomaCreateManyConsumidorPerfilInputEnvelope
    set?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    disconnect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    delete?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    connect?: TomaWhereUniqueInput | TomaWhereUniqueInput[]
    update?: TomaUpdateWithWhereUniqueWithoutConsumidorPerfilInput | TomaUpdateWithWhereUniqueWithoutConsumidorPerfilInput[]
    updateMany?: TomaUpdateManyWithWhereWithoutConsumidorPerfilInput | TomaUpdateManyWithWhereWithoutConsumidorPerfilInput[]
    deleteMany?: TomaScalarWhereInput | TomaScalarWhereInput[]
  }

  export type MedicationCreateNestedOneWithoutTomasInput = {
    create?: XOR<MedicationCreateWithoutTomasInput, MedicationUncheckedCreateWithoutTomasInput>
    connectOrCreate?: MedicationCreateOrConnectWithoutTomasInput
    connect?: MedicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTomasConsumidasInput = {
    create?: XOR<UserCreateWithoutTomasConsumidasInput, UserUncheckedCreateWithoutTomasConsumidasInput>
    connectOrCreate?: UserCreateOrConnectWithoutTomasConsumidasInput
    connect?: UserWhereUniqueInput
  }

  export type PerfilMenorCreateNestedOneWithoutTomasInput = {
    create?: XOR<PerfilMenorCreateWithoutTomasInput, PerfilMenorUncheckedCreateWithoutTomasInput>
    connectOrCreate?: PerfilMenorCreateOrConnectWithoutTomasInput
    connect?: PerfilMenorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTomasRegistradasInput = {
    create?: XOR<UserCreateWithoutTomasRegistradasInput, UserUncheckedCreateWithoutTomasRegistradasInput>
    connectOrCreate?: UserCreateOrConnectWithoutTomasRegistradasInput
    connect?: UserWhereUniqueInput
  }

  export type GrupoFamiliarCreateNestedOneWithoutTomasInput = {
    create?: XOR<GrupoFamiliarCreateWithoutTomasInput, GrupoFamiliarUncheckedCreateWithoutTomasInput>
    connectOrCreate?: GrupoFamiliarCreateOrConnectWithoutTomasInput
    connect?: GrupoFamiliarWhereUniqueInput
  }

  export type MedicationUpdateOneRequiredWithoutTomasNestedInput = {
    create?: XOR<MedicationCreateWithoutTomasInput, MedicationUncheckedCreateWithoutTomasInput>
    connectOrCreate?: MedicationCreateOrConnectWithoutTomasInput
    upsert?: MedicationUpsertWithoutTomasInput
    connect?: MedicationWhereUniqueInput
    update?: XOR<XOR<MedicationUpdateToOneWithWhereWithoutTomasInput, MedicationUpdateWithoutTomasInput>, MedicationUncheckedUpdateWithoutTomasInput>
  }

  export type UserUpdateOneWithoutTomasConsumidasNestedInput = {
    create?: XOR<UserCreateWithoutTomasConsumidasInput, UserUncheckedCreateWithoutTomasConsumidasInput>
    connectOrCreate?: UserCreateOrConnectWithoutTomasConsumidasInput
    upsert?: UserUpsertWithoutTomasConsumidasInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTomasConsumidasInput, UserUpdateWithoutTomasConsumidasInput>, UserUncheckedUpdateWithoutTomasConsumidasInput>
  }

  export type PerfilMenorUpdateOneWithoutTomasNestedInput = {
    create?: XOR<PerfilMenorCreateWithoutTomasInput, PerfilMenorUncheckedCreateWithoutTomasInput>
    connectOrCreate?: PerfilMenorCreateOrConnectWithoutTomasInput
    upsert?: PerfilMenorUpsertWithoutTomasInput
    disconnect?: PerfilMenorWhereInput | boolean
    delete?: PerfilMenorWhereInput | boolean
    connect?: PerfilMenorWhereUniqueInput
    update?: XOR<XOR<PerfilMenorUpdateToOneWithWhereWithoutTomasInput, PerfilMenorUpdateWithoutTomasInput>, PerfilMenorUncheckedUpdateWithoutTomasInput>
  }

  export type UserUpdateOneRequiredWithoutTomasRegistradasNestedInput = {
    create?: XOR<UserCreateWithoutTomasRegistradasInput, UserUncheckedCreateWithoutTomasRegistradasInput>
    connectOrCreate?: UserCreateOrConnectWithoutTomasRegistradasInput
    upsert?: UserUpsertWithoutTomasRegistradasInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTomasRegistradasInput, UserUpdateWithoutTomasRegistradasInput>, UserUncheckedUpdateWithoutTomasRegistradasInput>
  }

  export type GrupoFamiliarUpdateOneRequiredWithoutTomasNestedInput = {
    create?: XOR<GrupoFamiliarCreateWithoutTomasInput, GrupoFamiliarUncheckedCreateWithoutTomasInput>
    connectOrCreate?: GrupoFamiliarCreateOrConnectWithoutTomasInput
    upsert?: GrupoFamiliarUpsertWithoutTomasInput
    connect?: GrupoFamiliarWhereUniqueInput
    update?: XOR<XOR<GrupoFamiliarUpdateToOneWithWhereWithoutTomasInput, GrupoFamiliarUpdateWithoutTomasInput>, GrupoFamiliarUncheckedUpdateWithoutTomasInput>
  }

  export type UserCreateNestedOneWithoutHistorialInput = {
    create?: XOR<UserCreateWithoutHistorialInput, UserUncheckedCreateWithoutHistorialInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistorialInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHistorialNestedInput = {
    create?: XOR<UserCreateWithoutHistorialInput, UserUncheckedCreateWithoutHistorialInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistorialInput
    upsert?: UserUpsertWithoutHistorialInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHistorialInput, UserUpdateWithoutHistorialInput>, UserUncheckedUpdateWithoutHistorialInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type GrupoFamiliarCreateWithoutIntegrantesInput = {
    id?: string
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creador: UserCreateNestedOneWithoutGrupoCreadoInput
    perfilesMenores?: PerfilMenorCreateNestedManyWithoutGrupoInput
    tomas?: TomaCreateNestedManyWithoutGrupoInput
  }

  export type GrupoFamiliarUncheckedCreateWithoutIntegrantesInput = {
    id?: string
    nombre: string
    creadorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    perfilesMenores?: PerfilMenorUncheckedCreateNestedManyWithoutGrupoInput
    tomas?: TomaUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GrupoFamiliarCreateOrConnectWithoutIntegrantesInput = {
    where: GrupoFamiliarWhereUniqueInput
    create: XOR<GrupoFamiliarCreateWithoutIntegrantesInput, GrupoFamiliarUncheckedCreateWithoutIntegrantesInput>
  }

  export type MedicationCreateWithoutUserInput = {
    id?: string
    commercialName: string
    activeIngredient?: string | null
    description?: string | null
    intakeRecommendations?: string | null
    imageUrl?: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date | string
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    treatmentMedications?: TreatmentMedicationCreateNestedManyWithoutMedicationInput
    tomas?: TomaCreateNestedManyWithoutMedicamentoInput
  }

  export type MedicationUncheckedCreateWithoutUserInput = {
    id?: string
    commercialName: string
    activeIngredient?: string | null
    description?: string | null
    intakeRecommendations?: string | null
    imageUrl?: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date | string
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    treatmentMedications?: TreatmentMedicationUncheckedCreateNestedManyWithoutMedicationInput
    tomas?: TomaUncheckedCreateNestedManyWithoutMedicamentoInput
  }

  export type MedicationCreateOrConnectWithoutUserInput = {
    where: MedicationWhereUniqueInput
    create: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput>
  }

  export type MedicationCreateManyUserInputEnvelope = {
    data: MedicationCreateManyUserInput | MedicationCreateManyUserInput[]
  }

  export type NotificationSettingsCreateWithoutUserInput = {
    id?: string
    daysBeforeExpiration?: number
    lowStockThreshold?: number
  }

  export type NotificationSettingsUncheckedCreateWithoutUserInput = {
    id?: string
    daysBeforeExpiration?: number
    lowStockThreshold?: number
  }

  export type NotificationSettingsCreateOrConnectWithoutUserInput = {
    where: NotificationSettingsWhereUniqueInput
    create: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
  }

  export type TreatmentCreateWithoutUserInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutTreatmentInput
    medications?: TreatmentMedicationCreateNestedManyWithoutTreatmentInput
    images?: TreatmentImageCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutTreatmentInput
    medications?: TreatmentMedicationUncheckedCreateNestedManyWithoutTreatmentInput
    images?: TreatmentImageUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutUserInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutUserInput, TreatmentUncheckedCreateWithoutUserInput>
  }

  export type TreatmentCreateManyUserInputEnvelope = {
    data: TreatmentCreateManyUserInput | TreatmentCreateManyUserInput[]
  }

  export type NotificationPreferencesCreateWithoutUserInput = {
    id?: string
    push?: boolean
    sound?: boolean
    email?: boolean
    browser?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferencesUncheckedCreateWithoutUserInput = {
    id?: string
    push?: boolean
    sound?: boolean
    email?: boolean
    browser?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferencesCreateOrConnectWithoutUserInput = {
    where: NotificationPreferencesWhereUniqueInput
    create: XOR<NotificationPreferencesCreateWithoutUserInput, NotificationPreferencesUncheckedCreateWithoutUserInput>
  }

  export type PushSubscriptionCreateWithoutUserInput = {
    id?: string
    endpoint: string
    p256dhKey: string
    authKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushSubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    endpoint: string
    p256dhKey: string
    authKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushSubscriptionCreateOrConnectWithoutUserInput = {
    where: PushSubscriptionWhereUniqueInput
    create: XOR<PushSubscriptionCreateWithoutUserInput, PushSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type PushSubscriptionCreateManyUserInputEnvelope = {
    data: PushSubscriptionCreateManyUserInput | PushSubscriptionCreateManyUserInput[]
  }

  export type ShoppingListCreateWithoutUserInput = {
    id?: string
    name: string
    total: number
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ShoppingItemCreateNestedManyWithoutShoppingListInput
  }

  export type ShoppingListUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    total: number
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ShoppingItemUncheckedCreateNestedManyWithoutShoppingListInput
  }

  export type ShoppingListCreateOrConnectWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    create: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput>
  }

  export type ShoppingListCreateManyUserInputEnvelope = {
    data: ShoppingListCreateManyUserInput | ShoppingListCreateManyUserInput[]
  }

  export type TomaCreateWithoutRegistranteInput = {
    id?: string
    fechaHora?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    medicamento: MedicationCreateNestedOneWithoutTomasInput
    consumidorUsuario?: UserCreateNestedOneWithoutTomasConsumidasInput
    consumidorPerfil?: PerfilMenorCreateNestedOneWithoutTomasInput
    grupo: GrupoFamiliarCreateNestedOneWithoutTomasInput
  }

  export type TomaUncheckedCreateWithoutRegistranteInput = {
    id?: string
    medicamentoId: string
    consumidorUsuarioId?: string | null
    consumidorPerfilId?: string | null
    fechaHora?: Date | string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaCreateOrConnectWithoutRegistranteInput = {
    where: TomaWhereUniqueInput
    create: XOR<TomaCreateWithoutRegistranteInput, TomaUncheckedCreateWithoutRegistranteInput>
  }

  export type TomaCreateManyRegistranteInputEnvelope = {
    data: TomaCreateManyRegistranteInput | TomaCreateManyRegistranteInput[]
  }

  export type TomaCreateWithoutConsumidorUsuarioInput = {
    id?: string
    fechaHora?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    medicamento: MedicationCreateNestedOneWithoutTomasInput
    consumidorPerfil?: PerfilMenorCreateNestedOneWithoutTomasInput
    registrante: UserCreateNestedOneWithoutTomasRegistradasInput
    grupo: GrupoFamiliarCreateNestedOneWithoutTomasInput
  }

  export type TomaUncheckedCreateWithoutConsumidorUsuarioInput = {
    id?: string
    medicamentoId: string
    consumidorPerfilId?: string | null
    registranteId: string
    fechaHora?: Date | string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaCreateOrConnectWithoutConsumidorUsuarioInput = {
    where: TomaWhereUniqueInput
    create: XOR<TomaCreateWithoutConsumidorUsuarioInput, TomaUncheckedCreateWithoutConsumidorUsuarioInput>
  }

  export type TomaCreateManyConsumidorUsuarioInputEnvelope = {
    data: TomaCreateManyConsumidorUsuarioInput | TomaCreateManyConsumidorUsuarioInput[]
  }

  export type GrupoFamiliarCreateWithoutCreadorInput = {
    id?: string
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    integrantes?: UserCreateNestedManyWithoutGrupoInput
    perfilesMenores?: PerfilMenorCreateNestedManyWithoutGrupoInput
    tomas?: TomaCreateNestedManyWithoutGrupoInput
  }

  export type GrupoFamiliarUncheckedCreateWithoutCreadorInput = {
    id?: string
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    integrantes?: UserUncheckedCreateNestedManyWithoutGrupoInput
    perfilesMenores?: PerfilMenorUncheckedCreateNestedManyWithoutGrupoInput
    tomas?: TomaUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GrupoFamiliarCreateOrConnectWithoutCreadorInput = {
    where: GrupoFamiliarWhereUniqueInput
    create: XOR<GrupoFamiliarCreateWithoutCreadorInput, GrupoFamiliarUncheckedCreateWithoutCreadorInput>
  }

  export type GrupoFamiliarCreateManyCreadorInputEnvelope = {
    data: GrupoFamiliarCreateManyCreadorInput | GrupoFamiliarCreateManyCreadorInput[]
  }

  export type HistorialCreateWithoutUsuarioInput = {
    id?: string
    tipoAccion: string
    entidadTipo: string
    entidadId?: string | null
    datosPrevios?: string | null
    datosPosteriores?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type HistorialUncheckedCreateWithoutUsuarioInput = {
    id?: string
    tipoAccion: string
    entidadTipo: string
    entidadId?: string | null
    datosPrevios?: string | null
    datosPosteriores?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type HistorialCreateOrConnectWithoutUsuarioInput = {
    where: HistorialWhereUniqueInput
    create: XOR<HistorialCreateWithoutUsuarioInput, HistorialUncheckedCreateWithoutUsuarioInput>
  }

  export type HistorialCreateManyUsuarioInputEnvelope = {
    data: HistorialCreateManyUsuarioInput | HistorialCreateManyUsuarioInput[]
  }

  export type GrupoFamiliarUpsertWithoutIntegrantesInput = {
    update: XOR<GrupoFamiliarUpdateWithoutIntegrantesInput, GrupoFamiliarUncheckedUpdateWithoutIntegrantesInput>
    create: XOR<GrupoFamiliarCreateWithoutIntegrantesInput, GrupoFamiliarUncheckedCreateWithoutIntegrantesInput>
    where?: GrupoFamiliarWhereInput
  }

  export type GrupoFamiliarUpdateToOneWithWhereWithoutIntegrantesInput = {
    where?: GrupoFamiliarWhereInput
    data: XOR<GrupoFamiliarUpdateWithoutIntegrantesInput, GrupoFamiliarUncheckedUpdateWithoutIntegrantesInput>
  }

  export type GrupoFamiliarUpdateWithoutIntegrantesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creador?: UserUpdateOneRequiredWithoutGrupoCreadoNestedInput
    perfilesMenores?: PerfilMenorUpdateManyWithoutGrupoNestedInput
    tomas?: TomaUpdateManyWithoutGrupoNestedInput
  }

  export type GrupoFamiliarUncheckedUpdateWithoutIntegrantesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    creadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    perfilesMenores?: PerfilMenorUncheckedUpdateManyWithoutGrupoNestedInput
    tomas?: TomaUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type MedicationUpsertWithWhereUniqueWithoutUserInput = {
    where: MedicationWhereUniqueInput
    update: XOR<MedicationUpdateWithoutUserInput, MedicationUncheckedUpdateWithoutUserInput>
    create: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput>
  }

  export type MedicationUpdateWithWhereUniqueWithoutUserInput = {
    where: MedicationWhereUniqueInput
    data: XOR<MedicationUpdateWithoutUserInput, MedicationUncheckedUpdateWithoutUserInput>
  }

  export type MedicationUpdateManyWithWhereWithoutUserInput = {
    where: MedicationScalarWhereInput
    data: XOR<MedicationUpdateManyMutationInput, MedicationUncheckedUpdateManyWithoutUserInput>
  }

  export type MedicationScalarWhereInput = {
    AND?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
    OR?: MedicationScalarWhereInput[]
    NOT?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
    id?: StringFilter<"Medication"> | string
    commercialName?: StringFilter<"Medication"> | string
    activeIngredient?: StringNullableFilter<"Medication"> | string | null
    description?: StringNullableFilter<"Medication"> | string | null
    intakeRecommendations?: StringNullableFilter<"Medication"> | string | null
    imageUrl?: StringNullableFilter<"Medication"> | string | null
    initialQuantity?: FloatFilter<"Medication"> | number
    currentQuantity?: FloatFilter<"Medication"> | number
    unit?: StringFilter<"Medication"> | string
    expirationDate?: DateTimeFilter<"Medication"> | Date | string
    archived?: BoolFilter<"Medication"> | boolean
    createdAt?: DateTimeFilter<"Medication"> | Date | string
    updatedAt?: DateTimeFilter<"Medication"> | Date | string
    userId?: StringFilter<"Medication"> | string
  }

  export type NotificationSettingsUpsertWithoutUserInput = {
    update: XOR<NotificationSettingsUpdateWithoutUserInput, NotificationSettingsUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
    where?: NotificationSettingsWhereInput
  }

  export type NotificationSettingsUpdateToOneWithWhereWithoutUserInput = {
    where?: NotificationSettingsWhereInput
    data: XOR<NotificationSettingsUpdateWithoutUserInput, NotificationSettingsUncheckedUpdateWithoutUserInput>
  }

  export type NotificationSettingsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    daysBeforeExpiration?: IntFieldUpdateOperationsInput | number
    lowStockThreshold?: FloatFieldUpdateOperationsInput | number
  }

  export type NotificationSettingsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    daysBeforeExpiration?: IntFieldUpdateOperationsInput | number
    lowStockThreshold?: FloatFieldUpdateOperationsInput | number
  }

  export type TreatmentUpsertWithWhereUniqueWithoutUserInput = {
    where: TreatmentWhereUniqueInput
    update: XOR<TreatmentUpdateWithoutUserInput, TreatmentUncheckedUpdateWithoutUserInput>
    create: XOR<TreatmentCreateWithoutUserInput, TreatmentUncheckedCreateWithoutUserInput>
  }

  export type TreatmentUpdateWithWhereUniqueWithoutUserInput = {
    where: TreatmentWhereUniqueInput
    data: XOR<TreatmentUpdateWithoutUserInput, TreatmentUncheckedUpdateWithoutUserInput>
  }

  export type TreatmentUpdateManyWithWhereWithoutUserInput = {
    where: TreatmentScalarWhereInput
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyWithoutUserInput>
  }

  export type TreatmentScalarWhereInput = {
    AND?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
    OR?: TreatmentScalarWhereInput[]
    NOT?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
    id?: StringFilter<"Treatment"> | string
    name?: StringFilter<"Treatment"> | string
    patient?: StringFilter<"Treatment"> | string
    patientId?: StringNullableFilter<"Treatment"> | string | null
    patientType?: StringNullableFilter<"Treatment"> | string | null
    symptoms?: StringNullableFilter<"Treatment"> | string | null
    startDate?: DateTimeFilter<"Treatment"> | Date | string
    endDate?: DateTimeFilter<"Treatment"> | Date | string
    isActive?: BoolFilter<"Treatment"> | boolean
    userId?: StringFilter<"Treatment"> | string
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeFilter<"Treatment"> | Date | string
  }

  export type NotificationPreferencesUpsertWithoutUserInput = {
    update: XOR<NotificationPreferencesUpdateWithoutUserInput, NotificationPreferencesUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationPreferencesCreateWithoutUserInput, NotificationPreferencesUncheckedCreateWithoutUserInput>
    where?: NotificationPreferencesWhereInput
  }

  export type NotificationPreferencesUpdateToOneWithWhereWithoutUserInput = {
    where?: NotificationPreferencesWhereInput
    data: XOR<NotificationPreferencesUpdateWithoutUserInput, NotificationPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type NotificationPreferencesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    push?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    browser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferencesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    push?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    browser?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: PushSubscriptionWhereUniqueInput
    update: XOR<PushSubscriptionUpdateWithoutUserInput, PushSubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<PushSubscriptionCreateWithoutUserInput, PushSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type PushSubscriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: PushSubscriptionWhereUniqueInput
    data: XOR<PushSubscriptionUpdateWithoutUserInput, PushSubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type PushSubscriptionUpdateManyWithWhereWithoutUserInput = {
    where: PushSubscriptionScalarWhereInput
    data: XOR<PushSubscriptionUpdateManyMutationInput, PushSubscriptionUncheckedUpdateManyWithoutUserInput>
  }

  export type PushSubscriptionScalarWhereInput = {
    AND?: PushSubscriptionScalarWhereInput | PushSubscriptionScalarWhereInput[]
    OR?: PushSubscriptionScalarWhereInput[]
    NOT?: PushSubscriptionScalarWhereInput | PushSubscriptionScalarWhereInput[]
    id?: StringFilter<"PushSubscription"> | string
    userId?: StringFilter<"PushSubscription"> | string
    endpoint?: StringFilter<"PushSubscription"> | string
    p256dhKey?: StringFilter<"PushSubscription"> | string
    authKey?: StringFilter<"PushSubscription"> | string
    createdAt?: DateTimeFilter<"PushSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"PushSubscription"> | Date | string
  }

  export type ShoppingListUpsertWithWhereUniqueWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    update: XOR<ShoppingListUpdateWithoutUserInput, ShoppingListUncheckedUpdateWithoutUserInput>
    create: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput>
  }

  export type ShoppingListUpdateWithWhereUniqueWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    data: XOR<ShoppingListUpdateWithoutUserInput, ShoppingListUncheckedUpdateWithoutUserInput>
  }

  export type ShoppingListUpdateManyWithWhereWithoutUserInput = {
    where: ShoppingListScalarWhereInput
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyWithoutUserInput>
  }

  export type ShoppingListScalarWhereInput = {
    AND?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
    OR?: ShoppingListScalarWhereInput[]
    NOT?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
    id?: StringFilter<"ShoppingList"> | string
    name?: StringFilter<"ShoppingList"> | string
    total?: FloatFilter<"ShoppingList"> | number
    isArchived?: BoolFilter<"ShoppingList"> | boolean
    userId?: StringFilter<"ShoppingList"> | string
    createdAt?: DateTimeFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingList"> | Date | string
  }

  export type TomaUpsertWithWhereUniqueWithoutRegistranteInput = {
    where: TomaWhereUniqueInput
    update: XOR<TomaUpdateWithoutRegistranteInput, TomaUncheckedUpdateWithoutRegistranteInput>
    create: XOR<TomaCreateWithoutRegistranteInput, TomaUncheckedCreateWithoutRegistranteInput>
  }

  export type TomaUpdateWithWhereUniqueWithoutRegistranteInput = {
    where: TomaWhereUniqueInput
    data: XOR<TomaUpdateWithoutRegistranteInput, TomaUncheckedUpdateWithoutRegistranteInput>
  }

  export type TomaUpdateManyWithWhereWithoutRegistranteInput = {
    where: TomaScalarWhereInput
    data: XOR<TomaUpdateManyMutationInput, TomaUncheckedUpdateManyWithoutRegistranteInput>
  }

  export type TomaScalarWhereInput = {
    AND?: TomaScalarWhereInput | TomaScalarWhereInput[]
    OR?: TomaScalarWhereInput[]
    NOT?: TomaScalarWhereInput | TomaScalarWhereInput[]
    id?: StringFilter<"Toma"> | string
    medicamentoId?: StringFilter<"Toma"> | string
    consumidorUsuarioId?: StringNullableFilter<"Toma"> | string | null
    consumidorPerfilId?: StringNullableFilter<"Toma"> | string | null
    registranteId?: StringFilter<"Toma"> | string
    fechaHora?: DateTimeFilter<"Toma"> | Date | string
    grupoId?: StringFilter<"Toma"> | string
    createdAt?: DateTimeFilter<"Toma"> | Date | string
    updatedAt?: DateTimeFilter<"Toma"> | Date | string
  }

  export type TomaUpsertWithWhereUniqueWithoutConsumidorUsuarioInput = {
    where: TomaWhereUniqueInput
    update: XOR<TomaUpdateWithoutConsumidorUsuarioInput, TomaUncheckedUpdateWithoutConsumidorUsuarioInput>
    create: XOR<TomaCreateWithoutConsumidorUsuarioInput, TomaUncheckedCreateWithoutConsumidorUsuarioInput>
  }

  export type TomaUpdateWithWhereUniqueWithoutConsumidorUsuarioInput = {
    where: TomaWhereUniqueInput
    data: XOR<TomaUpdateWithoutConsumidorUsuarioInput, TomaUncheckedUpdateWithoutConsumidorUsuarioInput>
  }

  export type TomaUpdateManyWithWhereWithoutConsumidorUsuarioInput = {
    where: TomaScalarWhereInput
    data: XOR<TomaUpdateManyMutationInput, TomaUncheckedUpdateManyWithoutConsumidorUsuarioInput>
  }

  export type GrupoFamiliarUpsertWithWhereUniqueWithoutCreadorInput = {
    where: GrupoFamiliarWhereUniqueInput
    update: XOR<GrupoFamiliarUpdateWithoutCreadorInput, GrupoFamiliarUncheckedUpdateWithoutCreadorInput>
    create: XOR<GrupoFamiliarCreateWithoutCreadorInput, GrupoFamiliarUncheckedCreateWithoutCreadorInput>
  }

  export type GrupoFamiliarUpdateWithWhereUniqueWithoutCreadorInput = {
    where: GrupoFamiliarWhereUniqueInput
    data: XOR<GrupoFamiliarUpdateWithoutCreadorInput, GrupoFamiliarUncheckedUpdateWithoutCreadorInput>
  }

  export type GrupoFamiliarUpdateManyWithWhereWithoutCreadorInput = {
    where: GrupoFamiliarScalarWhereInput
    data: XOR<GrupoFamiliarUpdateManyMutationInput, GrupoFamiliarUncheckedUpdateManyWithoutCreadorInput>
  }

  export type GrupoFamiliarScalarWhereInput = {
    AND?: GrupoFamiliarScalarWhereInput | GrupoFamiliarScalarWhereInput[]
    OR?: GrupoFamiliarScalarWhereInput[]
    NOT?: GrupoFamiliarScalarWhereInput | GrupoFamiliarScalarWhereInput[]
    id?: StringFilter<"GrupoFamiliar"> | string
    nombre?: StringFilter<"GrupoFamiliar"> | string
    creadorId?: StringFilter<"GrupoFamiliar"> | string
    createdAt?: DateTimeFilter<"GrupoFamiliar"> | Date | string
    updatedAt?: DateTimeFilter<"GrupoFamiliar"> | Date | string
  }

  export type HistorialUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: HistorialWhereUniqueInput
    update: XOR<HistorialUpdateWithoutUsuarioInput, HistorialUncheckedUpdateWithoutUsuarioInput>
    create: XOR<HistorialCreateWithoutUsuarioInput, HistorialUncheckedCreateWithoutUsuarioInput>
  }

  export type HistorialUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: HistorialWhereUniqueInput
    data: XOR<HistorialUpdateWithoutUsuarioInput, HistorialUncheckedUpdateWithoutUsuarioInput>
  }

  export type HistorialUpdateManyWithWhereWithoutUsuarioInput = {
    where: HistorialScalarWhereInput
    data: XOR<HistorialUpdateManyMutationInput, HistorialUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type HistorialScalarWhereInput = {
    AND?: HistorialScalarWhereInput | HistorialScalarWhereInput[]
    OR?: HistorialScalarWhereInput[]
    NOT?: HistorialScalarWhereInput | HistorialScalarWhereInput[]
    id?: StringFilter<"Historial"> | string
    usuarioId?: StringFilter<"Historial"> | string
    tipoAccion?: StringFilter<"Historial"> | string
    entidadTipo?: StringFilter<"Historial"> | string
    entidadId?: StringNullableFilter<"Historial"> | string | null
    datosPrevios?: StringNullableFilter<"Historial"> | string | null
    datosPosteriores?: StringNullableFilter<"Historial"> | string | null
    metadata?: StringNullableFilter<"Historial"> | string | null
    createdAt?: DateTimeFilter<"Historial"> | Date | string
  }

  export type UserCreateWithoutMedicationsInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutMedicationsInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutMedicationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
  }

  export type TreatmentMedicationCreateWithoutMedicationInput = {
    id?: string
    frequencyHours: number
    durationDays: number
    dosage: string
    startDate: Date | string
    endDate: Date | string
    startAtSpecificTime?: boolean
    specificStartTime?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    treatment: TreatmentCreateNestedOneWithoutMedicationsInput
  }

  export type TreatmentMedicationUncheckedCreateWithoutMedicationInput = {
    id?: string
    treatmentId: string
    frequencyHours: number
    durationDays: number
    dosage: string
    startDate: Date | string
    endDate: Date | string
    startAtSpecificTime?: boolean
    specificStartTime?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentMedicationCreateOrConnectWithoutMedicationInput = {
    where: TreatmentMedicationWhereUniqueInput
    create: XOR<TreatmentMedicationCreateWithoutMedicationInput, TreatmentMedicationUncheckedCreateWithoutMedicationInput>
  }

  export type TreatmentMedicationCreateManyMedicationInputEnvelope = {
    data: TreatmentMedicationCreateManyMedicationInput | TreatmentMedicationCreateManyMedicationInput[]
  }

  export type TomaCreateWithoutMedicamentoInput = {
    id?: string
    fechaHora?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    consumidorUsuario?: UserCreateNestedOneWithoutTomasConsumidasInput
    consumidorPerfil?: PerfilMenorCreateNestedOneWithoutTomasInput
    registrante: UserCreateNestedOneWithoutTomasRegistradasInput
    grupo: GrupoFamiliarCreateNestedOneWithoutTomasInput
  }

  export type TomaUncheckedCreateWithoutMedicamentoInput = {
    id?: string
    consumidorUsuarioId?: string | null
    consumidorPerfilId?: string | null
    registranteId: string
    fechaHora?: Date | string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaCreateOrConnectWithoutMedicamentoInput = {
    where: TomaWhereUniqueInput
    create: XOR<TomaCreateWithoutMedicamentoInput, TomaUncheckedCreateWithoutMedicamentoInput>
  }

  export type TomaCreateManyMedicamentoInputEnvelope = {
    data: TomaCreateManyMedicamentoInput | TomaCreateManyMedicamentoInput[]
  }

  export type UserUpsertWithoutMedicationsInput = {
    update: XOR<UserUpdateWithoutMedicationsInput, UserUncheckedUpdateWithoutMedicationsInput>
    create: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMedicationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMedicationsInput, UserUncheckedUpdateWithoutMedicationsInput>
  }

  export type UserUpdateWithoutMedicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutMedicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type TreatmentMedicationUpsertWithWhereUniqueWithoutMedicationInput = {
    where: TreatmentMedicationWhereUniqueInput
    update: XOR<TreatmentMedicationUpdateWithoutMedicationInput, TreatmentMedicationUncheckedUpdateWithoutMedicationInput>
    create: XOR<TreatmentMedicationCreateWithoutMedicationInput, TreatmentMedicationUncheckedCreateWithoutMedicationInput>
  }

  export type TreatmentMedicationUpdateWithWhereUniqueWithoutMedicationInput = {
    where: TreatmentMedicationWhereUniqueInput
    data: XOR<TreatmentMedicationUpdateWithoutMedicationInput, TreatmentMedicationUncheckedUpdateWithoutMedicationInput>
  }

  export type TreatmentMedicationUpdateManyWithWhereWithoutMedicationInput = {
    where: TreatmentMedicationScalarWhereInput
    data: XOR<TreatmentMedicationUpdateManyMutationInput, TreatmentMedicationUncheckedUpdateManyWithoutMedicationInput>
  }

  export type TreatmentMedicationScalarWhereInput = {
    AND?: TreatmentMedicationScalarWhereInput | TreatmentMedicationScalarWhereInput[]
    OR?: TreatmentMedicationScalarWhereInput[]
    NOT?: TreatmentMedicationScalarWhereInput | TreatmentMedicationScalarWhereInput[]
    id?: StringFilter<"TreatmentMedication"> | string
    treatmentId?: StringFilter<"TreatmentMedication"> | string
    medicationId?: StringFilter<"TreatmentMedication"> | string
    frequencyHours?: IntFilter<"TreatmentMedication"> | number
    durationDays?: IntFilter<"TreatmentMedication"> | number
    dosage?: StringFilter<"TreatmentMedication"> | string
    startDate?: DateTimeFilter<"TreatmentMedication"> | Date | string
    endDate?: DateTimeFilter<"TreatmentMedication"> | Date | string
    startAtSpecificTime?: BoolFilter<"TreatmentMedication"> | boolean
    specificStartTime?: DateTimeNullableFilter<"TreatmentMedication"> | Date | string | null
    isActive?: BoolFilter<"TreatmentMedication"> | boolean
    createdAt?: DateTimeFilter<"TreatmentMedication"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentMedication"> | Date | string
  }

  export type TomaUpsertWithWhereUniqueWithoutMedicamentoInput = {
    where: TomaWhereUniqueInput
    update: XOR<TomaUpdateWithoutMedicamentoInput, TomaUncheckedUpdateWithoutMedicamentoInput>
    create: XOR<TomaCreateWithoutMedicamentoInput, TomaUncheckedCreateWithoutMedicamentoInput>
  }

  export type TomaUpdateWithWhereUniqueWithoutMedicamentoInput = {
    where: TomaWhereUniqueInput
    data: XOR<TomaUpdateWithoutMedicamentoInput, TomaUncheckedUpdateWithoutMedicamentoInput>
  }

  export type TomaUpdateManyWithWhereWithoutMedicamentoInput = {
    where: TomaScalarWhereInput
    data: XOR<TomaUpdateManyMutationInput, TomaUncheckedUpdateManyWithoutMedicamentoInput>
  }

  export type UserCreateWithoutNotificationSettingsInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    medications?: MedicationCreateNestedManyWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutNotificationSettingsInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutNotificationSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationSettingsInput, UserUncheckedCreateWithoutNotificationSettingsInput>
  }

  export type UserUpsertWithoutNotificationSettingsInput = {
    update: XOR<UserUpdateWithoutNotificationSettingsInput, UserUncheckedUpdateWithoutNotificationSettingsInput>
    create: XOR<UserCreateWithoutNotificationSettingsInput, UserUncheckedCreateWithoutNotificationSettingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationSettingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationSettingsInput, UserUncheckedUpdateWithoutNotificationSettingsInput>
  }

  export type UserUpdateWithoutNotificationSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    medications?: MedicationUpdateManyWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UserCreateWithoutTreatmentsInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    medications?: MedicationCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutTreatmentsInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutTreatmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTreatmentsInput, UserUncheckedCreateWithoutTreatmentsInput>
  }

  export type NotificationCreateWithoutTreatmentInput = {
    id?: string
    scheduledDate: Date | string
    sent?: boolean
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutTreatmentInput = {
    id?: string
    scheduledDate: Date | string
    sent?: boolean
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutTreatmentInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutTreatmentInput, NotificationUncheckedCreateWithoutTreatmentInput>
  }

  export type NotificationCreateManyTreatmentInputEnvelope = {
    data: NotificationCreateManyTreatmentInput | NotificationCreateManyTreatmentInput[]
  }

  export type TreatmentMedicationCreateWithoutTreatmentInput = {
    id?: string
    frequencyHours: number
    durationDays: number
    dosage: string
    startDate: Date | string
    endDate: Date | string
    startAtSpecificTime?: boolean
    specificStartTime?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    medication: MedicationCreateNestedOneWithoutTreatmentMedicationsInput
  }

  export type TreatmentMedicationUncheckedCreateWithoutTreatmentInput = {
    id?: string
    medicationId: string
    frequencyHours: number
    durationDays: number
    dosage: string
    startDate: Date | string
    endDate: Date | string
    startAtSpecificTime?: boolean
    specificStartTime?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentMedicationCreateOrConnectWithoutTreatmentInput = {
    where: TreatmentMedicationWhereUniqueInput
    create: XOR<TreatmentMedicationCreateWithoutTreatmentInput, TreatmentMedicationUncheckedCreateWithoutTreatmentInput>
  }

  export type TreatmentMedicationCreateManyTreatmentInputEnvelope = {
    data: TreatmentMedicationCreateManyTreatmentInput | TreatmentMedicationCreateManyTreatmentInput[]
  }

  export type TreatmentImageCreateWithoutTreatmentInput = {
    id?: string
    imageUrl: string
    imageType: string
    extractedText?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentImageUncheckedCreateWithoutTreatmentInput = {
    id?: string
    imageUrl: string
    imageType: string
    extractedText?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentImageCreateOrConnectWithoutTreatmentInput = {
    where: TreatmentImageWhereUniqueInput
    create: XOR<TreatmentImageCreateWithoutTreatmentInput, TreatmentImageUncheckedCreateWithoutTreatmentInput>
  }

  export type TreatmentImageCreateManyTreatmentInputEnvelope = {
    data: TreatmentImageCreateManyTreatmentInput | TreatmentImageCreateManyTreatmentInput[]
  }

  export type UserUpsertWithoutTreatmentsInput = {
    update: XOR<UserUpdateWithoutTreatmentsInput, UserUncheckedUpdateWithoutTreatmentsInput>
    create: XOR<UserCreateWithoutTreatmentsInput, UserUncheckedCreateWithoutTreatmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTreatmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTreatmentsInput, UserUncheckedUpdateWithoutTreatmentsInput>
  }

  export type UserUpdateWithoutTreatmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    medications?: MedicationUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutTreatmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type NotificationUpsertWithWhereUniqueWithoutTreatmentInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutTreatmentInput, NotificationUncheckedUpdateWithoutTreatmentInput>
    create: XOR<NotificationCreateWithoutTreatmentInput, NotificationUncheckedCreateWithoutTreatmentInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutTreatmentInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutTreatmentInput, NotificationUncheckedUpdateWithoutTreatmentInput>
  }

  export type NotificationUpdateManyWithWhereWithoutTreatmentInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutTreatmentInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    treatmentId?: StringFilter<"Notification"> | string
    scheduledDate?: DateTimeFilter<"Notification"> | Date | string
    sent?: BoolFilter<"Notification"> | boolean
    type?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type TreatmentMedicationUpsertWithWhereUniqueWithoutTreatmentInput = {
    where: TreatmentMedicationWhereUniqueInput
    update: XOR<TreatmentMedicationUpdateWithoutTreatmentInput, TreatmentMedicationUncheckedUpdateWithoutTreatmentInput>
    create: XOR<TreatmentMedicationCreateWithoutTreatmentInput, TreatmentMedicationUncheckedCreateWithoutTreatmentInput>
  }

  export type TreatmentMedicationUpdateWithWhereUniqueWithoutTreatmentInput = {
    where: TreatmentMedicationWhereUniqueInput
    data: XOR<TreatmentMedicationUpdateWithoutTreatmentInput, TreatmentMedicationUncheckedUpdateWithoutTreatmentInput>
  }

  export type TreatmentMedicationUpdateManyWithWhereWithoutTreatmentInput = {
    where: TreatmentMedicationScalarWhereInput
    data: XOR<TreatmentMedicationUpdateManyMutationInput, TreatmentMedicationUncheckedUpdateManyWithoutTreatmentInput>
  }

  export type TreatmentImageUpsertWithWhereUniqueWithoutTreatmentInput = {
    where: TreatmentImageWhereUniqueInput
    update: XOR<TreatmentImageUpdateWithoutTreatmentInput, TreatmentImageUncheckedUpdateWithoutTreatmentInput>
    create: XOR<TreatmentImageCreateWithoutTreatmentInput, TreatmentImageUncheckedCreateWithoutTreatmentInput>
  }

  export type TreatmentImageUpdateWithWhereUniqueWithoutTreatmentInput = {
    where: TreatmentImageWhereUniqueInput
    data: XOR<TreatmentImageUpdateWithoutTreatmentInput, TreatmentImageUncheckedUpdateWithoutTreatmentInput>
  }

  export type TreatmentImageUpdateManyWithWhereWithoutTreatmentInput = {
    where: TreatmentImageScalarWhereInput
    data: XOR<TreatmentImageUpdateManyMutationInput, TreatmentImageUncheckedUpdateManyWithoutTreatmentInput>
  }

  export type TreatmentImageScalarWhereInput = {
    AND?: TreatmentImageScalarWhereInput | TreatmentImageScalarWhereInput[]
    OR?: TreatmentImageScalarWhereInput[]
    NOT?: TreatmentImageScalarWhereInput | TreatmentImageScalarWhereInput[]
    id?: StringFilter<"TreatmentImage"> | string
    treatmentId?: StringFilter<"TreatmentImage"> | string
    imageUrl?: StringFilter<"TreatmentImage"> | string
    imageType?: StringFilter<"TreatmentImage"> | string
    extractedText?: StringNullableFilter<"TreatmentImage"> | string | null
    aiAnalysis?: StringNullableFilter<"TreatmentImage"> | string | null
    createdAt?: DateTimeFilter<"TreatmentImage"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentImage"> | Date | string
  }

  export type TreatmentCreateWithoutMedicationsInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTreatmentsInput
    notifications?: NotificationCreateNestedManyWithoutTreatmentInput
    images?: TreatmentImageCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateWithoutMedicationsInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutTreatmentInput
    images?: TreatmentImageUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutMedicationsInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutMedicationsInput, TreatmentUncheckedCreateWithoutMedicationsInput>
  }

  export type MedicationCreateWithoutTreatmentMedicationsInput = {
    id?: string
    commercialName: string
    activeIngredient?: string | null
    description?: string | null
    intakeRecommendations?: string | null
    imageUrl?: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date | string
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMedicationsInput
    tomas?: TomaCreateNestedManyWithoutMedicamentoInput
  }

  export type MedicationUncheckedCreateWithoutTreatmentMedicationsInput = {
    id?: string
    commercialName: string
    activeIngredient?: string | null
    description?: string | null
    intakeRecommendations?: string | null
    imageUrl?: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date | string
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    tomas?: TomaUncheckedCreateNestedManyWithoutMedicamentoInput
  }

  export type MedicationCreateOrConnectWithoutTreatmentMedicationsInput = {
    where: MedicationWhereUniqueInput
    create: XOR<MedicationCreateWithoutTreatmentMedicationsInput, MedicationUncheckedCreateWithoutTreatmentMedicationsInput>
  }

  export type TreatmentUpsertWithoutMedicationsInput = {
    update: XOR<TreatmentUpdateWithoutMedicationsInput, TreatmentUncheckedUpdateWithoutMedicationsInput>
    create: XOR<TreatmentCreateWithoutMedicationsInput, TreatmentUncheckedCreateWithoutMedicationsInput>
    where?: TreatmentWhereInput
  }

  export type TreatmentUpdateToOneWithWhereWithoutMedicationsInput = {
    where?: TreatmentWhereInput
    data: XOR<TreatmentUpdateWithoutMedicationsInput, TreatmentUncheckedUpdateWithoutMedicationsInput>
  }

  export type TreatmentUpdateWithoutMedicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTreatmentsNestedInput
    notifications?: NotificationUpdateManyWithoutTreatmentNestedInput
    images?: TreatmentImageUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutMedicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutTreatmentNestedInput
    images?: TreatmentImageUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type MedicationUpsertWithoutTreatmentMedicationsInput = {
    update: XOR<MedicationUpdateWithoutTreatmentMedicationsInput, MedicationUncheckedUpdateWithoutTreatmentMedicationsInput>
    create: XOR<MedicationCreateWithoutTreatmentMedicationsInput, MedicationUncheckedCreateWithoutTreatmentMedicationsInput>
    where?: MedicationWhereInput
  }

  export type MedicationUpdateToOneWithWhereWithoutTreatmentMedicationsInput = {
    where?: MedicationWhereInput
    data: XOR<MedicationUpdateWithoutTreatmentMedicationsInput, MedicationUncheckedUpdateWithoutTreatmentMedicationsInput>
  }

  export type MedicationUpdateWithoutTreatmentMedicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMedicationsNestedInput
    tomas?: TomaUpdateManyWithoutMedicamentoNestedInput
  }

  export type MedicationUncheckedUpdateWithoutTreatmentMedicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    tomas?: TomaUncheckedUpdateManyWithoutMedicamentoNestedInput
  }

  export type TreatmentCreateWithoutImagesInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTreatmentsInput
    notifications?: NotificationCreateNestedManyWithoutTreatmentInput
    medications?: TreatmentMedicationCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateWithoutImagesInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutTreatmentInput
    medications?: TreatmentMedicationUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutImagesInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutImagesInput, TreatmentUncheckedCreateWithoutImagesInput>
  }

  export type TreatmentUpsertWithoutImagesInput = {
    update: XOR<TreatmentUpdateWithoutImagesInput, TreatmentUncheckedUpdateWithoutImagesInput>
    create: XOR<TreatmentCreateWithoutImagesInput, TreatmentUncheckedCreateWithoutImagesInput>
    where?: TreatmentWhereInput
  }

  export type TreatmentUpdateToOneWithWhereWithoutImagesInput = {
    where?: TreatmentWhereInput
    data: XOR<TreatmentUpdateWithoutImagesInput, TreatmentUncheckedUpdateWithoutImagesInput>
  }

  export type TreatmentUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTreatmentsNestedInput
    notifications?: NotificationUpdateManyWithoutTreatmentNestedInput
    medications?: TreatmentMedicationUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutTreatmentNestedInput
    medications?: TreatmentMedicationUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentCreateWithoutNotificationsInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTreatmentsInput
    medications?: TreatmentMedicationCreateNestedManyWithoutTreatmentInput
    images?: TreatmentImageCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: TreatmentMedicationUncheckedCreateNestedManyWithoutTreatmentInput
    images?: TreatmentImageUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutNotificationsInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutNotificationsInput, TreatmentUncheckedCreateWithoutNotificationsInput>
  }

  export type TreatmentUpsertWithoutNotificationsInput = {
    update: XOR<TreatmentUpdateWithoutNotificationsInput, TreatmentUncheckedUpdateWithoutNotificationsInput>
    create: XOR<TreatmentCreateWithoutNotificationsInput, TreatmentUncheckedCreateWithoutNotificationsInput>
    where?: TreatmentWhereInput
  }

  export type TreatmentUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: TreatmentWhereInput
    data: XOR<TreatmentUpdateWithoutNotificationsInput, TreatmentUncheckedUpdateWithoutNotificationsInput>
  }

  export type TreatmentUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTreatmentsNestedInput
    medications?: TreatmentMedicationUpdateManyWithoutTreatmentNestedInput
    images?: TreatmentImageUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: TreatmentMedicationUncheckedUpdateManyWithoutTreatmentNestedInput
    images?: TreatmentImageUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type UserCreateWithoutNotificationPreferencesInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    medications?: MedicationCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutNotificationPreferencesInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutNotificationPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
  }

  export type UserUpsertWithoutNotificationPreferencesInput = {
    update: XOR<UserUpdateWithoutNotificationPreferencesInput, UserUncheckedUpdateWithoutNotificationPreferencesInput>
    create: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationPreferencesInput, UserUncheckedUpdateWithoutNotificationPreferencesInput>
  }

  export type UserUpdateWithoutNotificationPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    medications?: MedicationUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UserCreateWithoutPushSubscriptionsInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    medications?: MedicationCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutPushSubscriptionsInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutPushSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPushSubscriptionsInput, UserUncheckedCreateWithoutPushSubscriptionsInput>
  }

  export type UserUpsertWithoutPushSubscriptionsInput = {
    update: XOR<UserUpdateWithoutPushSubscriptionsInput, UserUncheckedUpdateWithoutPushSubscriptionsInput>
    create: XOR<UserCreateWithoutPushSubscriptionsInput, UserUncheckedCreateWithoutPushSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPushSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPushSubscriptionsInput, UserUncheckedUpdateWithoutPushSubscriptionsInput>
  }

  export type UserUpdateWithoutPushSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    medications?: MedicationUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutPushSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ShoppingListCreateWithoutItemsInput = {
    id?: string
    name: string
    total: number
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutShoppingListsInput
  }

  export type ShoppingListUncheckedCreateWithoutItemsInput = {
    id?: string
    name: string
    total: number
    isArchived?: boolean
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingListCreateOrConnectWithoutItemsInput = {
    where: ShoppingListWhereUniqueInput
    create: XOR<ShoppingListCreateWithoutItemsInput, ShoppingListUncheckedCreateWithoutItemsInput>
  }

  export type ShoppingListUpsertWithoutItemsInput = {
    update: XOR<ShoppingListUpdateWithoutItemsInput, ShoppingListUncheckedUpdateWithoutItemsInput>
    create: XOR<ShoppingListCreateWithoutItemsInput, ShoppingListUncheckedCreateWithoutItemsInput>
    where?: ShoppingListWhereInput
  }

  export type ShoppingListUpdateToOneWithWhereWithoutItemsInput = {
    where?: ShoppingListWhereInput
    data: XOR<ShoppingListUpdateWithoutItemsInput, ShoppingListUncheckedUpdateWithoutItemsInput>
  }

  export type ShoppingListUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShoppingListsNestedInput
  }

  export type ShoppingListUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemCreateWithoutShoppingListInput = {
    id?: string
    name: string
    presentation?: string | null
    laboratory?: string | null
    price: number
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemUncheckedCreateWithoutShoppingListInput = {
    id?: string
    name: string
    presentation?: string | null
    laboratory?: string | null
    price: number
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemCreateOrConnectWithoutShoppingListInput = {
    where: ShoppingItemWhereUniqueInput
    create: XOR<ShoppingItemCreateWithoutShoppingListInput, ShoppingItemUncheckedCreateWithoutShoppingListInput>
  }

  export type ShoppingItemCreateManyShoppingListInputEnvelope = {
    data: ShoppingItemCreateManyShoppingListInput | ShoppingItemCreateManyShoppingListInput[]
  }

  export type UserCreateWithoutShoppingListsInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    medications?: MedicationCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutShoppingListsInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutShoppingListsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
  }

  export type ShoppingItemUpsertWithWhereUniqueWithoutShoppingListInput = {
    where: ShoppingItemWhereUniqueInput
    update: XOR<ShoppingItemUpdateWithoutShoppingListInput, ShoppingItemUncheckedUpdateWithoutShoppingListInput>
    create: XOR<ShoppingItemCreateWithoutShoppingListInput, ShoppingItemUncheckedCreateWithoutShoppingListInput>
  }

  export type ShoppingItemUpdateWithWhereUniqueWithoutShoppingListInput = {
    where: ShoppingItemWhereUniqueInput
    data: XOR<ShoppingItemUpdateWithoutShoppingListInput, ShoppingItemUncheckedUpdateWithoutShoppingListInput>
  }

  export type ShoppingItemUpdateManyWithWhereWithoutShoppingListInput = {
    where: ShoppingItemScalarWhereInput
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyWithoutShoppingListInput>
  }

  export type ShoppingItemScalarWhereInput = {
    AND?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
    OR?: ShoppingItemScalarWhereInput[]
    NOT?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
    id?: StringFilter<"ShoppingItem"> | string
    name?: StringFilter<"ShoppingItem"> | string
    presentation?: StringNullableFilter<"ShoppingItem"> | string | null
    laboratory?: StringNullableFilter<"ShoppingItem"> | string | null
    price?: FloatFilter<"ShoppingItem"> | number
    quantity?: IntFilter<"ShoppingItem"> | number
    shoppingListId?: StringFilter<"ShoppingItem"> | string
    createdAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingItem"> | Date | string
  }

  export type UserUpsertWithoutShoppingListsInput = {
    update: XOR<UserUpdateWithoutShoppingListsInput, UserUncheckedUpdateWithoutShoppingListsInput>
    create: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShoppingListsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShoppingListsInput, UserUncheckedUpdateWithoutShoppingListsInput>
  }

  export type UserUpdateWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    medications?: MedicationUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UserCreateWithoutGrupoCreadoInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    medications?: MedicationCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutGrupoCreadoInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutGrupoCreadoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGrupoCreadoInput, UserUncheckedCreateWithoutGrupoCreadoInput>
  }

  export type UserCreateWithoutGrupoInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutGrupoInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutGrupoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGrupoInput, UserUncheckedCreateWithoutGrupoInput>
  }

  export type UserCreateManyGrupoInputEnvelope = {
    data: UserCreateManyGrupoInput | UserCreateManyGrupoInput[]
  }

  export type PerfilMenorCreateWithoutGrupoInput = {
    id?: string
    nombre: string
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tomas?: TomaCreateNestedManyWithoutConsumidorPerfilInput
  }

  export type PerfilMenorUncheckedCreateWithoutGrupoInput = {
    id?: string
    nombre: string
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tomas?: TomaUncheckedCreateNestedManyWithoutConsumidorPerfilInput
  }

  export type PerfilMenorCreateOrConnectWithoutGrupoInput = {
    where: PerfilMenorWhereUniqueInput
    create: XOR<PerfilMenorCreateWithoutGrupoInput, PerfilMenorUncheckedCreateWithoutGrupoInput>
  }

  export type PerfilMenorCreateManyGrupoInputEnvelope = {
    data: PerfilMenorCreateManyGrupoInput | PerfilMenorCreateManyGrupoInput[]
  }

  export type TomaCreateWithoutGrupoInput = {
    id?: string
    fechaHora?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    medicamento: MedicationCreateNestedOneWithoutTomasInput
    consumidorUsuario?: UserCreateNestedOneWithoutTomasConsumidasInput
    consumidorPerfil?: PerfilMenorCreateNestedOneWithoutTomasInput
    registrante: UserCreateNestedOneWithoutTomasRegistradasInput
  }

  export type TomaUncheckedCreateWithoutGrupoInput = {
    id?: string
    medicamentoId: string
    consumidorUsuarioId?: string | null
    consumidorPerfilId?: string | null
    registranteId: string
    fechaHora?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaCreateOrConnectWithoutGrupoInput = {
    where: TomaWhereUniqueInput
    create: XOR<TomaCreateWithoutGrupoInput, TomaUncheckedCreateWithoutGrupoInput>
  }

  export type TomaCreateManyGrupoInputEnvelope = {
    data: TomaCreateManyGrupoInput | TomaCreateManyGrupoInput[]
  }

  export type UserUpsertWithoutGrupoCreadoInput = {
    update: XOR<UserUpdateWithoutGrupoCreadoInput, UserUncheckedUpdateWithoutGrupoCreadoInput>
    create: XOR<UserCreateWithoutGrupoCreadoInput, UserUncheckedCreateWithoutGrupoCreadoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGrupoCreadoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGrupoCreadoInput, UserUncheckedUpdateWithoutGrupoCreadoInput>
  }

  export type UserUpdateWithoutGrupoCreadoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    medications?: MedicationUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutGrupoCreadoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutGrupoInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutGrupoInput, UserUncheckedUpdateWithoutGrupoInput>
    create: XOR<UserCreateWithoutGrupoInput, UserUncheckedCreateWithoutGrupoInput>
  }

  export type UserUpdateWithWhereUniqueWithoutGrupoInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutGrupoInput, UserUncheckedUpdateWithoutGrupoInput>
  }

  export type UserUpdateManyWithWhereWithoutGrupoInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutGrupoInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    dni?: StringFilter<"User"> | string
    fechaNacimiento?: DateTimeFilter<"User"> | Date | string
    foto?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    rol?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    grupoId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type PerfilMenorUpsertWithWhereUniqueWithoutGrupoInput = {
    where: PerfilMenorWhereUniqueInput
    update: XOR<PerfilMenorUpdateWithoutGrupoInput, PerfilMenorUncheckedUpdateWithoutGrupoInput>
    create: XOR<PerfilMenorCreateWithoutGrupoInput, PerfilMenorUncheckedCreateWithoutGrupoInput>
  }

  export type PerfilMenorUpdateWithWhereUniqueWithoutGrupoInput = {
    where: PerfilMenorWhereUniqueInput
    data: XOR<PerfilMenorUpdateWithoutGrupoInput, PerfilMenorUncheckedUpdateWithoutGrupoInput>
  }

  export type PerfilMenorUpdateManyWithWhereWithoutGrupoInput = {
    where: PerfilMenorScalarWhereInput
    data: XOR<PerfilMenorUpdateManyMutationInput, PerfilMenorUncheckedUpdateManyWithoutGrupoInput>
  }

  export type PerfilMenorScalarWhereInput = {
    AND?: PerfilMenorScalarWhereInput | PerfilMenorScalarWhereInput[]
    OR?: PerfilMenorScalarWhereInput[]
    NOT?: PerfilMenorScalarWhereInput | PerfilMenorScalarWhereInput[]
    id?: StringFilter<"PerfilMenor"> | string
    nombre?: StringFilter<"PerfilMenor"> | string
    dni?: StringFilter<"PerfilMenor"> | string
    fechaNacimiento?: DateTimeFilter<"PerfilMenor"> | Date | string
    foto?: StringNullableFilter<"PerfilMenor"> | string | null
    grupoId?: StringFilter<"PerfilMenor"> | string
    createdAt?: DateTimeFilter<"PerfilMenor"> | Date | string
    updatedAt?: DateTimeFilter<"PerfilMenor"> | Date | string
  }

  export type TomaUpsertWithWhereUniqueWithoutGrupoInput = {
    where: TomaWhereUniqueInput
    update: XOR<TomaUpdateWithoutGrupoInput, TomaUncheckedUpdateWithoutGrupoInput>
    create: XOR<TomaCreateWithoutGrupoInput, TomaUncheckedCreateWithoutGrupoInput>
  }

  export type TomaUpdateWithWhereUniqueWithoutGrupoInput = {
    where: TomaWhereUniqueInput
    data: XOR<TomaUpdateWithoutGrupoInput, TomaUncheckedUpdateWithoutGrupoInput>
  }

  export type TomaUpdateManyWithWhereWithoutGrupoInput = {
    where: TomaScalarWhereInput
    data: XOR<TomaUpdateManyMutationInput, TomaUncheckedUpdateManyWithoutGrupoInput>
  }

  export type GrupoFamiliarCreateWithoutPerfilesMenoresInput = {
    id?: string
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creador: UserCreateNestedOneWithoutGrupoCreadoInput
    integrantes?: UserCreateNestedManyWithoutGrupoInput
    tomas?: TomaCreateNestedManyWithoutGrupoInput
  }

  export type GrupoFamiliarUncheckedCreateWithoutPerfilesMenoresInput = {
    id?: string
    nombre: string
    creadorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    integrantes?: UserUncheckedCreateNestedManyWithoutGrupoInput
    tomas?: TomaUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GrupoFamiliarCreateOrConnectWithoutPerfilesMenoresInput = {
    where: GrupoFamiliarWhereUniqueInput
    create: XOR<GrupoFamiliarCreateWithoutPerfilesMenoresInput, GrupoFamiliarUncheckedCreateWithoutPerfilesMenoresInput>
  }

  export type TomaCreateWithoutConsumidorPerfilInput = {
    id?: string
    fechaHora?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    medicamento: MedicationCreateNestedOneWithoutTomasInput
    consumidorUsuario?: UserCreateNestedOneWithoutTomasConsumidasInput
    registrante: UserCreateNestedOneWithoutTomasRegistradasInput
    grupo: GrupoFamiliarCreateNestedOneWithoutTomasInput
  }

  export type TomaUncheckedCreateWithoutConsumidorPerfilInput = {
    id?: string
    medicamentoId: string
    consumidorUsuarioId?: string | null
    registranteId: string
    fechaHora?: Date | string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaCreateOrConnectWithoutConsumidorPerfilInput = {
    where: TomaWhereUniqueInput
    create: XOR<TomaCreateWithoutConsumidorPerfilInput, TomaUncheckedCreateWithoutConsumidorPerfilInput>
  }

  export type TomaCreateManyConsumidorPerfilInputEnvelope = {
    data: TomaCreateManyConsumidorPerfilInput | TomaCreateManyConsumidorPerfilInput[]
  }

  export type GrupoFamiliarUpsertWithoutPerfilesMenoresInput = {
    update: XOR<GrupoFamiliarUpdateWithoutPerfilesMenoresInput, GrupoFamiliarUncheckedUpdateWithoutPerfilesMenoresInput>
    create: XOR<GrupoFamiliarCreateWithoutPerfilesMenoresInput, GrupoFamiliarUncheckedCreateWithoutPerfilesMenoresInput>
    where?: GrupoFamiliarWhereInput
  }

  export type GrupoFamiliarUpdateToOneWithWhereWithoutPerfilesMenoresInput = {
    where?: GrupoFamiliarWhereInput
    data: XOR<GrupoFamiliarUpdateWithoutPerfilesMenoresInput, GrupoFamiliarUncheckedUpdateWithoutPerfilesMenoresInput>
  }

  export type GrupoFamiliarUpdateWithoutPerfilesMenoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creador?: UserUpdateOneRequiredWithoutGrupoCreadoNestedInput
    integrantes?: UserUpdateManyWithoutGrupoNestedInput
    tomas?: TomaUpdateManyWithoutGrupoNestedInput
  }

  export type GrupoFamiliarUncheckedUpdateWithoutPerfilesMenoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    creadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrantes?: UserUncheckedUpdateManyWithoutGrupoNestedInput
    tomas?: TomaUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type TomaUpsertWithWhereUniqueWithoutConsumidorPerfilInput = {
    where: TomaWhereUniqueInput
    update: XOR<TomaUpdateWithoutConsumidorPerfilInput, TomaUncheckedUpdateWithoutConsumidorPerfilInput>
    create: XOR<TomaCreateWithoutConsumidorPerfilInput, TomaUncheckedCreateWithoutConsumidorPerfilInput>
  }

  export type TomaUpdateWithWhereUniqueWithoutConsumidorPerfilInput = {
    where: TomaWhereUniqueInput
    data: XOR<TomaUpdateWithoutConsumidorPerfilInput, TomaUncheckedUpdateWithoutConsumidorPerfilInput>
  }

  export type TomaUpdateManyWithWhereWithoutConsumidorPerfilInput = {
    where: TomaScalarWhereInput
    data: XOR<TomaUpdateManyMutationInput, TomaUncheckedUpdateManyWithoutConsumidorPerfilInput>
  }

  export type MedicationCreateWithoutTomasInput = {
    id?: string
    commercialName: string
    activeIngredient?: string | null
    description?: string | null
    intakeRecommendations?: string | null
    imageUrl?: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date | string
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMedicationsInput
    treatmentMedications?: TreatmentMedicationCreateNestedManyWithoutMedicationInput
  }

  export type MedicationUncheckedCreateWithoutTomasInput = {
    id?: string
    commercialName: string
    activeIngredient?: string | null
    description?: string | null
    intakeRecommendations?: string | null
    imageUrl?: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date | string
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    treatmentMedications?: TreatmentMedicationUncheckedCreateNestedManyWithoutMedicationInput
  }

  export type MedicationCreateOrConnectWithoutTomasInput = {
    where: MedicationWhereUniqueInput
    create: XOR<MedicationCreateWithoutTomasInput, MedicationUncheckedCreateWithoutTomasInput>
  }

  export type UserCreateWithoutTomasConsumidasInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    medications?: MedicationCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutTomasConsumidasInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutTomasConsumidasInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTomasConsumidasInput, UserUncheckedCreateWithoutTomasConsumidasInput>
  }

  export type PerfilMenorCreateWithoutTomasInput = {
    id?: string
    nombre: string
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo: GrupoFamiliarCreateNestedOneWithoutPerfilesMenoresInput
  }

  export type PerfilMenorUncheckedCreateWithoutTomasInput = {
    id?: string
    nombre: string
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerfilMenorCreateOrConnectWithoutTomasInput = {
    where: PerfilMenorWhereUniqueInput
    create: XOR<PerfilMenorCreateWithoutTomasInput, PerfilMenorUncheckedCreateWithoutTomasInput>
  }

  export type UserCreateWithoutTomasRegistradasInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    medications?: MedicationCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
    historial?: HistorialCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutTomasRegistradasInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
    historial?: HistorialUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutTomasRegistradasInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTomasRegistradasInput, UserUncheckedCreateWithoutTomasRegistradasInput>
  }

  export type GrupoFamiliarCreateWithoutTomasInput = {
    id?: string
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creador: UserCreateNestedOneWithoutGrupoCreadoInput
    integrantes?: UserCreateNestedManyWithoutGrupoInput
    perfilesMenores?: PerfilMenorCreateNestedManyWithoutGrupoInput
  }

  export type GrupoFamiliarUncheckedCreateWithoutTomasInput = {
    id?: string
    nombre: string
    creadorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    integrantes?: UserUncheckedCreateNestedManyWithoutGrupoInput
    perfilesMenores?: PerfilMenorUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type GrupoFamiliarCreateOrConnectWithoutTomasInput = {
    where: GrupoFamiliarWhereUniqueInput
    create: XOR<GrupoFamiliarCreateWithoutTomasInput, GrupoFamiliarUncheckedCreateWithoutTomasInput>
  }

  export type MedicationUpsertWithoutTomasInput = {
    update: XOR<MedicationUpdateWithoutTomasInput, MedicationUncheckedUpdateWithoutTomasInput>
    create: XOR<MedicationCreateWithoutTomasInput, MedicationUncheckedCreateWithoutTomasInput>
    where?: MedicationWhereInput
  }

  export type MedicationUpdateToOneWithWhereWithoutTomasInput = {
    where?: MedicationWhereInput
    data: XOR<MedicationUpdateWithoutTomasInput, MedicationUncheckedUpdateWithoutTomasInput>
  }

  export type MedicationUpdateWithoutTomasInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMedicationsNestedInput
    treatmentMedications?: TreatmentMedicationUpdateManyWithoutMedicationNestedInput
  }

  export type MedicationUncheckedUpdateWithoutTomasInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    treatmentMedications?: TreatmentMedicationUncheckedUpdateManyWithoutMedicationNestedInput
  }

  export type UserUpsertWithoutTomasConsumidasInput = {
    update: XOR<UserUpdateWithoutTomasConsumidasInput, UserUncheckedUpdateWithoutTomasConsumidasInput>
    create: XOR<UserCreateWithoutTomasConsumidasInput, UserUncheckedCreateWithoutTomasConsumidasInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTomasConsumidasInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTomasConsumidasInput, UserUncheckedUpdateWithoutTomasConsumidasInput>
  }

  export type UserUpdateWithoutTomasConsumidasInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    medications?: MedicationUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutTomasConsumidasInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type PerfilMenorUpsertWithoutTomasInput = {
    update: XOR<PerfilMenorUpdateWithoutTomasInput, PerfilMenorUncheckedUpdateWithoutTomasInput>
    create: XOR<PerfilMenorCreateWithoutTomasInput, PerfilMenorUncheckedCreateWithoutTomasInput>
    where?: PerfilMenorWhereInput
  }

  export type PerfilMenorUpdateToOneWithWhereWithoutTomasInput = {
    where?: PerfilMenorWhereInput
    data: XOR<PerfilMenorUpdateWithoutTomasInput, PerfilMenorUncheckedUpdateWithoutTomasInput>
  }

  export type PerfilMenorUpdateWithoutTomasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneRequiredWithoutPerfilesMenoresNestedInput
  }

  export type PerfilMenorUncheckedUpdateWithoutTomasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutTomasRegistradasInput = {
    update: XOR<UserUpdateWithoutTomasRegistradasInput, UserUncheckedUpdateWithoutTomasRegistradasInput>
    create: XOR<UserCreateWithoutTomasRegistradasInput, UserUncheckedCreateWithoutTomasRegistradasInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTomasRegistradasInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTomasRegistradasInput, UserUncheckedUpdateWithoutTomasRegistradasInput>
  }

  export type UserUpdateWithoutTomasRegistradasInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    medications?: MedicationUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutTomasRegistradasInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type GrupoFamiliarUpsertWithoutTomasInput = {
    update: XOR<GrupoFamiliarUpdateWithoutTomasInput, GrupoFamiliarUncheckedUpdateWithoutTomasInput>
    create: XOR<GrupoFamiliarCreateWithoutTomasInput, GrupoFamiliarUncheckedCreateWithoutTomasInput>
    where?: GrupoFamiliarWhereInput
  }

  export type GrupoFamiliarUpdateToOneWithWhereWithoutTomasInput = {
    where?: GrupoFamiliarWhereInput
    data: XOR<GrupoFamiliarUpdateWithoutTomasInput, GrupoFamiliarUncheckedUpdateWithoutTomasInput>
  }

  export type GrupoFamiliarUpdateWithoutTomasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creador?: UserUpdateOneRequiredWithoutGrupoCreadoNestedInput
    integrantes?: UserUpdateManyWithoutGrupoNestedInput
    perfilesMenores?: PerfilMenorUpdateManyWithoutGrupoNestedInput
  }

  export type GrupoFamiliarUncheckedUpdateWithoutTomasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    creadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrantes?: UserUncheckedUpdateManyWithoutGrupoNestedInput
    perfilesMenores?: PerfilMenorUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type UserCreateWithoutHistorialInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    grupo?: GrupoFamiliarCreateNestedOneWithoutIntegrantesInput
    medications?: MedicationCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutUserInput
    treatments?: TreatmentCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarCreateNestedManyWithoutCreadorInput
  }

  export type UserUncheckedCreateWithoutHistorialInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    grupoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferencesUncheckedCreateNestedOneWithoutUserInput
    pushSubscriptions?: PushSubscriptionUncheckedCreateNestedManyWithoutUserInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    tomasRegistradas?: TomaUncheckedCreateNestedManyWithoutRegistranteInput
    tomasConsumidas?: TomaUncheckedCreateNestedManyWithoutConsumidorUsuarioInput
    grupoCreado?: GrupoFamiliarUncheckedCreateNestedManyWithoutCreadorInput
  }

  export type UserCreateOrConnectWithoutHistorialInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHistorialInput, UserUncheckedCreateWithoutHistorialInput>
  }

  export type UserUpsertWithoutHistorialInput = {
    update: XOR<UserUpdateWithoutHistorialInput, UserUncheckedUpdateWithoutHistorialInput>
    create: XOR<UserCreateWithoutHistorialInput, UserUncheckedCreateWithoutHistorialInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHistorialInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHistorialInput, UserUncheckedUpdateWithoutHistorialInput>
  }

  export type UserUpdateWithoutHistorialInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grupo?: GrupoFamiliarUpdateOneWithoutIntegrantesNestedInput
    medications?: MedicationUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
  }

  export type UserUncheckedUpdateWithoutHistorialInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    grupoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
  }

  export type MedicationCreateManyUserInput = {
    id?: string
    commercialName: string
    activeIngredient?: string | null
    description?: string | null
    intakeRecommendations?: string | null
    imageUrl?: string | null
    initialQuantity: number
    currentQuantity: number
    unit: string
    expirationDate: Date | string
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentCreateManyUserInput = {
    id?: string
    name: string
    patient: string
    patientId?: string | null
    patientType?: string | null
    symptoms?: string | null
    startDate?: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushSubscriptionCreateManyUserInput = {
    id?: string
    endpoint: string
    p256dhKey: string
    authKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingListCreateManyUserInput = {
    id?: string
    name: string
    total: number
    isArchived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaCreateManyRegistranteInput = {
    id?: string
    medicamentoId: string
    consumidorUsuarioId?: string | null
    consumidorPerfilId?: string | null
    fechaHora?: Date | string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaCreateManyConsumidorUsuarioInput = {
    id?: string
    medicamentoId: string
    consumidorPerfilId?: string | null
    registranteId: string
    fechaHora?: Date | string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrupoFamiliarCreateManyCreadorInput = {
    id?: string
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HistorialCreateManyUsuarioInput = {
    id?: string
    tipoAccion: string
    entidadTipo: string
    entidadId?: string | null
    datosPrevios?: string | null
    datosPosteriores?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type MedicationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatmentMedications?: TreatmentMedicationUpdateManyWithoutMedicationNestedInput
    tomas?: TomaUpdateManyWithoutMedicamentoNestedInput
  }

  export type MedicationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatmentMedications?: TreatmentMedicationUncheckedUpdateManyWithoutMedicationNestedInput
    tomas?: TomaUncheckedUpdateManyWithoutMedicamentoNestedInput
  }

  export type MedicationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    commercialName?: StringFieldUpdateOperationsInput | string
    activeIngredient?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    intakeRecommendations?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    initialQuantity?: FloatFieldUpdateOperationsInput | number
    currentQuantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutTreatmentNestedInput
    medications?: TreatmentMedicationUpdateManyWithoutTreatmentNestedInput
    images?: TreatmentImageUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutTreatmentNestedInput
    medications?: TreatmentMedicationUncheckedUpdateManyWithoutTreatmentNestedInput
    images?: TreatmentImageUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    patient?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: NullableStringFieldUpdateOperationsInput | string | null
    symptoms?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dhKey?: StringFieldUpdateOperationsInput | string
    authKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dhKey?: StringFieldUpdateOperationsInput | string
    authKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    p256dhKey?: StringFieldUpdateOperationsInput | string
    authKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ShoppingItemUpdateManyWithoutShoppingListNestedInput
  }

  export type ShoppingListUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ShoppingItemUncheckedUpdateManyWithoutShoppingListNestedInput
  }

  export type ShoppingListUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaUpdateWithoutRegistranteInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicamento?: MedicationUpdateOneRequiredWithoutTomasNestedInput
    consumidorUsuario?: UserUpdateOneWithoutTomasConsumidasNestedInput
    consumidorPerfil?: PerfilMenorUpdateOneWithoutTomasNestedInput
    grupo?: GrupoFamiliarUpdateOneRequiredWithoutTomasNestedInput
  }

  export type TomaUncheckedUpdateWithoutRegistranteInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicamentoId?: StringFieldUpdateOperationsInput | string
    consumidorUsuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    consumidorPerfilId?: NullableStringFieldUpdateOperationsInput | string | null
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaUncheckedUpdateManyWithoutRegistranteInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicamentoId?: StringFieldUpdateOperationsInput | string
    consumidorUsuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    consumidorPerfilId?: NullableStringFieldUpdateOperationsInput | string | null
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaUpdateWithoutConsumidorUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicamento?: MedicationUpdateOneRequiredWithoutTomasNestedInput
    consumidorPerfil?: PerfilMenorUpdateOneWithoutTomasNestedInput
    registrante?: UserUpdateOneRequiredWithoutTomasRegistradasNestedInput
    grupo?: GrupoFamiliarUpdateOneRequiredWithoutTomasNestedInput
  }

  export type TomaUncheckedUpdateWithoutConsumidorUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicamentoId?: StringFieldUpdateOperationsInput | string
    consumidorPerfilId?: NullableStringFieldUpdateOperationsInput | string | null
    registranteId?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaUncheckedUpdateManyWithoutConsumidorUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicamentoId?: StringFieldUpdateOperationsInput | string
    consumidorPerfilId?: NullableStringFieldUpdateOperationsInput | string | null
    registranteId?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrupoFamiliarUpdateWithoutCreadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrantes?: UserUpdateManyWithoutGrupoNestedInput
    perfilesMenores?: PerfilMenorUpdateManyWithoutGrupoNestedInput
    tomas?: TomaUpdateManyWithoutGrupoNestedInput
  }

  export type GrupoFamiliarUncheckedUpdateWithoutCreadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrantes?: UserUncheckedUpdateManyWithoutGrupoNestedInput
    perfilesMenores?: PerfilMenorUncheckedUpdateManyWithoutGrupoNestedInput
    tomas?: TomaUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type GrupoFamiliarUncheckedUpdateManyWithoutCreadorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistorialUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    entidadTipo?: StringFieldUpdateOperationsInput | string
    entidadId?: NullableStringFieldUpdateOperationsInput | string | null
    datosPrevios?: NullableStringFieldUpdateOperationsInput | string | null
    datosPosteriores?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistorialUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    entidadTipo?: StringFieldUpdateOperationsInput | string
    entidadId?: NullableStringFieldUpdateOperationsInput | string | null
    datosPrevios?: NullableStringFieldUpdateOperationsInput | string | null
    datosPosteriores?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistorialUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    entidadTipo?: StringFieldUpdateOperationsInput | string
    entidadId?: NullableStringFieldUpdateOperationsInput | string | null
    datosPrevios?: NullableStringFieldUpdateOperationsInput | string | null
    datosPosteriores?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentMedicationCreateManyMedicationInput = {
    id?: string
    treatmentId: string
    frequencyHours: number
    durationDays: number
    dosage: string
    startDate: Date | string
    endDate: Date | string
    startAtSpecificTime?: boolean
    specificStartTime?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaCreateManyMedicamentoInput = {
    id?: string
    consumidorUsuarioId?: string | null
    consumidorPerfilId?: string | null
    registranteId: string
    fechaHora?: Date | string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentMedicationUpdateWithoutMedicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    frequencyHours?: IntFieldUpdateOperationsInput | number
    durationDays?: IntFieldUpdateOperationsInput | number
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startAtSpecificTime?: BoolFieldUpdateOperationsInput | boolean
    specificStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatment?: TreatmentUpdateOneRequiredWithoutMedicationsNestedInput
  }

  export type TreatmentMedicationUncheckedUpdateWithoutMedicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentId?: StringFieldUpdateOperationsInput | string
    frequencyHours?: IntFieldUpdateOperationsInput | number
    durationDays?: IntFieldUpdateOperationsInput | number
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startAtSpecificTime?: BoolFieldUpdateOperationsInput | boolean
    specificStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentMedicationUncheckedUpdateManyWithoutMedicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentId?: StringFieldUpdateOperationsInput | string
    frequencyHours?: IntFieldUpdateOperationsInput | number
    durationDays?: IntFieldUpdateOperationsInput | number
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startAtSpecificTime?: BoolFieldUpdateOperationsInput | boolean
    specificStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaUpdateWithoutMedicamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumidorUsuario?: UserUpdateOneWithoutTomasConsumidasNestedInput
    consumidorPerfil?: PerfilMenorUpdateOneWithoutTomasNestedInput
    registrante?: UserUpdateOneRequiredWithoutTomasRegistradasNestedInput
    grupo?: GrupoFamiliarUpdateOneRequiredWithoutTomasNestedInput
  }

  export type TomaUncheckedUpdateWithoutMedicamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    consumidorUsuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    consumidorPerfilId?: NullableStringFieldUpdateOperationsInput | string | null
    registranteId?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaUncheckedUpdateManyWithoutMedicamentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    consumidorUsuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    consumidorPerfilId?: NullableStringFieldUpdateOperationsInput | string | null
    registranteId?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyTreatmentInput = {
    id?: string
    scheduledDate: Date | string
    sent?: boolean
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentMedicationCreateManyTreatmentInput = {
    id?: string
    medicationId: string
    frequencyHours: number
    durationDays: number
    dosage: string
    startDate: Date | string
    endDate: Date | string
    startAtSpecificTime?: boolean
    specificStartTime?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentImageCreateManyTreatmentInput = {
    id?: string
    imageUrl: string
    imageType: string
    extractedText?: string | null
    aiAnalysis?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentMedicationUpdateWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    frequencyHours?: IntFieldUpdateOperationsInput | number
    durationDays?: IntFieldUpdateOperationsInput | number
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startAtSpecificTime?: BoolFieldUpdateOperationsInput | boolean
    specificStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medication?: MedicationUpdateOneRequiredWithoutTreatmentMedicationsNestedInput
  }

  export type TreatmentMedicationUncheckedUpdateWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    frequencyHours?: IntFieldUpdateOperationsInput | number
    durationDays?: IntFieldUpdateOperationsInput | number
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startAtSpecificTime?: BoolFieldUpdateOperationsInput | boolean
    specificStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentMedicationUncheckedUpdateManyWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    frequencyHours?: IntFieldUpdateOperationsInput | number
    durationDays?: IntFieldUpdateOperationsInput | number
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startAtSpecificTime?: BoolFieldUpdateOperationsInput | boolean
    specificStartTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentImageUpdateWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageType?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentImageUncheckedUpdateWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageType?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentImageUncheckedUpdateManyWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageType?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    aiAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemCreateManyShoppingListInput = {
    id?: string
    name: string
    presentation?: string | null
    laboratory?: string | null
    price: number
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemUpdateWithoutShoppingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    laboratory?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemUncheckedUpdateWithoutShoppingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    laboratory?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemUncheckedUpdateManyWithoutShoppingListInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    laboratory?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyGrupoInput = {
    id?: string
    email: string
    name?: string | null
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    password: string
    rol?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerfilMenorCreateManyGrupoInput = {
    id?: string
    nombre: string
    dni: string
    fechaNacimiento: Date | string
    foto?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaCreateManyGrupoInput = {
    id?: string
    medicamentoId: string
    consumidorUsuarioId?: string | null
    consumidorPerfilId?: string | null
    registranteId: string
    fechaHora?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    pushSubscriptions?: PushSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    tomasRegistradas?: TomaUncheckedUpdateManyWithoutRegistranteNestedInput
    tomasConsumidas?: TomaUncheckedUpdateManyWithoutConsumidorUsuarioNestedInput
    grupoCreado?: GrupoFamiliarUncheckedUpdateManyWithoutCreadorNestedInput
    historial?: HistorialUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateManyWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerfilMenorUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tomas?: TomaUpdateManyWithoutConsumidorPerfilNestedInput
  }

  export type PerfilMenorUncheckedUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tomas?: TomaUncheckedUpdateManyWithoutConsumidorPerfilNestedInput
  }

  export type PerfilMenorUncheckedUpdateManyWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicamento?: MedicationUpdateOneRequiredWithoutTomasNestedInput
    consumidorUsuario?: UserUpdateOneWithoutTomasConsumidasNestedInput
    consumidorPerfil?: PerfilMenorUpdateOneWithoutTomasNestedInput
    registrante?: UserUpdateOneRequiredWithoutTomasRegistradasNestedInput
  }

  export type TomaUncheckedUpdateWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicamentoId?: StringFieldUpdateOperationsInput | string
    consumidorUsuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    consumidorPerfilId?: NullableStringFieldUpdateOperationsInput | string | null
    registranteId?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaUncheckedUpdateManyWithoutGrupoInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicamentoId?: StringFieldUpdateOperationsInput | string
    consumidorUsuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    consumidorPerfilId?: NullableStringFieldUpdateOperationsInput | string | null
    registranteId?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaCreateManyConsumidorPerfilInput = {
    id?: string
    medicamentoId: string
    consumidorUsuarioId?: string | null
    registranteId: string
    fechaHora?: Date | string
    grupoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TomaUpdateWithoutConsumidorPerfilInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicamento?: MedicationUpdateOneRequiredWithoutTomasNestedInput
    consumidorUsuario?: UserUpdateOneWithoutTomasConsumidasNestedInput
    registrante?: UserUpdateOneRequiredWithoutTomasRegistradasNestedInput
    grupo?: GrupoFamiliarUpdateOneRequiredWithoutTomasNestedInput
  }

  export type TomaUncheckedUpdateWithoutConsumidorPerfilInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicamentoId?: StringFieldUpdateOperationsInput | string
    consumidorUsuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    registranteId?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TomaUncheckedUpdateManyWithoutConsumidorPerfilInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicamentoId?: StringFieldUpdateOperationsInput | string
    consumidorUsuarioId?: NullableStringFieldUpdateOperationsInput | string | null
    registranteId?: StringFieldUpdateOperationsInput | string
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    grupoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}