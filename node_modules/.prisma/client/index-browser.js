
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  dni: 'dni',
  fechaNacimiento: 'fechaNacimiento',
  foto: 'foto',
  password: 'password',
  rol: 'rol',
  grupoId: 'grupoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicationScalarFieldEnum = {
  id: 'id',
  commercialName: 'commercialName',
  activeIngredient: 'activeIngredient',
  description: 'description',
  intakeRecommendations: 'intakeRecommendations',
  imageUrl: 'imageUrl',
  initialQuantity: 'initialQuantity',
  currentQuantity: 'currentQuantity',
  unit: 'unit',
  expirationDate: 'expirationDate',
  archived: 'archived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.NotificationSettingsScalarFieldEnum = {
  id: 'id',
  daysBeforeExpiration: 'daysBeforeExpiration',
  lowStockThreshold: 'lowStockThreshold',
  userId: 'userId'
};

exports.Prisma.TreatmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  patient: 'patient',
  patientId: 'patientId',
  patientType: 'patientType',
  symptoms: 'symptoms',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TreatmentMedicationScalarFieldEnum = {
  id: 'id',
  treatmentId: 'treatmentId',
  medicationId: 'medicationId',
  frequencyHours: 'frequencyHours',
  durationDays: 'durationDays',
  dosage: 'dosage',
  startDate: 'startDate',
  endDate: 'endDate',
  startAtSpecificTime: 'startAtSpecificTime',
  specificStartTime: 'specificStartTime',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TreatmentImageScalarFieldEnum = {
  id: 'id',
  treatmentId: 'treatmentId',
  imageUrl: 'imageUrl',
  imageType: 'imageType',
  extractedText: 'extractedText',
  aiAnalysis: 'aiAnalysis',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  treatmentId: 'treatmentId',
  scheduledDate: 'scheduledDate',
  sent: 'sent',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationPreferencesScalarFieldEnum = {
  id: 'id',
  push: 'push',
  sound: 'sound',
  email: 'email',
  browser: 'browser',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PushSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  endpoint: 'endpoint',
  p256dhKey: 'p256dhKey',
  authKey: 'authKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShoppingItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  presentation: 'presentation',
  laboratory: 'laboratory',
  price: 'price',
  quantity: 'quantity',
  shoppingListId: 'shoppingListId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShoppingListScalarFieldEnum = {
  id: 'id',
  name: 'name',
  total: 'total',
  isArchived: 'isArchived',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GrupoFamiliarScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  creadorId: 'creadorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PerfilMenorScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  dni: 'dni',
  fechaNacimiento: 'fechaNacimiento',
  foto: 'foto',
  grupoId: 'grupoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TomaScalarFieldEnum = {
  id: 'id',
  medicamentoId: 'medicamentoId',
  consumidorUsuarioId: 'consumidorUsuarioId',
  consumidorPerfilId: 'consumidorPerfilId',
  registranteId: 'registranteId',
  fechaHora: 'fechaHora',
  grupoId: 'grupoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HistorialScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  tipoAccion: 'tipoAccion',
  entidadTipo: 'entidadTipo',
  entidadId: 'entidadId',
  datosPrevios: 'datosPrevios',
  datosPosteriores: 'datosPosteriores',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADULTO: 'ADULTO',
  MENOR: 'MENOR'
};

exports.Prisma.ModelName = {
  User: 'User',
  Medication: 'Medication',
  NotificationSettings: 'NotificationSettings',
  Treatment: 'Treatment',
  TreatmentMedication: 'TreatmentMedication',
  TreatmentImage: 'TreatmentImage',
  Notification: 'Notification',
  NotificationPreferences: 'NotificationPreferences',
  PushSubscription: 'PushSubscription',
  ShoppingItem: 'ShoppingItem',
  ShoppingList: 'ShoppingList',
  GrupoFamiliar: 'GrupoFamiliar',
  PerfilMenor: 'PerfilMenor',
  Toma: 'Toma',
  Historial: 'Historial'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
