generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String?
  dni                     String                   @unique
  password                String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  fechaNacimiento         DateTime
  foto                    String?                  @db.LongText
  grupoId                 String?
  rol                     UserRole                 @default(ADULTO)
  grupoCreado             GrupoFamiliar[]          @relation("GrupoCreador")
  historial               Historial[]
  medications             Medication[]
  notificationPreferences NotificationPreferences?
  notificationSettings    NotificationSettings?
  pushSubscriptions       PushSubscription[]
  shoppingLists           ShoppingList[]
  tomasConsumidas         Toma[]                   @relation("TomaConsumidorUsuario")
  tomasRegistradas        Toma[]                   @relation("TomaRegistrante")
  treatments              Treatment[]
  grupo                   GrupoFamiliar?           @relation(fields: [grupoId], references: [id])

  @@index([grupoId], map: "User_grupoId_fkey")
}

model Medication {
  id                    String                @id @default(cuid())
  commercialName        String
  activeIngredient      String?
  description           String?
  intakeRecommendations String?
  imageUrl              String?
  initialQuantity       Float
  currentQuantity       Float
  unit                  String
  expirationDate        DateTime
  archived              Boolean               @default(false)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  userId                String
  user                  User                  @relation(fields: [userId], references: [id])
  tomas                 Toma[]
  treatmentMedications  TreatmentMedication[]

  @@index([userId], map: "Medication_userId_fkey")
}

model NotificationSettings {
  id                   String @id @default(cuid())
  userId               String @unique
  daysBeforeExpiration Int    @default(30)
  lowStockThreshold    Float  @default(10)
  user                 User   @relation(fields: [userId], references: [id])
}

model Treatment {
  id            String                @id @default(cuid())
  name          String
  startDate     DateTime              @default(now())
  endDate       DateTime
  isActive      Boolean               @default(true)
  userId        String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  patient       String
  patientId     String?
  patientType   String?
  symptoms      String?
  notifications Notification[]
  user          User                  @relation(fields: [userId], references: [id])
  images        TreatmentImage[]
  medications   TreatmentMedication[]

  @@index([userId], map: "Treatment_userId_fkey")
}

model TreatmentMedication {
  id                  String     @id @default(cuid())
  treatmentId         String
  medicationId        String
  frequencyHours      Int
  durationDays        Int
  dosage              String
  startAtSpecificTime Boolean    @default(false)
  specificStartTime   DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  endDate             DateTime
  isActive            Boolean    @default(true)
  startDate           DateTime
  medication          Medication @relation(fields: [medicationId], references: [id])
  treatment           Treatment  @relation(fields: [treatmentId], references: [id])

  @@index([medicationId], map: "TreatmentMedication_medicationId_fkey")
  @@index([treatmentId], map: "TreatmentMedication_treatmentId_fkey")
}

model TreatmentImage {
  id            String    @id @default(cuid())
  treatmentId   String
  imageUrl      String
  imageType     String
  createdAt     DateTime  @default(now())
  aiAnalysis    String?
  extractedText String?
  updatedAt     DateTime  @updatedAt
  treatment     Treatment @relation(fields: [treatmentId], references: [id])

  @@index([treatmentId], map: "TreatmentImage_treatmentId_fkey")
}

model Notification {
  id            String    @id @default(cuid())
  treatmentId   String
  scheduledDate DateTime
  sent          Boolean   @default(false)
  type          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  treatment     Treatment @relation(fields: [treatmentId], references: [id])

  @@index([treatmentId], map: "Notification_treatmentId_fkey")
}

model NotificationPreferences {
  id        String   @id @default(cuid())
  push      Boolean  @default(false)
  sound     Boolean  @default(false)
  email     Boolean  @default(false)
  browser   Boolean  @default(false)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  p256dhKey String
  authKey   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, endpoint])
}

model ShoppingItem {
  id             String       @id @default(cuid())
  name           String
  presentation   String?
  laboratory     String?
  price          Float
  quantity       Int          @default(1)
  shoppingListId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])

  @@index([shoppingListId], map: "ShoppingItem_shoppingListId_fkey")
}

model ShoppingList {
  id         String         @id @default(cuid())
  name       String
  total      Float
  isArchived Boolean        @default(false)
  userId     String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  items      ShoppingItem[]
  user       User           @relation(fields: [userId], references: [id])

  @@index([userId], map: "ShoppingList_userId_fkey")
}

model GrupoFamiliar {
  id              String        @id @default(cuid())
  nombre          String
  creadorId       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  creador         User          @relation("GrupoCreador", fields: [creadorId], references: [id])
  perfilesMenores PerfilMenor[]
  tomas           Toma[]
  integrantes     User[]

  @@index([creadorId], map: "GrupoFamiliar_creadorId_fkey")
}

model PerfilMenor {
  id              String        @id @default(cuid())
  nombre          String
  dni             String        @unique
  fechaNacimiento DateTime
  foto            String?
  grupoId         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  grupo           GrupoFamiliar @relation(fields: [grupoId], references: [id])
  tomas           Toma[]        @relation("TomaPerfilMenor")

  @@index([grupoId], map: "PerfilMenor_grupoId_fkey")
}

model Toma {
  id                  String        @id @default(cuid())
  medicamentoId       String
  consumidorUsuarioId String?
  consumidorPerfilId  String?
  registranteId       String
  fechaHora           DateTime      @default(now())
  grupoId             String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  consumidorPerfil    PerfilMenor?  @relation("TomaPerfilMenor", fields: [consumidorPerfilId], references: [id])
  consumidorUsuario   User?         @relation("TomaConsumidorUsuario", fields: [consumidorUsuarioId], references: [id])
  grupo               GrupoFamiliar @relation(fields: [grupoId], references: [id])
  medicamento         Medication    @relation(fields: [medicamentoId], references: [id])
  registrante         User          @relation("TomaRegistrante", fields: [registranteId], references: [id])

  @@index([consumidorPerfilId], map: "Toma_consumidorPerfilId_fkey")
  @@index([consumidorUsuarioId], map: "Toma_consumidorUsuarioId_fkey")
  @@index([grupoId], map: "Toma_grupoId_fkey")
  @@index([medicamentoId], map: "Toma_medicamentoId_fkey")
  @@index([registranteId], map: "Toma_registranteId_fkey")
}

model Historial {
  id               String   @id @default(cuid())
  usuarioId        String
  tipoAccion       String
  entidadTipo      String
  entidadId        String?
  datosPrevios     String?  @db.LongText
  datosPosteriores String?  @db.LongText
  metadata         String?  @db.LongText
  createdAt        DateTime @default(now())
  usuario          User     @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId])
  @@index([tipoAccion])
  @@index([entidadTipo, entidadId])
  @@index([createdAt])
}

enum UserRole {
  ADULTO
  MENOR
}
